This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: data/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.repomix/
  bundles.json
configs/
  noisy_surrogate_eval.yml
  sbm_fit_block_size_experiments.yml
  surrogate_eval.yml
notebooks/
  block_assigner_comparison_01-07-2025.ipynb
  convergence_figures_25-06-2025.ipynb
  likelihood_test.ipynb
  move_type_comparisons_30-06-2025.ipynb
  noisy_network_sampling_07-07-2025.ipynb
  sbm_block_sizes_26-06-2025.ipynb
  sbm_visualize.ipynb
  surrogate_accuracy_26-06-2025.ipynb
  visualize_generated_networks_08-07-2025.ipynb
planted_partitions/
  undirected_planted_partitions.py
slurm_scripts/
  fit_sbm.sh
src/
  data_processing/
    process_all.py
    process_caltech.py
    process_congress_twitter.py
    process_email_eu.py
    process_enron_email.py
    process_lastfm_asia.py
    process_wiki_vote.py
  metrics/
    __init__.py
    assortativity.py
    clustering.py
    community.py
    degree.py
    embedding.py
    shortest_path.py
    spectral.py
  pipelines/
    evaluate_noisy_surrogates.py
    evaluate_surrogates.py
    fit_sbm.py
    run_all.py
  sbm/
    utils/
      logger.py
      pipeline_utils.py
      util.py
    block_assigner.py
    block_change_proposers.py
    block_data.py
    edge_delta.py
    graph_data.py
    initial_partition.py
    io.py
    likelihood.py
    mcmc_diagnostics.py
    mcmc.py
    model.py
    node_mover.py
    noisy_fit.py
    post_process.py
    sampling.py
    stopping_criteria.py
  tests/
    dp/
      test_noise.py
      test_post_processing.py
    mcmc/
      likelihood_test.py
      planted_partition_tests.py
      test_block_assigner.py
      test_change_proposer_and_mover.py
      test_edge_delta.py
      test_global_ll.py
      test_greedy_assign_helpers.py
      test_swaps.py
    metrics/
      clustering
      conftest.py
      shortest_path.py
      test_assortativity.py
      test_community_metrics.py
      test_eigen_subspace.py
      test_embedding_metrics.py
      test_metrics.py
    sbm/
      test_io.py
      test_sampling.py
.gitignore
env_backup.yml
pyproject.toml
README.md
requirements.txt
setup.cfg
tmp_test.py

================================================================
Files
================================================================

================
File: src/sbm/mcmc_diagnostics.py
================
 1: # sbm/mcmc_diagnostics.py
 2: import numpy as np
 3: import tensorflow_probability as tfp
 4: from typing import Optional
 5: class OnlineDiagnostics:
 6:     """
 7:     Keeps a rolling window of the last `window` draws *per chain* and
 8:     computes
 9:       • R̂  (potential scale‑reduction)  — via tfp.mcmc.potential_scale_reduction
10:       • ESS (effective sample size)     — via tfp.mcmc.effective_sample_size
11:     """
12:     def __init__(self, window: int = 4000, n_chain: int = 1):
13:         self.window   = int(window)
14:         self.n_chain  = int(n_chain)
15:         self._buf:    Optional[np.ndarray] = None   # (chain, window, stat)
16:         self._write   = 0
17:         self._filled  = False
18:     # ------------------------------------------------------------------
19:     def _ensure_buffer(self, n_stat: int):
20:         if self._buf is None:
21:             self._buf = np.empty(
22:                 (self.n_chain, self.window, n_stat), dtype=np.float64)
23:     # ------------------------------------------------------------------
24:     def update(self, logp, m_diag, m_off, chain: int = 0):
25:         """
26:         Parameters
27:         ----------
28:         logp   : float
29:         m_diag : np.ndarray  shape (B,)
30:         m_off  : np.ndarray  shape (P,)
31:         chain  : int         which chain is calling (0 by default)
32:         """
33:         vec = np.concatenate([[logp], m_diag, m_off]).astype(np.float64)
34:         self._ensure_buffer(vec.size)
35:         if self._buf is None:
36:             raise RuntimeError("Buffer not initialized. Call `update` with valid data first.")
37:         self._buf[chain, self._write] = vec
38:         # advance circular pointer only once *all* chains have written
39:         if chain == self.n_chain - 1:
40:             self._write = (self._write + 1) % self.window
41:             if self._write == 0:
42:                 self._filled = True
43:     # ------------------------------------------------------------------
44:     def _ordered_block(self):
45:         """Return draws in chronological order, shape (chain, draw, stat)."""
46:         if self._buf is None:
47:             raise RuntimeError("Buffer not initialized. Call `update` with valid data first.")
48:         if not self._filled:
49:             return self._buf[:, :self._write, :]
50:         a = self._buf[:, self._write:, :]
51:         b = self._buf[:, :self._write, :]
52:         return np.concatenate([a, b], axis=1)
53:     # ------------------------------------------------------------------
54:     def summary(self):
55:         """Return (max‑R̂, min‑ESS).  NaN until buffer is full."""
56:         if not self._filled or self._buf is None:
57:             return np.nan, np.nan
58:         block = self._ordered_block()          # (chain, draw, stat)
59:         rhat = tfp.mcmc.potential_scale_reduction(
60:             block, independent_chain_ndims=1
61:         ).numpy().max()
62:         ess  = tfp.mcmc.effective_sample_size(
63:             block, filter_beyond_positive_pairs=True
64:         ).numpy().min()
65:         return float(rhat), float(ess)

================
File: .repomix/bundles.json
================
1: {
2:   "bundles": {}
3: }

================
File: configs/noisy_surrogate_eval.yml
================
 1: # ---------------------------------------------------------------
 2: n_surrogates: 10 # graphs to sample per dataset
 3: overwrite: true # set true to ignore cached results
 4: # privacy levels
 5: eps: [0.1, 1, 3]
 6: delta: [1e-4]
 7: metrics:
 8:   - shortest_path
 9:   - avg_path_length
10:   - degree
11:   - clustering
12:   - avg_clustering
13:   - eigen_val 
14:   - eigen_centrality
15:   - infomap
16:   - leiden
17:   - assortativity
18:   #- embedding_node2vec
19:   - embedding_prone

================
File: notebooks/convergence_figures_25-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "af425169",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Notebook for visualizing the convergence of the MCMC algorithm"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": null,
 14:    "id": "828ee0d9",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "import numpy as np\n",
 19:     "import pandas as pd\n",
 20:     "import matplotlib.pyplot as plt"
 21:    ]
 22:   },
 23:   {
 24:    "cell_type": "code",
 25:    "execution_count": 69,
 26:    "id": "9f091b92",
 27:    "metadata": {},
 28:    "outputs": [],
 29:    "source": [
 30:     "import sys\n",
 31:     "from pathlib import Path\n",
 32:     "logs_path = Path(\"/Users/lmmi/anon_sbm/logs\")\n",
 33:     "\n",
 34:     "# find all log files in the logs directory\n",
 35:     "log_files = list(logs_path.glob(\"*.csv\"))"
 36:    ]
 37:   },
 38:   {
 39:    "cell_type": "code",
 40:    "execution_count": 70,
 41:    "id": "e8adb1d1",
 42:    "metadata": {},
 43:    "outputs": [],
 44:    "source": [
 45:     "def determine_name(file_name, dataset_names):\n",
 46:     "    \"\"\"\n",
 47:     "    Determine the name of the dataset based on the file name.\n",
 48:     "    \"\"\"\n",
 49:     "    for name in dataset_names:\n",
 50:     "        if name in file_name:\n",
 51:     "            return name\n",
 52:     "    return \"unknown\"\n",
 53:     "dataset_names = [ \"congress_twitter\", \"caltech_fb\", \"eu_email\", ]"
 54:    ]
 55:   },
 56:   {
 57:    "cell_type": "code",
 58:    "execution_count": 71,
 59:    "id": "23eabf12",
 60:    "metadata": {},
 61:    "outputs": [],
 62:    "source": [
 63:     "df_list = []\n",
 64:     "\n",
 65:     "for log_file in log_files:\n",
 66:     "    df = pd.read_csv(log_file)\n",
 67:     "    df[\"name\"] = determine_name(log_file.name, dataset_names)\n",
 68:     "\n",
 69:     "    df_list.append(df)\n",
 70:     "\n",
 71:     "df = pd.concat(df_list, ignore_index=True)"
 72:    ]
 73:   },
 74:   {
 75:    "cell_type": "code",
 76:    "execution_count": 72,
 77:    "id": "afc3941c",
 78:    "metadata": {},
 79:    "outputs": [
 80:     {
 81:      "name": "stderr",
 82:      "output_type": "stream",
 83:      "text": [
 84:       "/var/folders/y6/j9fbqcvx6lb5l99614n30y4c0000gn/T/ipykernel_88748/2982452800.py:32: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
 85:       "  fig.show()\n"
 86:      ]
 87:     },
 88:     {
 89:      "data": {
 90:       "image/png": "",
 91:       "text/plain": [
 92:        "<Figure size 1000x600 with 1 Axes>"
 93:       ]
 94:      },
 95:      "metadata": {},
 96:      "output_type": "display_data"
 97:     }
 98:    ],
 99:    "source": [
100:     "marker_styles = {\n",
101:     "    \"congress_twitter\": \"o\",\n",
102:     "    \"caltech_fb\": \"s\",\n",
103:     "    \"eu_email\": \"D\",\n",
104:     "}\n",
105:     "colors = {\n",
106:     "    \"congress_twitter\": \"teal\",\n",
107:     "    \"caltech_fb\": \"salmon\",\n",
108:     "    \"eu_email\": \"black\",\n",
109:     "}\n",
110:     "\n",
111:     "\n",
112:     "fig, ax = plt.subplots(figsize=(10, 6))\n",
113:     "\n",
114:     "for name, group in df.groupby(\"name\"):\n",
115:     "    group = group.sort_values(\"iteration\")\n",
116:     "    ax.plot(\n",
117:     "        group[\"iteration\"],\n",
118:     "        group[\"neg_log_likelihood\"],\n",
119:     "        label=name,\n",
120:     "        linewidth=0,\n",
121:     "        marker=marker_styles[name], # type: ignore\n",
122:     "        )\n",
123:     "\n",
124:     "plt.legend(fontsize=12)\n",
125:     "\n",
126:     "ax.set_ylabel(\"Negative Log Likelihood\", fontsize=14)\n",
127:     "ax.set_xlabel(\"MCMC Iteration\", fontsize=14)\n",
128:     "\n",
129:     "\n",
130:     "ax.spines[['top', 'right']].set_visible(False)\n",
131:     "fig.show()"
132:    ]
133:   },
134:   {
135:    "cell_type": "code",
136:    "execution_count": null,
137:    "id": "666c6cc1",
138:    "metadata": {},
139:    "outputs": [],
140:    "source": []
141:   }
142:  ],
143:  "metadata": {
144:   "kernelspec": {
145:    "display_name": "anon_sbm_notebook",
146:    "language": "python",
147:    "name": "python3"
148:   },
149:   "language_info": {
150:    "codemirror_mode": {
151:     "name": "ipython",
152:     "version": 3
153:    },
154:    "file_extension": ".py",
155:    "mimetype": "text/x-python",
156:    "name": "python",
157:    "nbconvert_exporter": "python",
158:    "pygments_lexer": "ipython3",
159:    "version": "3.13.5"
160:   }
161:  },
162:  "nbformat": 4,
163:  "nbformat_minor": 5
164: }

================
File: notebooks/likelihood_test.ipynb
================
   1: {
   2:  "cells": [
   3:   {
   4:    "cell_type": "code",
   5:    "execution_count": 2,
   6:    "metadata": {},
   7:    "outputs": [],
   8:    "source": [
   9:     "import numpy as np\n",
  10:     "import scipy.sparse as sp\n",
  11:     "from sbm.sbm import StochasticBlockModel"
  12:    ]
  13:   },
  14:   {
  15:    "cell_type": "code",
  16:    "execution_count": 32,
  17:    "metadata": {},
  18:    "outputs": [],
  19:    "source": [
  20:     "num_nodes = 1000\n",
  21:     "block_size = 50\n",
  22:     "# Generate a random sparse adjacency matrix\n",
  23:     "adjacency = sp.random(num_nodes, num_nodes, density=0.01, format='csr')\n",
  24:     "adjacency = adjacency + adjacency.T  # Make it symmetric\n",
  25:     "adjacency.data = np.ones_like(adjacency.data)  # Unweighted graph\n",
  26:     "\n",
  27:     "# Create an initial uniform random partition\n",
  28:     "initial_blocks = StochasticBlockModel.create_uniform_partition(num_nodes, block_size)\n",
  29:     "\n",
  30:     "# Initialize the SBM\n",
  31:     "sbm = StochasticBlockModel(adjacency, initial_blocks)"
  32:    ]
  33:   },
  34:   {
  35:    "cell_type": "code",
  36:    "execution_count": 33,
  37:    "metadata": {},
  38:    "outputs": [
  39:     {
  40:      "name": "stdout",
  41:      "output_type": "stream",
  42:      "text": [
  43:       "Initial Likelihood: -110207.47925966672\n"
  44:      ]
  45:     }
  46:    ],
  47:    "source": [
  48:     "# Compute the initial likelihood\n",
  49:     "initial_likelihood = sbm.compute_likelihood()\n",
  50:     "print(f\"Initial Likelihood: {initial_likelihood}\")"
  51:    ]
  52:   },
  53:   {
  54:    "cell_type": "code",
  55:    "execution_count": 34,
  56:    "metadata": {},
  57:    "outputs": [
  58:     {
  59:      "name": "stdout",
  60:      "output_type": "stream",
  61:      "text": [
  62:       "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n"
  63:      ]
  64:     }
  65:    ],
  66:    "source": [
  67:     "block_0 = sbm.block_members[0]\n",
  68:     "sbm.split_block(0)\n",
  69:     "\n",
  70:     "test = [elem in block_0 for elem in sbm.block_members[0]]\n",
  71:     "print(test)"
  72:    ]
  73:   },
  74:   {
  75:    "cell_type": "code",
  76:    "execution_count": 35,
  77:    "metadata": {},
  78:    "outputs": [
  79:     {
  80:      "name": "stdout",
  81:      "output_type": "stream",
  82:      "text": [
  83:       "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n"
  84:      ]
  85:     }
  86:    ],
  87:    "source": [
  88:     "block_1, block_2 = sbm.block_members[1], sbm.block_members[2]\n",
  89:     "\n",
  90:     "sbm.merge_blocks(1, 2)\n",
  91:     "\n",
  92:     "test = [elem in sbm.block_members[1] for elem in block_1] + [elem in sbm.block_members[1] for elem in block_2]\n",
  93:     "print(test)"
  94:    ]
  95:   },
  96:   {
  97:    "cell_type": "code",
  98:    "execution_count": 62,
  99:    "metadata": {},
 100:    "outputs": [],
 101:    "source": [
 102:     "sbm.split_block(0)"
 103:    ]
 104:   },
 105:   {
 106:    "cell_type": "code",
 107:    "execution_count": 63,
 108:    "metadata": {},
 109:    "outputs": [
 110:     {
 111:      "data": {
 112:       "text/plain": [
 113:        "dict_keys([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 26])"
 114:       ]
 115:      },
 116:      "execution_count": 63,
 117:      "metadata": {},
 118:      "output_type": "execute_result"
 119:     }
 120:    ],
 121:    "source": [
 122:     "sbm.block_members.keys()"
 123:    ]
 124:   },
 125:   {
 126:    "cell_type": "code",
 127:    "execution_count": 64,
 128:    "metadata": {},
 129:    "outputs": [
 130:     {
 131:      "data": {
 132:       "text/plain": [
 133:        "{3: [361,\n",
 134:        "  569,\n",
 135:        "  298,\n",
 136:        "  110,\n",
 137:        "  288,\n",
 138:        "  972,\n",
 139:        "  595,\n",
 140:        "  10,\n",
 141:        "  67,\n",
 142:        "  436,\n",
 143:        "  281,\n",
 144:        "  52,\n",
 145:        "  476,\n",
 146:        "  791,\n",
 147:        "  760,\n",
 148:        "  388,\n",
 149:        "  926,\n",
 150:        "  928,\n",
 151:        "  45,\n",
 152:        "  40,\n",
 153:        "  393,\n",
 154:        "  474,\n",
 155:        "  237,\n",
 156:        "  226,\n",
 157:        "  814,\n",
 158:        "  447,\n",
 159:        "  884,\n",
 160:        "  833,\n",
 161:        "  62,\n",
 162:        "  834,\n",
 163:        "  387,\n",
 164:        "  448,\n",
 165:        "  788,\n",
 166:        "  179,\n",
 167:        "  801,\n",
 168:        "  318,\n",
 169:        "  64,\n",
 170:        "  629,\n",
 171:        "  968,\n",
 172:        "  911,\n",
 173:        "  568,\n",
 174:        "  450,\n",
 175:        "  735,\n",
 176:        "  1,\n",
 177:        "  410,\n",
 178:        "  30,\n",
 179:        "  389,\n",
 180:        "  215,\n",
 181:        "  478,\n",
 182:        "  319],\n",
 183:        " 4: [202,\n",
 184:        "  787,\n",
 185:        "  255,\n",
 186:        "  502,\n",
 187:        "  242,\n",
 188:        "  827,\n",
 189:        "  402,\n",
 190:        "  256,\n",
 191:        "  584,\n",
 192:        "  547,\n",
 193:        "  579,\n",
 194:        "  739,\n",
 195:        "  282,\n",
 196:        "  697,\n",
 197:        "  135,\n",
 198:        "  342,\n",
 199:        "  636,\n",
 200:        "  377,\n",
 201:        "  118,\n",
 202:        "  722,\n",
 203:        "  915,\n",
 204:        "  685,\n",
 205:        "  397,\n",
 206:        "  341,\n",
 207:        "  416,\n",
 208:        "  612,\n",
 209:        "  491,\n",
 210:        "  392,\n",
 211:        "  941,\n",
 212:        "  668,\n",
 213:        "  148,\n",
 214:        "  370,\n",
 215:        "  247,\n",
 216:        "  734,\n",
 217:        "  991,\n",
 218:        "  619,\n",
 219:        "  262,\n",
 220:        "  351,\n",
 221:        "  628,\n",
 222:        "  864,\n",
 223:        "  337,\n",
 224:        "  845,\n",
 225:        "  752,\n",
 226:        "  244,\n",
 227:        "  903,\n",
 228:        "  606,\n",
 229:        "  269,\n",
 230:        "  898,\n",
 231:        "  780,\n",
 232:        "  716],\n",
 233:        " 5: [352,\n",
 234:        "  210,\n",
 235:        "  473,\n",
 236:        "  807,\n",
 237:        "  676,\n",
 238:        "  353,\n",
 239:        "  534,\n",
 240:        "  813,\n",
 241:        "  88,\n",
 242:        "  58,\n",
 243:        "  198,\n",
 244:        "  715,\n",
 245:        "  519,\n",
 246:        "  945,\n",
 247:        "  264,\n",
 248:        "  357,\n",
 249:        "  53,\n",
 250:        "  934,\n",
 251:        "  877,\n",
 252:        "  217,\n",
 253:        "  437,\n",
 254:        "  653,\n",
 255:        "  746,\n",
 256:        "  737,\n",
 257:        "  461,\n",
 258:        "  953,\n",
 259:        "  458,\n",
 260:        "  346,\n",
 261:        "  414,\n",
 262:        "  329,\n",
 263:        "  902,\n",
 264:        "  106,\n",
 265:        "  295,\n",
 266:        "  695,\n",
 267:        "  480,\n",
 268:        "  994,\n",
 269:        "  206,\n",
 270:        "  592,\n",
 271:        "  44,\n",
 272:        "  171,\n",
 273:        "  876,\n",
 274:        "  105,\n",
 275:        "  758,\n",
 276:        "  57,\n",
 277:        "  128,\n",
 278:        "  7,\n",
 279:        "  811,\n",
 280:        "  145,\n",
 281:        "  985,\n",
 282:        "  977],\n",
 283:        " 6: [229,\n",
 284:        "  394,\n",
 285:        "  656,\n",
 286:        "  744,\n",
 287:        "  935,\n",
 288:        "  333,\n",
 289:        "  407,\n",
 290:        "  736,\n",
 291:        "  546,\n",
 292:        "  553,\n",
 293:        "  221,\n",
 294:        "  982,\n",
 295:        "  914,\n",
 296:        "  101,\n",
 297:        "  230,\n",
 298:        "  406,\n",
 299:        "  872,\n",
 300:        "  266,\n",
 301:        "  285,\n",
 302:        "  325,\n",
 303:        "  582,\n",
 304:        "  562,\n",
 305:        "  222,\n",
 306:        "  924,\n",
 307:        "  78,\n",
 308:        "  970,\n",
 309:        "  899,\n",
 310:        "  729,\n",
 311:        "  869,\n",
 312:        "  77,\n",
 313:        "  908,\n",
 314:        "  510,\n",
 315:        "  713,\n",
 316:        "  9,\n",
 317:        "  593,\n",
 318:        "  279,\n",
 319:        "  429,\n",
 320:        "  721,\n",
 321:        "  933,\n",
 322:        "  860,\n",
 323:        "  375,\n",
 324:        "  334,\n",
 325:        "  750,\n",
 326:        "  849,\n",
 327:        "  524,\n",
 328:        "  225,\n",
 329:        "  241,\n",
 330:        "  803,\n",
 331:        "  759,\n",
 332:        "  669],\n",
 333:        " 7: [92,\n",
 334:        "  196,\n",
 335:        "  770,\n",
 336:        "  530,\n",
 337:        "  740,\n",
 338:        "  189,\n",
 339:        "  777,\n",
 340:        "  699,\n",
 341:        "  144,\n",
 342:        "  463,\n",
 343:        "  404,\n",
 344:        "  270,\n",
 345:        "  890,\n",
 346:        "  320,\n",
 347:        "  315,\n",
 348:        "  403,\n",
 349:        "  310,\n",
 350:        "  350,\n",
 351:        "  802,\n",
 352:        "  293,\n",
 353:        "  29,\n",
 354:        "  587,\n",
 355:        "  846,\n",
 356:        "  852,\n",
 357:        "  86,\n",
 358:        "  453,\n",
 359:        "  523,\n",
 360:        "  249,\n",
 361:        "  939,\n",
 362:        "  34,\n",
 363:        "  912,\n",
 364:        "  0,\n",
 365:        "  776,\n",
 366:        "  812,\n",
 367:        "  340,\n",
 368:        "  512,\n",
 369:        "  187,\n",
 370:        "  672,\n",
 371:        "  677,\n",
 372:        "  190,\n",
 373:        "  878,\n",
 374:        "  893,\n",
 375:        "  605,\n",
 376:        "  411,\n",
 377:        "  228,\n",
 378:        "  665,\n",
 379:        "  751,\n",
 380:        "  439,\n",
 381:        "  5,\n",
 382:        "  844],\n",
 383:        " 8: [795,\n",
 384:        "  943,\n",
 385:        "  212,\n",
 386:        "  978,\n",
 387:        "  347,\n",
 388:        "  71,\n",
 389:        "  48,\n",
 390:        "  292,\n",
 391:        "  155,\n",
 392:        "  608,\n",
 393:        "  997,\n",
 394:        "  576,\n",
 395:        "  449,\n",
 396:        "  990,\n",
 397:        "  36,\n",
 398:        "  895,\n",
 399:        "  979,\n",
 400:        "  778,\n",
 401:        "  154,\n",
 402:        "  494,\n",
 403:        "  529,\n",
 404:        "  542,\n",
 405:        "  303,\n",
 406:        "  560,\n",
 407:        "  471,\n",
 408:        "  385,\n",
 409:        "  901,\n",
 410:        "  124,\n",
 411:        "  180,\n",
 412:        "  850,\n",
 413:        "  631,\n",
 414:        "  769,\n",
 415:        "  137,\n",
 416:        "  462,\n",
 417:        "  307,\n",
 418:        "  263,\n",
 419:        "  89,\n",
 420:        "  805,\n",
 421:        "  428,\n",
 422:        "  424,\n",
 423:        "  892,\n",
 424:        "  390,\n",
 425:        "  63,\n",
 426:        "  19,\n",
 427:        "  782,\n",
 428:        "  267,\n",
 429:        "  917,\n",
 430:        "  773,\n",
 431:        "  465,\n",
 432:        "  842],\n",
 433:        " 9: [76,\n",
 434:        "  733,\n",
 435:        "  49,\n",
 436:        "  43,\n",
 437:        "  614,\n",
 438:        "  885,\n",
 439:        "  618,\n",
 440:        "  164,\n",
 441:        "  423,\n",
 442:        "  117,\n",
 443:        "  516,\n",
 444:        "  565,\n",
 445:        "  166,\n",
 446:        "  771,\n",
 447:        "  717,\n",
 448:        "  859,\n",
 449:        "  691,\n",
 450:        "  159,\n",
 451:        "  495,\n",
 452:        "  153,\n",
 453:        "  678,\n",
 454:        "  227,\n",
 455:        "  692,\n",
 456:        "  981,\n",
 457:        "  181,\n",
 458:        "  857,\n",
 459:        "  126,\n",
 460:        "  950,\n",
 461:        "  55,\n",
 462:        "  622,\n",
 463:        "  129,\n",
 464:        "  731,\n",
 465:        "  554,\n",
 466:        "  556,\n",
 467:        "  220,\n",
 468:        "  162,\n",
 469:        "  238,\n",
 470:        "  925,\n",
 471:        "  309,\n",
 472:        "  662,\n",
 473:        "  673,\n",
 474:        "  831,\n",
 475:        "  72,\n",
 476:        "  107,\n",
 477:        "  815,\n",
 478:        "  514,\n",
 479:        "  706,\n",
 480:        "  847,\n",
 481:        "  233,\n",
 482:        "  467],\n",
 483:        " 10: [308,\n",
 484:        "  186,\n",
 485:        "  489,\n",
 486:        "  959,\n",
 487:        "  658,\n",
 488:        "  362,\n",
 489:        "  223,\n",
 490:        "  862,\n",
 491:        "  659,\n",
 492:        "  484,\n",
 493:        "  536,\n",
 494:        "  757,\n",
 495:        "  969,\n",
 496:        "  18,\n",
 497:        "  825,\n",
 498:        "  332,\n",
 499:        "  306,\n",
 500:        "  840,\n",
 501:        "  660,\n",
 502:        "  602,\n",
 503:        "  684,\n",
 504:        "  188,\n",
 505:        "  613,\n",
 506:        "  590,\n",
 507:        "  820,\n",
 508:        "  324,\n",
 509:        "  443,\n",
 510:        "  627,\n",
 511:        "  586,\n",
 512:        "  766,\n",
 513:        "  69,\n",
 514:        "  830,\n",
 515:        "  942,\n",
 516:        "  419,\n",
 517:        "  798,\n",
 518:        "  946,\n",
 519:        "  65,\n",
 520:        "  644,\n",
 521:        "  79,\n",
 522:        "  604,\n",
 523:        "  121,\n",
 524:        "  74,\n",
 525:        "  971,\n",
 526:        "  381,\n",
 527:        "  81,\n",
 528:        "  100,\n",
 529:        "  932,\n",
 530:        "  531,\n",
 531:        "  232,\n",
 532:        "  466],\n",
 533:        " 11: [762,\n",
 534:        "  355,\n",
 535:        "  955,\n",
 536:        "  451,\n",
 537:        "  904,\n",
 538:        "  109,\n",
 539:        "  749,\n",
 540:        "  621,\n",
 541:        "  689,\n",
 542:        "  231,\n",
 543:        "  626,\n",
 544:        "  305,\n",
 545:        "  167,\n",
 546:        "  98,\n",
 547:        "  938,\n",
 548:        "  37,\n",
 549:        "  427,\n",
 550:        "  284,\n",
 551:        "  793,\n",
 552:        "  958,\n",
 553:        "  724,\n",
 554:        "  312,\n",
 555:        "  848,\n",
 556:        "  415,\n",
 557:        "  528,\n",
 558:        "  867,\n",
 559:        "  645,\n",
 560:        "  158,\n",
 561:        "  661,\n",
 562:        "  954,\n",
 563:        "  920,\n",
 564:        "  354,\n",
 565:        "  910,\n",
 566:        "  59,\n",
 567:        "  965,\n",
 568:        "  208,\n",
 569:        "  441,\n",
 570:        "  358,\n",
 571:        "  623,\n",
 572:        "  54,\n",
 573:        "  497,\n",
 574:        "  966,\n",
 575:        "  112,\n",
 576:        "  125,\n",
 577:        "  532,\n",
 578:        "  379,\n",
 579:        "  365,\n",
 580:        "  138,\n",
 581:        "  634,\n",
 582:        "  214],\n",
 583:        " 12: [797,\n",
 584:        "  719,\n",
 585:        "  975,\n",
 586:        "  603,\n",
 587:        "  540,\n",
 588:        "  507,\n",
 589:        "  610,\n",
 590:        "  879,\n",
 591:        "  870,\n",
 592:        "  302,\n",
 593:        "  594,\n",
 594:        "  609,\n",
 595:        "  574,\n",
 596:        "  199,\n",
 597:        "  693,\n",
 598:        "  703,\n",
 599:        "  666,\n",
 600:        "  422,\n",
 601:        "  278,\n",
 602:        "  775,\n",
 603:        "  219,\n",
 604:        "  84,\n",
 605:        "  654,\n",
 606:        "  317,\n",
 607:        "  321,\n",
 608:        "  420,\n",
 609:        "  17,\n",
 610:        "  573,\n",
 611:        "  843,\n",
 612:        "  201,\n",
 613:        "  525,\n",
 614:        "  224,\n",
 615:        "  816,\n",
 616:        "  207,\n",
 617:        "  783,\n",
 618:        "  435,\n",
 619:        "  725,\n",
 620:        "  360,\n",
 621:        "  518,\n",
 622:        "  80,\n",
 623:        "  561,\n",
 624:        "  11,\n",
 625:        "  948,\n",
 626:        "  694,\n",
 627:        "  493,\n",
 628:        "  103,\n",
 629:        "  923,\n",
 630:        "  70,\n",
 631:        "  268,\n",
 632:        "  290],\n",
 633:        " 13: [13,\n",
 634:        "  989,\n",
 635:        "  929,\n",
 636:        "  374,\n",
 637:        "  195,\n",
 638:        "  236,\n",
 639:        "  446,\n",
 640:        "  39,\n",
 641:        "  973,\n",
 642:        "  625,\n",
 643:        "  161,\n",
 644:        "  630,\n",
 645:        "  464,\n",
 646:        "  682,\n",
 647:        "  345,\n",
 648:        "  768,\n",
 649:        "  680,\n",
 650:        "  549,\n",
 651:        "  455,\n",
 652:        "  192,\n",
 653:        "  633,\n",
 654:        "  23,\n",
 655:        "  20,\n",
 656:        "  883,\n",
 657:        "  589,\n",
 658:        "  533,\n",
 659:        "  87,\n",
 660:        "  475,\n",
 661:        "  996,\n",
 662:        "  947,\n",
 663:        "  686,\n",
 664:        "  283,\n",
 665:        "  384,\n",
 666:        "  376,\n",
 667:        "  259,\n",
 668:        "  323,\n",
 669:        "  326,\n",
 670:        "  274,\n",
 671:        "  165,\n",
 672:        "  398,\n",
 673:        "  781,\n",
 674:        "  747,\n",
 675:        "  149,\n",
 676:        "  838,\n",
 677:        "  240,\n",
 678:        "  598,\n",
 679:        "  741,\n",
 680:        "  204,\n",
 681:        "  700,\n",
 682:        "  457],\n",
 683:        " 14: [301,\n",
 684:        "  804,\n",
 685:        "  964,\n",
 686:        "  504,\n",
 687:        "  616,\n",
 688:        "  921,\n",
 689:        "  409,\n",
 690:        "  600,\n",
 691:        "  413,\n",
 692:        "  949,\n",
 693:        "  819,\n",
 694:        "  861,\n",
 695:        "  291,\n",
 696:        "  211,\n",
 697:        "  75,\n",
 698:        "  432,\n",
 699:        "  425,\n",
 700:        "  753,\n",
 701:        "  772,\n",
 702:        "  742,\n",
 703:        "  82,\n",
 704:        "  674,\n",
 705:        "  643,\n",
 706:        "  607,\n",
 707:        "  765,\n",
 708:        "  460,\n",
 709:        "  500,\n",
 710:        "  400,\n",
 711:        "  889,\n",
 712:        "  683,\n",
 713:        "  940,\n",
 714:        "  839,\n",
 715:        "  513,\n",
 716:        "  177,\n",
 717:        "  408,\n",
 718:        "  248,\n",
 719:        "  790,\n",
 720:        "  97,\n",
 721:        "  131,\n",
 722:        "  544,\n",
 723:        "  234,\n",
 724:        "  578,\n",
 725:        "  250,\n",
 726:        "  980,\n",
 727:        "  873,\n",
 728:        "  687,\n",
 729:        "  42,\n",
 730:        "  541,\n",
 731:        "  710,\n",
 732:        "  663],\n",
 733:        " 15: [197,\n",
 734:        "  380,\n",
 735:        "  28,\n",
 736:        "  728,\n",
 737:        "  134,\n",
 738:        "  254,\n",
 739:        "  8,\n",
 740:        "  566,\n",
 741:        "  216,\n",
 742:        "  962,\n",
 743:        "  314,\n",
 744:        "  277,\n",
 745:        "  6,\n",
 746:        "  708,\n",
 747:        "  829,\n",
 748:        "  796,\n",
 749:        "  701,\n",
 750:        "  515,\n",
 751:        "  779,\n",
 752:        "  114,\n",
 753:        "  2,\n",
 754:        "  368,\n",
 755:        "  832,\n",
 756:        "  287,\n",
 757:        "  823,\n",
 758:        "  763,\n",
 759:        "  642,\n",
 760:        "  243,\n",
 761:        "  66,\n",
 762:        "  15,\n",
 763:        "  535,\n",
 764:        "  272,\n",
 765:        "  391,\n",
 766:        "  548,\n",
 767:        "  205,\n",
 768:        "  983,\n",
 769:        "  858,\n",
 770:        "  808,\n",
 771:        "  265,\n",
 772:        "  720,\n",
 773:        "  26,\n",
 774:        "  327,\n",
 775:        "  570,\n",
 776:        "  709,\n",
 777:        "  527,\n",
 778:        "  789,\n",
 779:        "  868,\n",
 780:        "  581,\n",
 781:        "  151,\n",
 782:        "  421],\n",
 783:        " 16: [647,\n",
 784:        "  956,\n",
 785:        "  111,\n",
 786:        "  47,\n",
 787:        "  418,\n",
 788:        "  469,\n",
 789:        "  937,\n",
 790:        "  688,\n",
 791:        "  356,\n",
 792:        "  289,\n",
 793:        "  615,\n",
 794:        "  286,\n",
 795:        "  170,\n",
 796:        "  617,\n",
 797:        "  511,\n",
 798:        "  986,\n",
 799:        "  313,\n",
 800:        "  364,\n",
 801:        "  896,\n",
 802:        "  974,\n",
 803:        "  119,\n",
 804:        "  22,\n",
 805:        "  133,\n",
 806:        "  987,\n",
 807:        "  163,\n",
 808:        "  679,\n",
 809:        "  431,\n",
 810:        "  483,\n",
 811:        "  550,\n",
 812:        "  738,\n",
 813:        "  517,\n",
 814:        "  712,\n",
 815:        "  818,\n",
 816:        "  963,\n",
 817:        "  897,\n",
 818:        "  261,\n",
 819:        "  564,\n",
 820:        "  96,\n",
 821:        "  539,\n",
 822:        "  828,\n",
 823:        "  863,\n",
 824:        "  916,\n",
 825:        "  41,\n",
 826:        "  294,\n",
 827:        "  132,\n",
 828:        "  299,\n",
 829:        "  652,\n",
 830:        "  336,\n",
 831:        "  718,\n",
 832:        "  168],\n",
 833:        " 17: [675,\n",
 834:        "  73,\n",
 835:        "  25,\n",
 836:        "  276,\n",
 837:        "  809,\n",
 838:        "  386,\n",
 839:        "  127,\n",
 840:        "  257,\n",
 841:        "  442,\n",
 842:        "  331,\n",
 843:        "  245,\n",
 844:        "  417,\n",
 845:        "  786,\n",
 846:        "  572,\n",
 847:        "  891,\n",
 848:        "  995,\n",
 849:        "  485,\n",
 850:        "  113,\n",
 851:        "  456,\n",
 852:        "  841,\n",
 853:        "  412,\n",
 854:        "  152,\n",
 855:        "  235,\n",
 856:        "  481,\n",
 857:        "  599,\n",
 858:        "  338,\n",
 859:        "  596,\n",
 860:        "  646,\n",
 861:        "  650,\n",
 862:        "  824,\n",
 863:        "  396,\n",
 864:        "  330,\n",
 865:        "  316,\n",
 866:        "  24,\n",
 867:        "  745,\n",
 868:        "  454,\n",
 869:        "  115,\n",
 870:        "  707,\n",
 871:        "  784,\n",
 872:        "  61,\n",
 873:        "  952,\n",
 874:        "  508,\n",
 875:        "  498,\n",
 876:        "  184,\n",
 877:        "  866,\n",
 878:        "  213,\n",
 879:        "  927,\n",
 880:        "  150,\n",
 881:        "  900,\n",
 882:        "  558],\n",
 883:        " 18: [648,\n",
 884:        "  999,\n",
 885:        "  624,\n",
 886:        "  203,\n",
 887:        "  146,\n",
 888:        "  182,\n",
 889:        "  585,\n",
 890:        "  704,\n",
 891:        "  906,\n",
 892:        "  670,\n",
 893:        "  482,\n",
 894:        "  984,\n",
 895:        "  785,\n",
 896:        "  503,\n",
 897:        "  486,\n",
 898:        "  296,\n",
 899:        "  239,\n",
 900:        "  875,\n",
 901:        "  252,\n",
 902:        "  492,\n",
 903:        "  537,\n",
 904:        "  99,\n",
 905:        "  335,\n",
 906:        "  957,\n",
 907:        "  200,\n",
 908:        "  506,\n",
 909:        "  108,\n",
 910:        "  193,\n",
 911:        "  588,\n",
 912:        "  359,\n",
 913:        "  657,\n",
 914:        "  373,\n",
 915:        "  94,\n",
 916:        "  60,\n",
 917:        "  960,\n",
 918:        "  366,\n",
 919:        "  14,\n",
 920:        "  3,\n",
 921:        "  810,\n",
 922:        "  951,\n",
 923:        "  583,\n",
 924:        "  142,\n",
 925:        "  761,\n",
 926:        "  637,\n",
 927:        "  505,\n",
 928:        "  711,\n",
 929:        "  339,\n",
 930:        "  35,\n",
 931:        "  851,\n",
 932:        "  743],\n",
 933:        " 19: [50,\n",
 934:        "  349,\n",
 935:        "  156,\n",
 936:        "  853,\n",
 937:        "  251,\n",
 938:        "  620,\n",
 939:        "  160,\n",
 940:        "  822,\n",
 941:        "  275,\n",
 942:        "  4,\n",
 943:        "  792,\n",
 944:        "  767,\n",
 945:        "  472,\n",
 946:        "  577,\n",
 947:        "  907,\n",
 948:        "  580,\n",
 949:        "  723,\n",
 950:        "  611,\n",
 951:        "  147,\n",
 952:        "  992,\n",
 953:        "  172,\n",
 954:        "  998,\n",
 955:        "  348,\n",
 956:        "  521,\n",
 957:        "  575,\n",
 958:        "  21,\n",
 959:        "  651,\n",
 960:        "  854,\n",
 961:        "  591,\n",
 962:        "  176,\n",
 963:        "  837,\n",
 964:        "  918,\n",
 965:        "  635,\n",
 966:        "  571,\n",
 967:        "  976,\n",
 968:        "  56,\n",
 969:        "  826,\n",
 970:        "  174,\n",
 971:        "  311,\n",
 972:        "  271,\n",
 973:        "  496,\n",
 974:        "  913,\n",
 975:        "  855,\n",
 976:        "  557,\n",
 977:        "  139,\n",
 978:        "  209,\n",
 979:        "  552,\n",
 980:        "  369,\n",
 981:        "  638,\n",
 982:        "  218],\n",
 983:        " 20: [748,\n",
 984:        "  690,\n",
 985:        "  545,\n",
 986:        "  756,\n",
 987:        "  95,\n",
 988:        "  730,\n",
 989:        "  649,\n",
 990:        "  405,\n",
 991:        "  526,\n",
 992:        "  993,\n",
 993:        "  130,\n",
 994:        "  399,\n",
 995:        "  426,\n",
 996:        "  764,\n",
 997:        "  300,\n",
 998:        "  440,\n",
 999:        "  477,\n",
1000:        "  655,\n",
1001:        "  85,\n",
1002:        "  322,\n",
1003:        "  452,\n",
1004:        "  395,\n",
1005:        "  304,\n",
1006:        "  91,\n",
1007:        "  490,\n",
1008:        "  175,\n",
1009:        "  83,\n",
1010:        "  445,\n",
1011:        "  835,\n",
1012:        "  702,\n",
1013:        "  931,\n",
1014:        "  104,\n",
1015:        "  726,\n",
1016:        "  865,\n",
1017:        "  178,\n",
1018:        "  794,\n",
1019:        "  522,\n",
1020:        "  727,\n",
1021:        "  640,\n",
1022:        "  501,\n",
1023:        "  698,\n",
1024:        "  967,\n",
1025:        "  988,\n",
1026:        "  120,\n",
1027:        "  434,\n",
1028:        "  664,\n",
1029:        "  641,\n",
1030:        "  51,\n",
1031:        "  886,\n",
1032:        "  12,\n",
1033:        "  433,\n",
1034:        "  102,\n",
1035:        "  122,\n",
1036:        "  714,\n",
1037:        "  32,\n",
1038:        "  31,\n",
1039:        "  371,\n",
1040:        "  344,\n",
1041:        "  157,\n",
1042:        "  38,\n",
1043:        "  922,\n",
1044:        "  880,\n",
1045:        "  16,\n",
1046:        "  961,\n",
1047:        "  930,\n",
1048:        "  363,\n",
1049:        "  136,\n",
1050:        "  555,\n",
1051:        "  909,\n",
1052:        "  696,\n",
1053:        "  559,\n",
1054:        "  543,\n",
1055:        "  667,\n",
1056:        "  382,\n",
1057:        "  191],\n",
1058:        " 21: [567,\n",
1059:        "  817,\n",
1060:        "  383,\n",
1061:        "  116,\n",
1062:        "  68,\n",
1063:        "  888,\n",
1064:        "  944,\n",
1065:        "  33,\n",
1066:        "  401,\n",
1067:        "  430,\n",
1068:        "  881,\n",
1069:        "  499,\n",
1070:        "  260,\n",
1071:        "  754,\n",
1072:        "  372,\n",
1073:        "  919,\n",
1074:        "  185,\n",
1075:        "  821,\n",
1076:        "  905,\n",
1077:        "  123,\n",
1078:        "  732,\n",
1079:        "  90,\n",
1080:        "  273,\n",
1081:        "  705,\n",
1082:        "  871,\n",
1083:        "  141,\n",
1084:        "  551,\n",
1085:        "  836,\n",
1086:        "  671,\n",
1087:        "  27,\n",
1088:        "  93,\n",
1089:        "  563,\n",
1090:        "  936,\n",
1091:        "  639,\n",
1092:        "  488,\n",
1093:        "  487,\n",
1094:        "  328,\n",
1095:        "  774],\n",
1096:        " 22: [470,\n",
1097:        "  258,\n",
1098:        "  378,\n",
1099:        "  509,\n",
1100:        "  459,\n",
1101:        "  887,\n",
1102:        "  246,\n",
1103:        "  520,\n",
1104:        "  438,\n",
1105:        "  601,\n",
1106:        "  856,\n",
1107:        "  343,\n",
1108:        "  143,\n",
1109:        "  280,\n",
1110:        "  597,\n",
1111:        "  140,\n",
1112:        "  183,\n",
1113:        "  444,\n",
1114:        "  681],\n",
1115:        " 23: [894, 538, 253, 468, 194, 367, 173, 632, 479],\n",
1116:        " 24: [800, 46, 882, 799, 874],\n",
1117:        " 25: [169, 806],\n",
1118:        " 0: [297],\n",
1119:        " 26: [755]}"
1120:       ]
1121:      },
1122:      "execution_count": 64,
1123:      "metadata": {},
1124:      "output_type": "execute_result"
1125:     }
1126:    ],
1127:    "source": [
1128:     "sbm.block_members"
1129:    ]
1130:   },
1131:   {
1132:    "cell_type": "code",
1133:    "execution_count": 36,
1134:    "metadata": {},
1135:    "outputs": [
1136:     {
1137:      "ename": "KeyError",
1138:      "evalue": "2",
1139:      "output_type": "error",
1140:      "traceback": [
1141:       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
1142:       "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
1143:       "Cell \u001b[0;32mIn[36], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Perform some partition manipulations\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43msbm\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmerge_blocks\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m sbm\u001b[38;5;241m.\u001b[39mmove_node(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m3\u001b[39m)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Compute the new likelihood\u001b[39;00m\n",
1144:       "File \u001b[0;32m~/anon_sbm/src/sbm/sbm.py:159\u001b[0m, in \u001b[0;36mStochasticBlockModel.merge_blocks\u001b[0;34m(self, block_a, block_b)\u001b[0m\n\u001b[1;32m    157\u001b[0m new_block_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmin\u001b[39m(block_a, block_b)\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mblock_members[new_block_idx] \u001b[38;5;241m=\u001b[39m merged_nodes\n\u001b[0;32m--> 159\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mblock_members\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;28;43mmax\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mblock_a\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mblock_b\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;66;03m# Update blocks mapping\u001b[39;00m\n\u001b[1;32m    162\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m node \u001b[38;5;129;01min\u001b[39;00m merged_nodes:\n",
1145:       "\u001b[0;31mKeyError\u001b[0m: 2"
1146:      ]
1147:     }
1148:    ],
1149:    "source": [
1150:     "# Perform some partition manipulations\n",
1151:     "sbm.merge_blocks(1, 2)\n",
1152:     "sbm.move_node(10, 3)\n",
1153:     "\n",
1154:     "# Compute the new likelihood\n",
1155:     "new_likelihood = sbm.compute_likelihood()\n",
1156:     "print(f\"New Likelihood: {new_likelihood}\")\n",
1157:     "\n",
1158:     "# Check minimum block size\n",
1159:     "min_size = sbm.min_block_size()\n",
1160:     "print(f\"Minimum Block Size: {min_size}\")"
1161:    ]
1162:   },
1163:   {
1164:    "cell_type": "code",
1165:    "execution_count": null,
1166:    "metadata": {},
1167:    "outputs": [],
1168:    "source": []
1169:   }
1170:  ],
1171:  "metadata": {
1172:   "kernelspec": {
1173:    "display_name": "anon_sbm",
1174:    "language": "python",
1175:    "name": "python3"
1176:   },
1177:   "language_info": {
1178:    "codemirror_mode": {
1179:     "name": "ipython",
1180:     "version": 3
1181:    },
1182:    "file_extension": ".py",
1183:    "mimetype": "text/x-python",
1184:    "name": "python",
1185:    "nbconvert_exporter": "python",
1186:    "pygments_lexer": "ipython3",
1187:    "version": "3.13.0"
1188:   }
1189:  },
1190:  "nbformat": 4,
1191:  "nbformat_minor": 2
1192: }

================
File: notebooks/noisy_network_sampling_07-07-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "d44396b3",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Test that sampling noisy SBMFit and graph from noisy SBMFit works"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": 1,
 14:    "id": "80082d4e",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "from pathlib import Path\n",
 19:     "import numpy as np\n",
 20:     "import scipy.sparse as sp\n",
 21:     "from sbm.sampling import sample_sbm_graph_from_fit\n",
 22:     "\n",
 23:     "from sbm.io import SBMFit, SBMWriter\n",
 24:     "from sbm.noisy_fit import create_sbm_noise\n",
 25:     "\n",
 26:     "RNG = np.random.default_rng(0)"
 27:    ]
 28:   },
 29:   {
 30:    "cell_type": "markdown",
 31:    "id": "b7b0346b",
 32:    "metadata": {},
 33:    "source": [
 34:     "# Test for empirical fit"
 35:    ]
 36:   },
 37:   {
 38:    "cell_type": "code",
 39:    "execution_count": 18,
 40:    "id": "52d2519e",
 41:    "metadata": {},
 42:    "outputs": [
 43:     {
 44:      "name": "stdout",
 45:      "output_type": "stream",
 46:      "text": [
 47:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_enron_email_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_3\n"
 48:      ]
 49:     }
 50:    ],
 51:    "source": [
 52:     "sbm = SBMWriter.load(\n",
 53:     "    Path(\"/Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_enron_email_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_3\")\n",
 54:     ")"
 55:    ]
 56:   },
 57:   {
 58:    "cell_type": "code",
 59:    "execution_count": 19,
 60:    "id": "6142e5d8",
 61:    "metadata": {},
 62:    "outputs": [
 63:     {
 64:      "name": "stdout",
 65:      "output_type": "stream",
 66:      "text": [
 67:       "Block-conn array before noise:\n",
 68:       "[[0 4 3 ... 0 0 0]\n",
 69:       " [4 3 2 ... 0 0 0]\n",
 70:       " [3 2 1 ... 0 0 0]\n",
 71:       " ...\n",
 72:       " [0 0 0 ... 1 0 0]\n",
 73:       " [0 0 0 ... 0 2 0]\n",
 74:       " [0 0 0 ... 0 0 1]]\n",
 75:       "max σ_n: 0.017, max σ_e: 0.065\n",
 76:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
 77:       "Block-conn array after noise+post-processing:\n",
 78:       "[[0 4 3 ... 0 0 0]\n",
 79:       " [4 3 2 ... 0 0 0]\n",
 80:       " [3 2 1 ... 0 0 0]\n",
 81:       " ...\n",
 82:       " [0 0 0 ... 1 0 0]\n",
 83:       " [0 0 0 ... 0 2 0]\n",
 84:       " [0 0 0 ... 0 0 1]]\n",
 85:       "[NAIVE]    Added 0 edges to zero pairs.\n",
 86:       "Block-conn array after noise+post-processing:\n",
 87:       "[[0 3 3 ... 0 0 0]\n",
 88:       " [3 2 1 ... 0 0 0]\n",
 89:       " [3 1 0 ... 0 0 0]\n",
 90:       " ...\n",
 91:       " [0 0 0 ... 0 0 0]\n",
 92:       " [0 0 0 ... 0 1 0]\n",
 93:       " [0 0 0 ... 0 0 0]]\n"
 94:      ]
 95:     }
 96:    ],
 97:    "source": [
 98:     "EPS, DELTA, ALPHA = 1, 1e-4, 1-1e-4\n",
 99:     "\n",
100:     "print(f'Block-conn array before noise:\\n{sbm.block_conn.toarray()}')\n",
101:     "noise = create_sbm_noise(sbm, EPS, DELTA, ALPHA, noise_type=\"heterogeneous_gaussian\")\n",
102:     "\n",
103:     "lasso_noisy_fit = noise.sample_sbm_fit(RNG, post='lasso')\n",
104:     "print(f'Block-conn array after noise+post-processing:\\n{lasso_noisy_fit.block_conn.toarray()}')\n",
105:     "naive_noisy_fit = noise.sample_sbm_fit(RNG, post='naive')\n",
106:     "print(f'Block-conn array after noise+post-processing:\\n{naive_noisy_fit.block_conn.toarray()}')"
107:    ]
108:   },
109:   {
110:    "cell_type": "code",
111:    "execution_count": 4,
112:    "id": "0cac595b",
113:    "metadata": {},
114:    "outputs": [],
115:    "source": [
116:     "#graph_data = sample_sbm_graph_from_fit(noisy_fit, rng=RNG)\n",
117:     "#print(f'Sampled adjacency:\\n{graph_data.adjacency.toarray()}')"
118:    ]
119:   },
120:   {
121:    "cell_type": "code",
122:    "execution_count": 14,
123:    "id": "145a2f32",
124:    "metadata": {},
125:    "outputs": [],
126:    "source": [
127:     "value, counts = np.unique(sbm.block_conn.toarray().ravel(), return_counts=True)\n",
128:     "lasso_value, lasso_counts = np.unique(lasso_noisy_fit.block_conn.toarray().ravel(), return_counts=True)\n",
129:     "naive_value, naive_counts = np.unique(naive_noisy_fit.block_conn.toarray().ravel(), return_counts=True)"
130:    ]
131:   },
132:   {
133:    "cell_type": "code",
134:    "execution_count": 15,
135:    "id": "dcebf810",
136:    "metadata": {},
137:    "outputs": [
138:     {
139:      "data": {
140:       "image/png": "",
141:       "text/plain": [
142:        "<Figure size 1000x300 with 3 Axes>"
143:       ]
144:      },
145:      "metadata": {},
146:      "output_type": "display_data"
147:     }
148:    ],
149:    "source": [
150:     "import matplotlib.pyplot as plt\n",
151:     "\n",
152:     "fig, ax = plt.subplots(ncols=3, sharex=True, figsize=(10,3), sharey=True)\n",
153:     "ax[0].plot(value, counts, marker='.', linewidth=0, color='teal')\n",
154:     "ax[1].plot(naive_value, naive_counts, marker='.', linewidth=0, color='salmon')\n",
155:     "ax[2].plot(lasso_value, lasso_counts, marker='.', linewidth=0, color='black')\n",
156:     "\n",
157:     "ax[0].set_title('Original block-conn values')\n",
158:     "ax[1].set_title('Naive')\n",
159:     "ax[2].set_title('Lasso')\n",
160:     "\n",
161:     "for axis in ax:\n",
162:     "    axis.set_xlabel('Block-conn value')\n",
163:     "    axis.set_ylabel('Count')\n",
164:     "    #axis.set_yscale('log')\n",
165:     "    # remove the right and top spines\n",
166:     "    axis.spines[['right', 'top']].set_visible(False)\n",
167:     "\n",
168:     "plt.show(fig)"
169:    ]
170:   },
171:   {
172:    "cell_type": "code",
173:    "execution_count": 16,
174:    "id": "df15335a",
175:    "metadata": {},
176:    "outputs": [
177:     {
178:      "data": {
179:       "image/png": "",
180:       "text/plain": [
181:        "<Figure size 1000x300 with 3 Axes>"
182:       ]
183:      },
184:      "metadata": {},
185:      "output_type": "display_data"
186:     }
187:    ],
188:    "source": [
189:     "import matplotlib.pyplot as plt\n",
190:     "\n",
191:     "fig, ax = plt.subplots(ncols=3, sharex=True, figsize=(10,3), sharey=True)\n",
192:     "ax[0].plot(value, counts, marker='.', linewidth=0, color='teal')\n",
193:     "ax[1].plot(naive_value, naive_counts, marker='.', linewidth=0, color='salmon')\n",
194:     "ax[2].plot(lasso_value, lasso_counts, marker='.', linewidth=0, color='black')\n",
195:     "\n",
196:     "ax[0].set_title('Original block-conn values')\n",
197:     "ax[1].set_title('Naive')\n",
198:     "ax[2].set_title('Lasso')\n",
199:     "\n",
200:     "for axis in ax:\n",
201:     "    axis.set_xlabel('Block-conn value')\n",
202:     "    axis.set_ylabel('Count')\n",
203:     "    axis.set_yscale('log')\n",
204:     "    # remove the right and top spines\n",
205:     "    axis.spines[['right', 'top']].set_visible(False)\n",
206:     "\n",
207:     "plt.show(fig)"
208:    ]
209:   },
210:   {
211:    "cell_type": "code",
212:    "execution_count": 17,
213:    "id": "091a93af",
214:    "metadata": {},
215:    "outputs": [
216:     {
217:      "data": {
218:       "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGgCAYAAAAKKQXsAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjMsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvZiW1igAAAAlwSFlzAAAPYQAAD2EBqD+naQAANtRJREFUeJzt3Ql0FGXa//2LrIQlYU8AEwQBWVRQ1oCCC8ogKjwyKsrjAzOMjIoMgQElMyrgFmRQQARURNBRRPB1V3DJAI4adlEERFAQEBJwxoQ1C0n9z3Ufut/ukA4JpKu7q7+fc25TXUunUonUr++tqlmWZQkAAIBNIuz6RgAAAIrwAQAAbEX4AAAAtiJ8AAAAWxE+AACArQgfAADAVoQPAABgK8IHAACwFeEDAADYivABAACCN3wUFxfLQw89JM2bN5e4uDi54IIL5NFHHxXPGdp1+eGHH5bGjRubffr06SM7duzwx7kDAACnh48nn3xS5s6dK88++6xs27bNvJ46darMmjXLvY++fuaZZ+S5556TNWvWSM2aNaVv376Sn59foe+h4eXw4cNegQYAADhHtco8WO6GG26QxMREmT9/vnvdoEGDTA3Hq6++agJDkyZN5K9//auMGzfObM/LyzPHLFy4UAYPHnzG76HBIyEhwRwXHx8v5+pYYaHUysgwy0fT06VmTMw5vycAALCp5qNHjx6SmZkpP/zwg3n9zTffyBdffCH9+vUzr3ft2iXZ2dmmqcVFg0S3bt0kKyurzPcsKCgwgcOzAAAA54qqzM4TJkww4aBNmzYSGRlp+oA8/vjjMmTIELNdg4fSmg5P+tq1rbSMjAyZPHny2f8EAADAuTUfS5Yskddee00WLVokGzdulJdfflmmTZtmvp6t9PR008TiKnv37j3r9wIAAA6r+Rg/fryp/XD13bj44ovl559/NrUXQ4cOlaSkJLM+JyfHjHZx0dcdO3Ys8z1jY2NN8ZeoiAgZ2qGDexkAAARWpe7Gx48fl4hSN3BtfikpKTHLOgRXA4j2C3HRZhod9ZKamiqBEBsVJQsHDjRFlwEAQGBV6m584403mj4eKSkp0r59e/n666/l6aeflj/+8Y9me7Vq1SQtLU0ee+wxadWqlQkjOi+IjoAZOHCgv34GAIAPOgrx5MmTpo8ecK6io6NNpYOtQ22PHDliwsTbb78tBw8eNKHi9ttvN5OKxZwawqpvN3HiRHnhhRckNzdXLr/8cpkzZ460bt26Qt+jqofa6vkcLyoyyzWio01AAoBwUFhYKAcOHDC11kBV0HvoeeedJ7Vq1bIvfNiBeT4A4Nxpc7jOLq2fUhs2bGg+IPLhC+dC48KhQ4dMmNXWjXOpAaETBAA4tNZDA0hycrLUqFEj0KcDh2jYsKHs3r1bioqKzil8MPwDABys9CAB4FxUVe0Zf5UAAMBWhA8AAGCrsAofOtzsxIkT5isAAC76wNTrrrtOwtngwYPlqaeesuV7hVX40KnbddjZnj17eIAdAMDIz88300joNBHBYOXKlXLZZZeZ2b9btmxpngp/Jt9++61cccUVUr16ddPJeOrUqV7bt2zZYp5Cf/7555t+GzNmzDjtPR588EEzl5eONvU3x4ePyIgIGdSmjfRLSTHLLr/++is1IABQAU6vNX7zzTfN1A49e/YM9KmIPh2+f//+ctVVV8mmTZvMxJ1/+tOf5OOPP/Z5jH6Y1lqbZs2ayYYNG+Qf//iHTJo0ycy35aLDY1u0aCFTpkxxPwqltIsuukguuOACefXVV8XfHB8+qkdFyT9vukme7d1bYksNC9KhQgAAKffGprXFdtUa6wfD2267TerWrWs+oXuWitQA6OSWerPWIaEaKK6++mr55ptvyj1m8eLFZgZvT+vWrZNrr71WGjRoYOae6t27t3mgqssdd9xhzrP0PUX3f+WVV9wTc+pT32vWrGmedzZ9+nS58sorTaDw5bnnnjOzg2vzR9u2beW+++6T3//+9+ZYX/SBrzq0+qWXXjKzj2vzyV/+8hczA7lLly5dTCjRbeU9T02vg14Pf3N8+HBNB1uZ9QDgVDr3R0FBQYWKflrWMOBJX+v6ir6HFtfzvypi9OjRkpWVJW+88YZs3brVBAk1a9Ys6dWr1xmPv+WWW8wM3MuWLTO1ANp8cc0118h///tfn8d88cUX0rlzZ691Ghz0gam6bfXq1WZSreuvv96sVxoq3n//fTl69Kj7GK2d0GvzP//zP+b12LFj5csvv5T33ntPPv30U/n3v//tFWDKoj97nz59vNb17dvXrPdFt+m1cc007jpm+/bt8ttvv0lldO3aVdauXWt+b/4UFpOMRUVFmTTq+T+Rvtb1ABBO9NP5L7/8ck7vkZ2dXan9mzZtWqGnl2tfg9dff90UV+fPuXPnmiCh563NBuXRoKA3Tg0fru83bdo0eeedd0zTyogRI8qsKdHvq48L8aQ1Jp60CaNOnTqyatUqueGGG8zNXWs09HEjd955p9ln0aJFctNNN0nt2rVNSHn55ZfNOg0/asGCBad9n7KubWJiotc6fa01Ttr0FRcXV+YxWltS+hjXNq1Fqig9P61F0eO0GcdfHH/39ZxefcewYeb5Lo0aNSJ4AAhLWuOrYaAi9GF0ZQUN7TNQmdktK1rL/NNPP5kpvHv06OFep/9W66dx7VB5Jtq8ojUR9evX91qvN+0ff/yxzGN0m9KOmp5ycnJMB0zt/KlhRq+F1mpo05PrvG699VbT5KHh49ixY/Luu++6myz0Z9HApOfuos03F154oQQzV7jx9/OAosJtpj8tBA8A4Ur/DaxILYRLWbXG/pqu3RVSSj+BV19XJOxo8NC+FRoYStNai7JoUNH+JKWbJ7TJ5T//+Y/MnDnT1ADoNUtNTTW1Ai7a9KJ9QTScaLOK3rh/97vfyblISkoywceTvtb+K2XVepR3jGtbZbiap7TPjD+FRZ8Pt2rVTKoGAFSM3vRSUlLMTV2/VsUDP33RkRZaA6H9JFz0Zr9+/XrT+fJMtH+H1tToB0wdoupZNDSVRftJtGvXzvQv8aTnoJ02tZ+HduLU8FG6/4vW0OiwVu2fojUg2t/EFaC0iUiXteOqizbv/PDDD+X+DBpwMjMzvdZpsNH15R3z+eefew2i0GO0lqUyTS7qu+++M0+t9XW9qkpYhQ9Nt4QPAKgcvZnrp25/1xrr99DRHffff78sX77cBALtp6HzcAwfPvyMx2tHTb0RDxw4UD755BPzALSvvvpK/v73v5sA44v239D+Ip60g+k///lP2bZtm6xZs8bUcpRV86CjXnSEit7sdR8X7fehtSfjx4+XFStWmHk29GfQmqdq5Twf5e677zZNNnoNvv/+e5kzZ44sWbJExowZ497n2WefdfcjcZ2Dhih9f/0+Goa0xkY7vHqGOB26q0WXtd+PLu/cudPr+2unWFsmW7OCTF5enqYD87UqHC0osGTSJFN2/fKLtW/fvip5XwAIZidOnLC2bt1qvoaSgoICKy0tzWrYsKEVGxtr9ezZ01q3bl2Fjz98+LA1atQoq0mTJlZ0dLSVnJxsDRkyxNqzZ4/PY7Zs2WLFxcVZubm57nUbN260OnfubFWvXt1q1aqVtXTpUqtZs2bW9OnTvY7Va6z3LN1WUlJy2rnccccdVo0aNaykpCTr6aeftrp27WpNmDCh3J9hxYoVVseOHa2YmBirRYsW1oIFC7y2T5w40Xw/T9988411+eWXm2vWtGlTa8qUKV7bd+3aZc6zdOndu7d7H/1bSUhIsLKysvz+d1VN/yNBRHv0aqccrZ6qiuo9zw6nu0eMkMjiYlOlBABOprUFOmGVjoIo3ZkSp9MmE222SU9P99v30E6p2tn3qaeeqlBNjt10ZJGO3tFaI3//XYVVs4sKsqwFAAgCOgFXrVq1qvQ9v/76azNsWEfa6PwermaZAQMGSDDSPio6n4odHD/sQ6dUv75VK7McFREhxYQPAAhJ2qnzz3/+c5nbdESK9nc4W/rMk1GjRklV03lGdLIv7ZPRqVMn06eigZ87c54t14RudogKh+nVP7zjDvcQoiP5+YE+JQDAWdAJvLp16xYyM1ZfeumlZpZVhGH48MRoFwAIXTqCRAtCX1j1+SB8AAAQeI6v+dDRLo2mTTPLO8qY1x8AANjL8eFDHT8165ur5kNLeZO8AAAA/wm7ZhcAABBYYRk+6PcBAEDghFf4OPWV8AEAQOCEV/ig5gMAECJmz55tJj/Tacx1fpO1a9ee8ZilS5dKmzZtzDEXX3yxfPTRR17b9f738MMPm6cU64Py9GF8O3bsELsRPgAA8MHzMfV2euONN8xTaSdOnGimZu/QoYN5+u7Bgwd9HqNP8L399tvNc2N0and9uq+W7777zr3P1KlT5ZlnnjFP4tWn9dasWdO8rz6zxU6ODx8R1apJ72bNTNGp1hXhA0A40ykIfJX8kycrvO+JUjfmsvaprF9//VVuu+02qVu3rvnA6FkWLlxY7rG6vfQxWiZNmuTe58UXX5S2bduamgGtIdBH1rvs3r3b7K83/t69e5t9dEr3kpISeeSRR8xDSWNjY6Vjx46yfPly8aenn35a7rrrLvnDH/4g7dq1M2GhRo0a8tJLL/k8ZubMmfK73/1Oxo8fb37GRx991Dws79lnn3Xf+2bMmCEPPvigeb7MJZdcIq+88ors379f3nnnHbGT44faxkVHy8phw8xyQUGB/Eb4ABDmXE/6Los+C8v1SAql8yS5pisoTT/Uuf59VefPnCm/Hj/utY81cWKlzm306NGSlZVlAkBycrK5CWtg0Aee9erVq9xjNbTozddl5cqVcuedd0rPnj3Naw0S2uSgN2Od+lxrB/QGr5/+hw4d6j5uwoQJ5smzuo8GEL2p6+vnn3/erNMAoFO967NkWp16dlhpTzzxhCnl2bp1q6SkpJy2vrCw0EzL7vmE3YiICNNEotfGF92mtSWetFbDFSz0abTZ2dnmfVz0KfLapKPHDh48WOzi+PDhiWYXAAheeXl55imwWq677jr3Y96XLVtmmj9atGhR7vHah0GL0ifJjhw50gSAa6+91qzTJgwNETfffLN5rY+F1wCgocIzfKSlpbn3cT0c7oEHHnDfnJ988klZsWKFqUXQfhllufvuu+XWW28t93ybNGnis/anuLhYEhMTvdbr6++//97n+2mwKOsYXe/a7lrnax+7hFX4cCF8AAhnRz0+UZfmap52OThuXLnN2p52jx59Tuf1008/mX+fe/To4V4XFRUlXbt2lW+//bZSIeaGG26Q/v37myYIdezYMRNItD+E1na4nDx50nz699S5c2f38uHDh02zhKv2xEVff/PNNz7PoV69eqYgTMOHtjlqVaDace+95ivhA0A4qxkTE/B9y3syrX7q96SvIyMjK/Qeuq82v8THx8sLL7zgXn/06FHzdd68eac9Gbf0e2szzLk6l2aXBg0amHPKycnxWq+vk5KSfL6fbivvGNdXXaejXTz30X4sQdvhVIf8lNWZR6u2lPaW1eX69etLrVq1ZNCgQaddiEDQNkgtNLsAQPC64IILTB+LL7/80qv/w/r1600HyooYM2aMbN682fRz0PfybFrQZg6tXWnZsqVX0eYXXzTE6HGe56T0tXYE9UWbXTZt2lRuaeKj2SUmJkY6deokmZmZ7nXa6VVfp6am+vyeus3zGPXpp5+6j9GfUwOI5z5as6OjXsp7X7+wKuHgwYPWgQMH3OXTTz/Vu7i1YsUKs/3uu++2kpOTrczMTGv9+vVW9+7drR49elTmW1h5eXnmPfVrVThaUGDJpEmm5B0/bv3444/WkSNHquS9ASBYnThxwtq6dav5GkrGjRtnNWnSxFq2bJm1ZcsWa+jQoVa9evWs33777YzHvvTSS1ZkZKT13nvved2rXP/mz5s3z4qLi7Nmzpxpbd++3fr222/NMU899ZTZvmvXLnP/+frrr73ed/r06VZ8fLy1ePFi6/vvv7ceeOABKzo62vrhhx/8dBUs871iY2OthQsXmt/jiBEjrDp16ljZ2dnufe68805rwoQJ7tdffvmlFRUVZU2bNs3atm2bNXHiRHOemzdvdu8zZcoU8z7vvvuu+fkHDBhgNW/evMJ/J1X1d1Wp8FHa6NGjrQsuuMAqKSmxcnNzzQ+5dOlS93b94fUXmZWVFRTh4/CJE4QPAGEhVMNHQUGBlZaWZjVs2NDcfHv27GmtW7euQsdqUNH7R+miN2GX1157zerYsaMVExNj1a1b1+rVq5f11ltvlRs+iouLrUmTJllNmzY197kOHTqYcORvs2bNslJSUsy5du3a1Vq9erXX9t69e5uf2dOSJUus1q1bm2Pat29vffjhh17b9X790EMPWYmJieb6XnPNNSaI2f13VU3/czY1JloVplVGOqznb3/7m/zrX/+Sa665Rn777TepU6eOe79mzZqZnsNaFVYWHf6qxbMKSIdXaYchre6qij4frmFlRyZMkIO//CINGzaU2rVrn/N7A0Cw0mZwHVqpVe2ezQ9AMPxdnfUkY9qelpubK8NOjfHWYTraTuUZPCoyhCcjI8P0NHYVDR7+Qp8PAAAC76zDx/z586Vfv34+O8xUlE6iorUcrrJ3717xJw0ghA8ACD06SZgOZiirtG/fPtCnB38Ptf3555/ls88+k7feesu9TnvQalOM1oZ41n6caWiQTlWrxV90HHrnUwFJlwkfABCadFbR0sNkSw/ThYPDx4IFC6RRo0ZmAhcXHRakv3wdwqNDbNX27dtlz5499g/hKTW9+jqPCWUIHwAQmrSvHv31wjR86FhjDR86Fa3OPOei/TV05jjtgKqzumln0VGjRpng0b17dwkWhA8A4YR/7xCMf0+VDh/a3KK1GX/84x9P2zZ9+nTz8But+dARLPpAG88nBgYDwgeAcOBqhjh+/Lj7eSfAudLuFaqiM876ctZDbf1Fh9pqLUpVDbXVpzG2O/Xgn60jR8p/c3LM8CCdvhYAnOzAgQOmH542k+vj2F0j/oCzoS0f+pwbDbY6Lfy5/D05/tkumq1+zstzL1PzASBcuDr7Hzx4MNCnAoeIiIg45+ARFuGjLIQPAOFAbxD6ADGt+dBH0gPnSufz0gByrsIufFDzASDcaPv8ubbRA1Xp3ONLiCF8AAAQWIQPAABgK8IHAACwVVQ4hI12DRu6lwkfAAAEluPDR43oaNly773u18cY5w4AQEDR7AIAAGxF+AAAALZyfLOLTq/eZd48s6xPtyV8AAAQWI4PHxo0th465F4mfAAAEFg0uwAAAFsRPgAAgK0IHwAAwFZhGT4UAQQAgMAgfAAAAFtFhUPYaJaQ4F52RQ7CBwAAgREW06vvTktzvz5WWGi+Ej4AAAgMml0AAICtCB8AAMBWjm92OVFUJL0WLjTLnw8b5g4fAAAgMBwfPkosS9bv3+9ejqLmAwCAgKLZBQAA2IrwAQAAbEX4AAAAtiJ8AAAAWxE+AACArRw/2kU1qFHDvUz4AAAgsBwfPmrGxMih8ePdr12hg/ABAEBghGWzi3nAHOEDAICACLvw4UL4AAAgMMJievV+r71mlpcNGSJx0dHUfAAAEEo1H7/88ov87//+r9SvX1/i4uLk4osvlvXr17u360394YcflsaNG5vtffr0kR07dkig6JTqq37+2RRdVoQPAABCJHz89ttv0rNnT4mOjpZly5bJ1q1b5amnnpK6deu695k6dao888wz8txzz8maNWukZs2a0rdvX8nPz5dgQfgAACBEml2efPJJSU5OlgULFrjXNW/e3L2sN/QZM2bIgw8+KAMGDDDrXnnlFUlMTJR33nlHBg8eLMGA8AEAQIjUfLz33nvSuXNnueWWW6RRo0Zy6aWXyrx589zbd+3aJdnZ2aapxSUhIUG6desmWVlZZb5nQUGBHD582Kv4m2uuDwAAEOTh46effpK5c+dKq1at5OOPP5Z77rlH/vKXv8jLL79stmvwUFrT4Ulfu7aVlpGRYQKKq2jNir9R8wEAQIiEj5KSErnsssvkiSeeMLUeI0aMkLvuusv07zhb6enpkpeX5y579+4VfyN8AAAQIuFDR7C0a9fOa13btm1lz549ZjkpKcl8zcnJ8dpHX7u2lRYbGyvx8fFeparViI42xYXwAQBAiIQPHemyfft2r3U//PCDNGvWzN35VENGZmame7v24dBRL6mpqRKo6dWP/e1vpuiyInwAABAio13GjBkjPXr0MM0ut956q6xdu1ZeeOEFU1w39bS0NHnsscdMvxANIw899JA0adJEBg4cKMFCz1ObkAAAQJCHjy5dusjbb79t+mk88sgjJlzo0NohQ4a497n//vvl2LFjpj9Ibm6uXH755bJ8+XKpXr26BAtqPgAACJxqVpDdhbWZRke9aOfTquj/kX/ypAxassQs/3+33irVo6Lk0KFDUlhYKE2bNq2CMwYAAJXh+Ge7FJeUyEenpnfXZUXNBwAAgcNTbQEAgK3CMnxQ8wEAQOAQPgAAgK0IHwAAwFaEDwAAYKuwDR8AACAwHD/UVqdUtyZOLLPmQwtBBAAAe1HzAQAAbBXW4YN+HwAA2M/x4UOnV79l6VJTdFkRPgAACBzHhw+dUv3NrVtN8ZxeXRE+AACwn+PDR1kIHwAABA7hAwAA2IrwAQAAbEX4AAAAtgrL8OFC+AAAwH5hGT6o+QAAIHAcP716jehoOZqe7l5WhA8AAALH8eFDg4Y+36X0OkX4AADAfmHd7AIAAOzn+JqPgpMn5c8ffGCWn7/hBomNiqLmAwCAAHJ8zcfJkhJ5+ZtvTNFlRfgAACBwHB8+fNEAQvgAAMB+hA8AAGArwgcAALAV4QMAANiK8AEAAGxF+AAAALZy/DwfOqX6wXHj3MsuhA8AAALD8eFDQ0bDmjXL3Eb4AADAfjS7AACA4A0fkyZNMjdtz9KmTRv39vz8fBk5cqTUr19fatWqJYMGDZKcnBwJ9PTqIz/80BRddiF8AAAQIjUf7du3lwMHDrjLF1984d42ZswYef/992Xp0qWyatUq2b9/v9x8880SSDql+pz1601xTa+uCB8AAIRIn4+oqChJSko6bX1eXp7Mnz9fFi1aJFdffbVZt2DBAmnbtq2sXr1aunfvLsGE8AEAQIjUfOzYsUOaNGkiLVq0kCFDhsiePXvM+g0bNkhRUZH06dPHva82yaSkpEhWVpYEG8IHAAAhUPPRrVs3WbhwoVx44YWmyWXy5MlyxRVXyHfffSfZ2dkSExMjderU8TomMTHRbPOloKDAFJfDhw+LHQgfAACEQPjo16+fe/mSSy4xYaRZs2ayZMkSiYuLO6sTyMjIMCHGboQPAABCcKit1nK0bt1adu7cafqBFBYWSm5urtc+OtqlrD4iLunp6aa/iKvs3btX7ED4AAAgBMPH0aNH5ccff5TGjRtLp06dJDo6WjIzM93bt2/fbvqEpKam+nyP2NhYiY+P9yp2IHwAABACzS7jxo2TG2+80TS16DDaiRMnSmRkpNx+++2SkJAgw4cPl7Fjx0q9evVMiBg1apQJHoEc6RIXHS27Ro92L7sQPgAACIHwsW/fPhM0/vOf/0jDhg3l8ssvN8NodVlNnz5dIiIizORi2om0b9++MmfOHAmkiGrV5PxSnWAV4QMAgMCoZgXZHVhHu2gtivb/8GcTjL7/f//7X2nevLnfvgcAAAjDZ7sUFhfL+E8+MUWXXaj5AAAgMBwfPoqKi2VaVpYpulwaAQQAAHs5Pnz4ojUfivABAIC9CB+EDwAAbEX4IHwAAGArwgfhAwAAWxE+CB8AANgq7MMHAAAI4hlOQ5FOqf7dPfe4l12o+QAAIDAcHz50evX2jRqdtp7wAQBAYIR9swvhAwAAezm+5kOnVH/i3/82y3+74gqJiYw0y4QPAAACw/HhQ6dUn7xqlVke36MH4QMAgACj2YXwAQCArQgfhA8AAGwVtuHDhfABAIC9wrrmQwvhAwAAe4Vt+HAhfAAAYK+wDh/UfAAAYD/HD7WtHhUla//0J/eyJ8IHAAD2c3z4iIyIkC5Nm5a5jfABAID9aHYhfAAAYKuwmF595urVZnl09+7uGU495/oAAAD2CYvp1e//7DOzfG+XLqeFD2o+AACwF80uhA8AAGxF+CB8AABgK8IH4QMAAFsRPggfAADYivBB+AAAwFaED8IHAAC2cvxQW51SfcXQoe5lT4QPAADsFxbTq195/vk+txM+AACwF80uhA8AAEInfEyZMsXcwNPS0tzr8vPzZeTIkVK/fn2pVauWDBo0SHJyciSQM5zOXrvWFF32RPgAACCEwse6devk+eefl0suucRr/ZgxY+T999+XpUuXyqpVq2T//v1y8803SyCf7XLfsmWm6LInwgcAACESPo4ePSpDhgyRefPmSd26dd3r8/LyZP78+fL000/L1VdfLZ06dZIFCxbIV199JatPPdwtmBA+AAAIkfChzSr9+/eXPn36eK3fsGGDFBUVea1v06aNpKSkSFZWVpnvVVBQIIcPH/YqduGptgAAhMBol8WLF8vGjRtNs0tp2dnZEhMTI3Xq1PFan5iYaLaVJSMjQyZPniyBrPnQQhABACAIaz727t0ro0ePltdee02qV69eJSeQnp5ummtcRb+HXQgcAAAEefjQZpWDBw/KZZddJlFRUaZop9JnnnnGLGsNR2FhoeTm5nodp6NdkpKSynzP2NhYiY+P9yp2hw/6fQAAEKTNLtdcc41s3rzZa90f/vAH06/jgQcekOTkZImOjpbMzEwzxFZt375d9uzZI6mpqRJsCB8AAAR5+Khdu7ZcdNFFXutq1qxp5vRwrR8+fLiMHTtW6tWrZ2oxRo0aZYJH9+7dJRBio6Lkg9tvdy97InwAAOCA6dWnT58uERERpuZDR7L07dtX5syZI4ESFREh/Vu3LnMb4QMAAPtVs4LszqtDbRMSEkznU3/3/9DZWHUStPPOO8+M0gEAAP7n+AfL6ZTqr53qpzLk4oslOjLSvY2aDwAA7Of48KFTqv/h3XfN8i3t2hE+AAAIsLB+qq0L4QMAAPuEdfig5gMAAPsRPggfAADYivBB+AAAwFaEDwAAYCvCBzUfAADYyvFDbXVK9SW//7172RPhAwAA+zk+fOj06re0b+9zuwYQwgcAAPYJ62YXRfgAAMBejq/5OFlSIm9v22aW/6dtW1MT4onwAQCAvRxf81Fw8qTc+uabpuhyaYQPAADs5fjwcSaEDwAA7EX4IHwAAGArwgfhAwAAW4V9+FCEDwAA7BP24YOaDwAA7EX4IHwAAGArx8/zERMZKQsGDHAvl0b4AADAXo4PH9GRkTKsY0ef2wkfAADYi2YXwgcAALYKi+nVP9650yz3bdmS6dUBAAgwx9d86JTqN7z+uilMrw4AQOA5PnycCeEDAAB7ET4IHwAA2IrwQfgAAMBWhA/CBwAAtiJ8ED4AALAV4YPwAQCArRw/z4dOqf5sv37uZV80gGgQAQAA/hUW06uP7NrV53ZX4CB8AABgD5pdPMIHAAAIsvAxd+5cueSSSyQ+Pt6U1NRUWbZsmXt7fn6+jBw5UurXry+1atWSQYMGSU5OjgRScUmJrNy92xRdLo3wAQBAEIeP8847T6ZMmSIbNmyQ9evXy9VXXy0DBgyQLVu2mO1jxoyR999/X5YuXSqrVq2S/fv3y8033yyBlH/ypFz18sum6HJpNLUAABDEfT5uvPFGr9ePP/64qQ1ZvXq1CSbz58+XRYsWmVCiFixYIG3btjXbu3fvLsGImg8AAEKkz0dxcbEsXrxYjh07ZppftDakqKhI+vTp496nTZs2kpKSIllZWT7fp6CgQA4fPuxV7ET4AAAgyMPH5s2bTX+O2NhYufvuu+Xtt9+Wdu3aSXZ2tsTExEidOnW89k9MTDTbfMnIyJCEhAR3SU5OFjsRPgAACPLwceGFF8qmTZtkzZo1cs8998jQoUNl69atZ30C6enpkpeX5y579+4VOxE+AAAI8nk+tHajZcuWZrlTp06ybt06mTlzptx2221SWFgoubm5XrUfOtolKSnJ5/tpDYqWQCF8AAAQYvN8lJSUmH4bGkSio6MlMzPTvW379u2yZ88e0yckWBE+AAAI4poPbSLp16+f6UR65MgRM7Jl5cqV8vHHH5v+GsOHD5exY8dKvXr1zDwgo0aNMsEjkCNddIbTqac6wepyaYQPAACCOHwcPHhQ/u///k8OHDhgwoZOOKbB49prrzXbp0+fLhEREWZyMa0N6du3r8yZM0cCSZ/nMr5nT5/bCR8AANirmhVkd10daqvBRjufau2Jv+mPv2vXLmnYsKHUrl3b798PAIBw5/gHy+mU6hsPHDDLlzVuLJERZXdzCbIMBgCAYzn+wXI6pXrXF180xdf06loIHwAA2MPx4aOiCB8AANiD8HGq9oPwAQCAPQgfhA8AAGxF+CB8AABgK8IH4QMAAFsRPjwmGgMAAP7n+Hk+dEr1ib17u5fLQs0HAAD2cXz40OnVJ115Zbn7ED4AALAPzS6EDwAAbOX4mo8Sy5Jthw6Z5bYNG0pEGf07CB8AANjH8TUfJ4qK5KK5c03R5bIQPgAAsI/jw0dFED4AALAP4YPwAQCArQgfhA8AAGxF+DiF8AEAgD0IH9R8AABgK8IH4QMAAFs5fp4PnVJ9XGqqe7kshA8AAOwTFtOr/+O668rdh/ABAIB9aHbhqbYAANgqLKZX35OXZ5ZTEhLKnV5dC0EEAAD/cnzNh06p3nzmTFPKm14dAADYw/HhoyJc4YN+HwAA+B/hg/ABAICtCB+EDwAAbEX4IHwAAGArwgfhAwAAWxE+CB8AANjK8fN8REVEyL2dO7uXy0L4AADAPo4PH7FRUTK7f/8K7Uv4AADA/2h2oeYDAIDgDR8ZGRnSpUsXqV27tjRq1EgGDhwo27dv99onPz9fRo4cKfXr15datWrJoEGDJCcnRwJFA8WhY8dM8RUuCB8AAARp+Fi1apUJFqtXr5ZPP/1UioqK5LrrrpNjx4659xkzZoy8//77snTpUrP//v375eabb5ZAOV5UJI2mTTNFl8tC+AAAIEj7fCxfvtzr9cKFC00NyIYNG6RXr16Sl5cn8+fPl0WLFsnVV19t9lmwYIG0bdvWBJbu3btLMOLZLgAAhEifDw0bql69euarhhCtDenTp497nzZt2khKSopkZWWV+R4FBQVy+PBhr2I3aj4AAAiB8FFSUiJpaWnSs2dPueiii8y67OxsiYmJkTp16njtm5iYaLb56keSkJDgLsnJyWI3wgcAACEQPrTvx3fffSeLFy8+pxNIT083NSiusnfvXgkEDSCEDwAAgnSej/vuu08++OAD+fzzz+W8885zr09KSpLCwkLJzc31qv3Q0S66rSyxsbGmBBrhAwCAIKz50JuzBo+3335b/vWvf0nz5s29tnfq1Emio6MlMzPTvU6H4u7Zs0dSU1MlmBE+AAAIwpoPbWrRkSzvvvuumevD1Y9D+2rExcWZr8OHD5exY8eaTqjx8fEyatQoEzwCNdJFp1Qf2qGDe9kXwgcAAPaoZlXijutrSKoOpx02bJh7krG//vWv8vrrr5uRLH379pU5c+b4bHYpTUe7aIjR/h8aXuyifU1q1KhhJkcDAABBEj7sEKjwsW/fPqlevbo0aNDAtu8JAEA4cvyD5TRbuWY2rREd7bP2hmYXAADs4fgHy2nwqJWRYYqv6dVdCB8AAPif48NHRVHzAQCAPQgfpxA+AACwB+HjFMIHAAD2IHycwpNtAQCwB+HjFGo+AACwB+HjFMIHAAD2cPw8H5EREfL7du3cy74QPgAAsIfjw0f1qChZesstZ9yP8AEAgD1odjmF8AEAgD0IH6cQPgAAsIfjm12OFRaaqdXV0fR0qRkTU+Z+hA8AAOxBzccphA8AAOxB+DiF8AEAgD0IH6UQQAAA8C/CR6np1QkfAAD4F+HjFMIHAAD2IHycQvgAAMAejh9qq1OqX9+qlXvZF55qCwCAPcJievUP77jjjPtR8wEAgD1odjmF8AEAgD0IH6cQPgAAsEdYTK/eaNo0s3xw3Lhyp1dXhA8AAPzL8eFDHS8qOuM+hA8AAOxBs8sphA8AAOxB+DiF8AEAgD0IH6cQPgAAsAfh4xTCBwAA9iB8lEL4AADAvxw/2iWiWjXp3ayZe9kXaj4AALCH48NHXHS0rBw2rEL7agAhfAAAEGTNLp9//rnceOON0qRJE3Ozfuedd7y268374YcflsaNG0tcXJz06dNHduzYIaGA8AEAQBCGj2PHjkmHDh1k9uzZZW6fOnWqPPPMM/Lcc8/JmjVrpGbNmtK3b1/Jz8+XYEf4AAAgCJtd+vXrZ0pZ9MY9Y8YMefDBB2XAgAFm3SuvvCKJiYmmhmTw4MESiOnVz5850yzvHj3a5/Tqnv0+AABAiIx22bVrl2RnZ5umFpeEhATp1q2bZGVlSaD8evy4KWdCzQcAACHW4VSDh9KaDk/62rWttIKCAlNcDh8+LIFC+AAAIAzm+cjIyDC1I66SnJwcsHMhfAAAEGLhIykpyXzNycnxWq+vXdtKS09Pl7y8PHfZu3evBArhAwCAEAsfzZs3NyEjMzPTqxlFR72kpqaWeUxsbKzEx8d7lUAhfAAAEIR9Po4ePSo7d+706mS6adMmqVevnqSkpEhaWpo89thj0qpVKxNGHnroITMnyMCBAyXYET4AAAjC8LF+/Xq56qqr3K/Hjh1rvg4dOlQWLlwo999/v5kLZMSIEZKbmyuXX365LF++XKpXry6BoFOqd27SxL18pvBRUlJi05kBABCeqllB9lFfm2m046n2/7C7CebgwYNy8uRJU1MDAAAcOtolmNDsAgCA/xE+PBA+AADwP8eHj+NFRXL+jBmm6PKZED4AAAihGU6DkYaJn/Py3MvloeYDAAD/c3zNR2UQPgAA8D/ChwfCBwAA/kf48ED4AADA/wgfpcIHAADwL8JHGTUf1H4AAOA/UeEQKNo1bOhePtO+AADAvxwfPmpER8uWe++t0L6u8KE1HwQRAAD8g2YXH+EDAAD4B+HDA+EDAAD/c3z40CnV28+ZY8qZplcnfAAA4H+O7/OhQWLroUPu5fIQPgAA8D/H13xUBuEDAAD/I3x4IHwAAOB/hI8yED4AAPAfwocHaj4AAPA/wocHwgcAAP4XFQ6BollCgnv5TPsqwgcAAP4TFtOr705Lq9C+TKkOAID/0ezigZoPAAD8j/DhgfABAID/Ob7Z5URRkfRauNAsfz5smMRFR58xgBA+AADwH8eHjxLLkvX797uXz4TwAQCAf9HsUgrhAwAA/yJ8lEL4AADAvwgfpRA+AADwL8JHKYQPAAD8i/BRCuEDAAD/cvxoF9WgRo1K7U/4AADAfxwfPmrGxMih8eMrvD81HwAAhGizy+zZs+X888+X6tWrS7du3WTt2rUSCggfAACEYPh44403ZOzYsTJx4kTZuHGjdOjQQfr27SsHDx6UYKfB4+TJk6b4ottOnDhxzvtU5Xs5+Zw47+DbJxjPifMOvn2C8Zw4b6nwe/lTNcsPH/O1pqNLly7y7LPPmtclJSWSnJwso0aNkgkTJpR77OHDhyUhIUHy8vIkPj6+SqZX7/faa2Z52ZAh5U6vrt/7119/db9u0KDBaedQVfvY/f1C9Zw47+DbJxjPifMOvn2C8Zw4b6nwe4Vcn4/CwkLZsGGDpKenu9dFRERInz59JCsr67T9CwoKTPG8MFVJp1Rf9fPP7mVfNAF6/kKUvo6MjDRFFRcXV8k+VfleTj4nzjv49gnGc+K8g2+fYDyncD3vk6dqN3S7q8aj9D41atSQqKio0K752L9/vzRt2lS++uorSU1Nda+///77ZdWqVbJmzRqv/SdNmiSTJ08+7X2qqubjWGGh1MrIMMtH09NNB9Sy6C/kwIED5/z9AAAIpn6MkZGRphJAb/dFRUWn7dO4cWOJi4sLr9EuWkOi/UM8az60icZu0T6aY5KSktyJUFNjdnb2Oe9Tle/l5HPivINvn2A8J847+PYJxnMK1/NOTk72eq89e/ZU+P4XUh1Otf1IU1ZOTo7Xen2tF6u02NhYU8PhWQJBfzl67p70tVZHxcTEmKLLVbFPVb6Xk8+J8w6+fYLxnDjv4NsnGM8pXM87yiOg+LrP2d3k4tcOp127dpVZs2a5O5ympKTIfffdZ3uH04o2u7hoMtRqKU2Cvn4hVbWP3d8vVM+J8w6+fYLxnDjv4NsnGM+J85YKv1fIhQ8dajt06FB5/vnnTQiZMWOGLFmyRL7//ntJTEwM6vABAAD8yy+R57bbbpNDhw7Jww8/bNqgOnbsKMuXLz9j8PCXGgFozwIAADbWfJyLqq75AAAAwYWn2gIAAFsRPgAAgK0cHz7yT56U/osWmaLLAAAgsAI+yZi/FZeUyEc7driXAQBAYDm+5gMAAAQXwgcAALAV4QMAANiK8AEAAGxF+AAAAOE92sU14arOdFoV9Nkukp/vfs9inu0CAIDf1K5dW6pVqxZa06vv27dPkpOTA30aAADgLFTk8ShBFz5KSkpk//79FUpOFaU1Hhpo9u7dy/NiPHBdfOPa+Ma18Y1rUzauS3hdm9oVuH8HXbNLRESEnHfeeX55b/3FOuWXW5W4Lr5xbXzj2vjGtSkb18W3+DC7NnQ4BQAAtiJ8AAAAW4VF+IiNjZWJEyear/j/cV1849r4xrXxjWtTNq6Lb7Fhem2CrsMpAABwtrCo+QAAAMGD8AEAAGxF+AAAALYifAAAAFs5JnzMnj1bzj//fKlevbp069ZN1q5dW+7+S5culTZt2pj9L774Yvnoo4/EiSpzXbZs2SKDBg0y++vsdDNmzBAnq8y1mTdvnlxxxRVSt25dU/r06XPGv7FwuTZvvfWWdO7cWerUqSM1a9aUjh07yj//+U9xqsr+W+OyePFi8//VwIEDJdyvy8KFC8218Cx6nFNV9m8mNzdXRo4cKY0bNzajYFq3bu28e5TlAIsXL7ZiYmKsl156ydqyZYt11113WXXq1LFycnLK3P/LL7+0IiMjralTp1pbt261HnzwQSs6OtravHmz5SSVvS5r1661xo0bZ73++utWUlKSNX36dMupKntt7rjjDmv27NnW119/bW3bts0aNmyYlZCQYO3bt88K92uzYsUK66233jL/L+3cudOaMWOG+f9r+fLlVrhfG5ddu3ZZTZs2ta644gprwIABVrhflwULFljx8fHWgQMH3CU7O9tyospem4KCAqtz587W9ddfb33xxRfmb2flypXWpk2bLCdxRPjo2rWrNXLkSPfr4uJiq0mTJlZGRkaZ+996661W//79vdZ169bN+vOf/2w5SWWvi6dmzZo5Onycy7VRJ0+etGrXrm29/PLLltOc67VRl156qQn1TnM210b/Vnr06GG9+OKL1tChQx0ZPip7XTR8aHgPB5W9NnPnzrVatGhhFRYWWk4W8s0uhYWFsmHDBlMN7vl8GH2dlZVV5jG63nN/1bdvX5/7h8t1CRdVcW2OHz8uRUVFUq9ePXGSc702+oEmMzNTtm/fLr169RInOdtr88gjj0ijRo1k+PDh4kRne12OHj0qzZo1Mw9VGzBggGn2dZqzuTbvvfeepKammmaXxMREueiii+SJJ56Q4uJicZKQDx+//vqr+aXoL8mTvs7Ozi7zGF1fmf3D5bqEi6q4Ng888IA0adLktBAbrtdGH6Fdq1YtiYmJkf79+8usWbPk2muvlXC/Nl988YXMnz/f9BlyqrO5LhdeeKG89NJL8u6778qrr75qnmbeo0cP2bdvn4T7tfnpp5/kzTffNMdpP4+HHnpInnrqKXnsscfESYLuqbZAsJsyZYrpPLhy5UpHd5Kr7CO0N23aZD7Nas3H2LFjpUWLFnLllVdKuDpy5IjceeedJng0aNAg0KcTVPSTvRYXDR5t27aV559/Xh599FEJZyUlJaam7IUXXpDIyEjp1KmT/PLLL/KPf/zDTMPuFCEfPvR/av0F5eTkeK3X10lJSWUeo+srs3+4XJdwcS7XZtq0aSZ8fPbZZ3LJJZeI05zttdGq5JYtW5plHe2ybds2ycjIcFT4qOy1+fHHH2X37t1y4403et1YVFRUlGmauuCCCyTUVcW/NdHR0XLppZfKzp07xUnO5to0btzYXA89zkWDmdaUaDOO1i46Qcg3u+gvQpOhftry/B9cX3sma0+63nN/9emnn/rcP1yuS7g422szdepU86ls+fLlZmipE1XV340eU1BQIOF8bXQo/+bNm02NkKvcdNNNctVVV5ll7evgBFXxN6NNDHqt9MbrJGdzbXr27GlCmCuoqh9++MFcG6cED8NyyFCm2NhYa+HChWa434gRI8xQJtfQrTvvvNOaMGGC11DbqKgoa9q0aWbY5MSJEx071LYy10WHeOlQUi2NGzc2w251eceOHZbTVPbaTJkyxQyXe/PNN72GBx45csQK92vzxBNPWJ988on1448/mv31/yv9/2vevHlWuF+b0pw62qWy12Xy5MnWxx9/bP5mNmzYYA0ePNiqXr26GYoa7tdmz549ZiTdfffdZ23fvt364IMPrEaNGlmPPfaY5SSOCB9q1qxZVkpKirlB6NCm1atXu7f17t3b/E/vacmSJVbr1q3N/u3bt7c+/PBDy4kqc110PLnm0dJF9wv3a6NDj8u6Nhpcw/3a/P3vf7datmxpbh5169a1UlNTzT+4TlXZf2vCIXxU9rqkpaW5901MTDRzWmzcuNFyqsr+zXz11Vdm+gcNLTrs9vHHHzdDtp2kmv4n0LUvAAAgfIR8nw8AABBaCB8AAMBWhA8AAGArwgcAALAV4QMAANiK8AEAAGxF+AAAALYifAAAAFsRPgAAgK0IHwAAwFaEDwAAYCvCBwAAEDv9P/s/1OiR+x8jAAAAAElFTkSuQmCC",
219:       "text/plain": [
220:        "<Figure size 640x480 with 1 Axes>"
221:       ]
222:      },
223:      "metadata": {},
224:      "output_type": "display_data"
225:     }
226:    ],
227:    "source": [
228:     "fig, ax = plt.subplots()\n",
229:     "hist, bins = np.histogram(noise.sigma_e.data, bins=50, density=True)\n",
230:     "\n",
231:     "ax.plot(bins[:-1], hist, marker='.', linewidth=1, color='#dddddd', label=f'σ_e (avg {np.average(noise.sigma_e.data):.2f})')\n",
232:     "\n",
233:     "sigma_zero = noise.sigma_zero_fun(naive_noisy_fit.block_sizes[0] * naive_noisy_fit.block_sizes[1])\n",
234:     "\n",
235:     "ax.axvline(sigma_zero, color='teal', linestyle='--', label=f'σ_zero = {sigma_zero:.2f}')\n",
236:     "plt.legend()\n",
237:     "ax.spines[['right', 'top']].set_visible(False)\n",
238:     "\n",
239:     "plt.show(fig)"
240:    ]
241:   },
242:   {
243:    "cell_type": "code",
244:    "execution_count": null,
245:    "id": "2722073f",
246:    "metadata": {},
247:    "outputs": [],
248:    "source": []
249:   }
250:  ],
251:  "metadata": {
252:   "kernelspec": {
253:    "display_name": "Python 3",
254:    "language": "python",
255:    "name": "python3"
256:   },
257:   "language_info": {
258:    "codemirror_mode": {
259:     "name": "ipython",
260:     "version": 3
261:    },
262:    "file_extension": ".py",
263:    "mimetype": "text/x-python",
264:    "name": "python",
265:    "nbconvert_exporter": "python",
266:    "pygments_lexer": "ipython3",
267:    "version": "3.12.11"
268:   }
269:  },
270:  "nbformat": 4,
271:  "nbformat_minor": 5
272: }

================
File: notebooks/sbm_visualize.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "code",
  5:    "execution_count": 2,
  6:    "metadata": {},
  7:    "outputs": [
  8:     {
  9:      "name": "stdout",
 10:      "output_type": "stream",
 11:      "text": [
 12:       "Collecting networkx\n",
 13:       "  Using cached networkx-3.4.2-py3-none-any.whl.metadata (6.3 kB)\n",
 14:       "Using cached networkx-3.4.2-py3-none-any.whl (1.7 MB)\n",
 15:       "Installing collected packages: networkx\n",
 16:       "Successfully installed networkx-3.4.2\n"
 17:      ]
 18:     }
 19:    ],
 20:    "source": [
 21:     "!pip install networkx\n",
 22:     "!pip install matplotlib\n",
 23:     "!pip install numpy"
 24:    ]
 25:   },
 26:   {
 27:    "cell_type": "code",
 28:    "execution_count": 5,
 29:    "metadata": {},
 30:    "outputs": [
 31:     {
 32:      "data": {
 33:       "image/png": "",
 34:       "text/plain": [
 35:        "<Figure size 1200x500 with 3 Axes>"
 36:       ]
 37:      },
 38:      "metadata": {},
 39:      "output_type": "display_data"
 40:     }
 41:    ],
 42:    "source": [
 43:     "import networkx as nx\n",
 44:     "import matplotlib.pyplot as plt\n",
 45:     "import numpy as np\n",
 46:     "\n",
 47:     "def plot_sbm_graph(block_sizes, p_matrix):\n",
 48:     "    # Validate the connectivity matrix\n",
 49:     "    n_blocks = len(block_sizes)\n",
 50:     "    if p_matrix.shape != (n_blocks, n_blocks):\n",
 51:     "        raise ValueError(\"The connectivity matrix dimensions must match the number of blocks.\")\n",
 52:     "    if np.any(p_matrix < 0) or np.any(p_matrix > 1):\n",
 53:     "        raise ValueError(\"All probabilities in the connectivity matrix must be between 0 and 1.\")\n",
 54:     "\n",
 55:     "    # Generate Stochastic Block Model graph\n",
 56:     "    G = nx.stochastic_block_model(block_sizes, p_matrix)\n",
 57:     "\n",
 58:     "    # Get adjacency matrix\n",
 59:     "    adj_matrix = nx.to_numpy_array(G)\n",
 60:     "\n",
 61:     "    # Assign colors based on block membership\n",
 62:     "    colors = [G.nodes[node]['block'] for node in G.nodes]\n",
 63:     "\n",
 64:     "    # Plotting the graph\n",
 65:     "    pos = nx.spring_layout(G, seed=42)  # For consistent layout\n",
 66:     "    plt.figure(figsize=(12, 5))\n",
 67:     "\n",
 68:     "    # Subplot 1: SBM graph\n",
 69:     "    plt.subplot(1, 2, 1)\n",
 70:     "    nx.draw(G, pos, node_color=colors, cmap=plt.cm.tab10, with_labels=False,\n",
 71:     "            node_size=100, edge_color='gray')\n",
 72:     "    plt.title('Stochastic Block Model')\n",
 73:     "\n",
 74:     "    # Subplot 2: Adjacency matrix with visible block structure\n",
 75:     "    plt.subplot(1, 2, 2)\n",
 76:     "    plt.imshow(adj_matrix, cmap='Greys', interpolation='none')\n",
 77:     "    plt.colorbar(label='Edge Weight')\n",
 78:     "    plt.title('Adjacency Matrix')\n",
 79:     "    plt.xlabel('Nodes')\n",
 80:     "    plt.ylabel('Nodes')\n",
 81:     "\n",
 82:     "    # Overlay block boundaries for visual separation\n",
 83:     "    block_boundaries = np.cumsum([0] + block_sizes)\n",
 84:     "    for boundary in block_boundaries:\n",
 85:     "        plt.axhline(boundary - 0.5, color='red', linestyle='--', linewidth=0.5)\n",
 86:     "        plt.axvline(boundary - 0.5, color='red', linestyle='--', linewidth=0.5)\n",
 87:     "\n",
 88:     "    plt.tight_layout()\n",
 89:     "    plt.show()\n",
 90:     "\n",
 91:     "# Example usage\n",
 92:     "block_sizes = [5, 8, 10]  # Sizes of each block\n",
 93:     "p_matrix = np.array([[0, 0.1, 0.5],\n",
 94:     "                     [0.1, 0.6, 0.1],\n",
 95:     "                     [0.5, 0.1, 0.8]])  # Full inter-block connectivity matrix\n",
 96:     "\n",
 97:     "plot_sbm_graph(block_sizes, p_matrix)\n"
 98:    ]
 99:   },
100:   {
101:    "cell_type": "code",
102:    "execution_count": null,
103:    "metadata": {},
104:    "outputs": [],
105:    "source": []
106:   }
107:  ],
108:  "metadata": {
109:   "kernelspec": {
110:    "display_name": "anon_sbm",
111:    "language": "python",
112:    "name": "python3"
113:   },
114:   "language_info": {
115:    "codemirror_mode": {
116:     "name": "ipython",
117:     "version": 3
118:    },
119:    "file_extension": ".py",
120:    "mimetype": "text/x-python",
121:    "name": "python",
122:    "nbconvert_exporter": "python",
123:    "pygments_lexer": "ipython3",
124:    "version": "3.13.0"
125:   }
126:  },
127:  "nbformat": 4,
128:  "nbformat_minor": 2
129: }

================
File: notebooks/visualize_generated_networks_08-07-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "a39b7981",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Visualizing a series of observed and surrogate networks"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": 18,
 14:    "id": "9ec1e6ca",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "from pathlib import Path\n",
 19:     "import numpy as np\n",
 20:     "import scipy.sparse as sp\n",
 21:     "import matplotlib.pyplot as plt\n",
 22:     "import networkx as nx\n",
 23:     "\n",
 24:     "from sbm.sampling import sample_sbm_graph_from_fit\n",
 25:     "from sbm.io import SBMFit, SBMWriter, GraphLoader\n",
 26:     "from sbm.noisy_fit import create_sbm_noise\n",
 27:     "\n",
 28:     "RNG = np.random.default_rng(0)"
 29:    ]
 30:   },
 31:   {
 32:    "cell_type": "code",
 33:    "execution_count": 19,
 34:    "id": "ab4db642",
 35:    "metadata": {},
 36:    "outputs": [
 37:     {
 38:      "name": "stdout",
 39:      "output_type": "stream",
 40:      "text": [
 41:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_lastfm_asia_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_3\n"
 42:      ]
 43:     }
 44:    ],
 45:    "source": [
 46:     "name = \"lastfm_asia\"\n",
 47:     "sbm = SBMWriter.load(\n",
 48:     "    Path(f\"/Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_{name}_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_3\")\n",
 49:     ")\n",
 50:     "g = GraphLoader.load(\n",
 51:     "    Path(f'/Users/lmmi/anon_sbm/data/processed/{name}.edgelist'),\n",
 52:     "    force_undirected=True, # type: ignore\n",
 53:     "    )"
 54:    ]
 55:   },
 56:   {
 57:    "cell_type": "code",
 58:    "execution_count": 20,
 59:    "id": "ce7dc0d4",
 60:    "metadata": {},
 61:    "outputs": [],
 62:    "source": [
 63:     "import numpy as np\n",
 64:     "import igraph as ig\n",
 65:     "import matplotlib.pyplot as plt\n",
 66:     "from matplotlib import cm\n",
 67:     "from scipy.sparse import isspmatrix_csr\n",
 68:     "\n",
 69:     "\n",
 70:     "def plot_csr_network_igraph(\n",
 71:     "    ax,\n",
 72:     "    csr_adj,\n",
 73:     "    title=\"\",\n",
 74:     "    *,\n",
 75:     "    layout=\"kamada_kawai\",      # \"fr\" (Fruchterman-Reingold) or any igraph layout name\n",
 76:     "    base_node_size=5,          # pixel diameter of the least-connected node\n",
 77:     "    max_node_size=10,\n",
 78:     "    node_cmap=cm.magma,\n",
 79:     "    with_labels=False,\n",
 80:     "    restrict_to_lcc=True,\n",
 81:     "):\n",
 82:     "    \"\"\"\n",
 83:     "    Draw an undirected graph stored as a CSR array on the supplied Matplotlib Axes.\n",
 84:     "\n",
 85:     "    Parameters\n",
 86:     "    ----------\n",
 87:     "    ax : matplotlib.axes.Axes\n",
 88:     "        Host axes created by plt.subplots.\n",
 89:     "    csr_adj : scipy.sparse.csr_array / csr_matrix\n",
 90:     "        Symmetric adjacency matrix.  Non-zeros are treated as edge weights.\n",
 91:     "    title : str\n",
 92:     "        Subplot title.\n",
 93:     "    layout : str | (n,2) array\n",
 94:     "        igraph layout name or explicit coordinates.\n",
 95:     "    *size / *width : float\n",
 96:     "        Ranges for vertex bubble diameters and edge strokes (pixels).\n",
 97:     "    node_cmap : matplotlib colormap\n",
 98:     "        Vertex colour map keyed on degree.\n",
 99:     "    with_labels : bool\n",
100:     "        Draw integer node labels.\n",
101:     "    \"\"\"\n",
102:     "\n",
103:     "    # 1 ────────── build igraph graph from sparse input\n",
104:     "\n",
105:     "    n = csr_adj.shape[0]\n",
106:     "    coo = csr_adj.tocoo()\n",
107:     "    mask = coo.row < coo.col                      # keep each undirected edge once\n",
108:     "    edges = list(zip(coo.row[mask], coo.col[mask]))\n",
109:     "    weights = coo.data[mask].astype(float).tolist()\n",
110:     "\n",
111:     "    g = ig.Graph(n=n, edges=edges, directed=False)\n",
112:     "    if restrict_to_lcc:\n",
113:     "        g = g.connected_components().giant()\n",
114:     "\n",
115:     "    if weights:\n",
116:     "        g.es[\"weight\"] = weights  # optional\n",
117:     "\n",
118:     "    # 2 ────────── vertex/edge aesthetics\n",
119:     "    deg = np.array(g.degree())\n",
120:     "    deg_norm = (deg - deg.min()) / (deg.ptp() + 1e-9)\n",
121:     "    g.vs[\"size\"] = (base_node_size + deg_norm * (max_node_size - base_node_size)).tolist()\n",
122:     "\n",
123:     "    rgba = node_cmap(deg_norm)\n",
124:     "    g.vs[\"color\"] = [cm.colors.to_hex(c) for c in rgba]\n",
125:     "    g.vs[\"frame_color\"] = [\"white\"] * n\n",
126:     "    g.vs[\"frame_width\"] = 0.1\n",
127:     "\n",
128:     "    if \"weight\" in g.es.attributes():\n",
129:     "        w = np.array(weights)\n",
130:     "        w_norm = (w - w.min()) / (w.ptp() + 1e-9)\n",
131:     "    else:\n",
132:     "        w_norm = np.zeros(len(g.es))\n",
133:     "    g.es[\"width\"] = 0.1 #(base_edge_width + w_norm * (max_edge_width - base_edge_width)).tolist()\n",
134:     "    g.es[\"color\"] = [\"#bbbbbb\"] * len(g.es)\n",
135:     "\n",
136:     "    # 3 ────────── layout\n",
137:     "    if isinstance(layout, str):\n",
138:     "        try:\n",
139:     "            coord = g.layout(layout)\n",
140:     "            coord = np.array(coord)\n",
141:     "        except ValueError:\n",
142:     "            # if the layout name is not recognized, use a default layout\n",
143:     "            raise ValueError(f\"Unknown layout: {layout}. Please use a valid igraph layout name.\")\n",
144:     "    else:                       # numpy array supplied\n",
145:     "        coord = np.array(layout)\n",
146:     "\n",
147:     "    # scale limits to fit the graph\n",
148:     "    x_min, x_max = min(coord[:, 0]), max(coord[:, 0])\n",
149:     "    y_min, y_max = min(coord[:, 1]), max(coord[:, 1])\n",
150:     "\n",
151:     "    # set data to range between 0 and 1 \n",
152:     "    coord[:, 0] = (coord[:, 0] - x_min) / (x_max - x_min)\n",
153:     "    coord[:, 1] = (coord[:, 1] - y_min) / (y_max - y_min)\n",
154:     "    \n",
155:     "    # 4 ────────── draw\n",
156:     "    ax.set_title(title, fontsize=12)\n",
157:     "    ax.axis(\"off\")\n",
158:     "    ig.plot(\n",
159:     "        g,\n",
160:     "        target=ax,\n",
161:     "        layout=coord,\n",
162:     "        vertex_size=g.vs[\"size\"],\n",
163:     "        vertex_color=g.vs[\"color\"],\n",
164:     "        vertex_frame_width=g.vs[\"frame_width\"],\n",
165:     "        vertex_frame_color=g.vs[\"frame_color\"],\n",
166:     "        edge_width=g.es[\"width\"],\n",
167:     "        edge_color=g.es[\"color\"],\n",
168:     "        vertex_label=g.vs.indices if with_labels else None,\n",
169:     "        vertex_label_size=8,\n",
170:     "    )\n",
171:     "\n",
172:     "    scale = 1.025\n",
173:     "    ax.set_xlim(1-scale, scale)\n",
174:     "    ax.set_ylim(1-scale, scale)\n"
175:    ]
176:   },
177:   {
178:    "cell_type": "code",
179:    "execution_count": 21,
180:    "id": "3c5b959a",
181:    "metadata": {},
182:    "outputs": [
183:     {
184:      "name": "stdout",
185:      "output_type": "stream",
186:      "text": [
187:       "max σ_n: 0.042, max σ_e: 0.163\n",
188:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
189:       "[NAIVE]    Added 0 edges to zero pairs.\n"
190:      ]
191:     }
192:    ],
193:    "source": [
194:     "EPS, DELTA, ALPHA = 1, 1e-4, 1-1e-4\n",
195:     "\n",
196:     "sbm_g = sample_sbm_graph_from_fit(sbm, RNG)\n",
197:     "\n",
198:     "noise = create_sbm_noise(sbm, EPS, DELTA, ALPHA, noise_type=\"heterogeneous_gaussian\")\n",
199:     "\n",
200:     "lasso_noisy_fit = noise.sample_sbm_fit(RNG, post='lasso')\n",
201:     "lasso_g = sample_sbm_graph_from_fit(lasso_noisy_fit, RNG)\n",
202:     "\n",
203:     "naive_noisy_fit = noise.sample_sbm_fit(RNG, post='naive')\n",
204:     "naive_g = sample_sbm_graph_from_fit(naive_noisy_fit, RNG)"
205:    ]
206:   },
207:   {
208:    "cell_type": "code",
209:    "execution_count": 22,
210:    "id": "69e8d221",
211:    "metadata": {},
212:    "outputs": [],
213:    "source": [
214:     "# check that graph is undirected\n",
215:     "assert (sbm_g.adjacency != sbm_g.adjacency.T).sum() == 0,\\\n",
216:     "    \"The sampled SBM graph is not undirected.\"\n",
217:     "assert (lasso_g.adjacency != lasso_g.adjacency.T).sum() == 0,\\\n",
218:     "    \"The lasso noisy graph is not undirected.\"\n",
219:     "assert (naive_g.adjacency != naive_g.adjacency.T).sum() == 0,\\\n",
220:     "    \"The naive noisy graph is not undirected.\""
221:    ]
222:   },
223:   {
224:    "cell_type": "code",
225:    "execution_count": 23,
226:    "id": "45e318fa",
227:    "metadata": {},
228:    "outputs": [
229:     {
230:      "data": {
231:       "image/png": "",
232:       "text/plain": [
233:        "<Figure size 1600x400 with 4 Axes>"
234:       ]
235:      },
236:      "metadata": {},
237:      "output_type": "display_data"
238:     }
239:    ],
240:    "source": [
241:     "fig, ax = plt.subplots(ncols=4, figsize=(16, 4))\n",
242:     "\n",
243:     "for idx, (name, adjacency) in enumerate(\n",
244:     "    [\n",
245:     "        (\"Empirical\", g.adjacency),\n",
246:     "        ('SBM', sbm_g.adjacency),\n",
247:     "        (\"Lasso Noisy Fit\", lasso_g.adjacency),\n",
248:     "        (\"Naive Noisy Fit\", naive_g.adjacency),\n",
249:     "    ]\n",
250:     "):\n",
251:     "    plot_csr_network_igraph(\n",
252:     "        ax[idx],\n",
253:     "        adjacency,\n",
254:     "        title=name,\n",
255:     "        layout=\"kamada_kawai\", \n",
256:     "        base_node_size=1,\n",
257:     "        max_node_size=10,\n",
258:     "        restrict_to_lcc=False,\n",
259:     "        )\n",
260:     "\n",
261:     "plt.show()"
262:    ]
263:   },
264:   {
265:    "cell_type": "code",
266:    "execution_count": null,
267:    "id": "1ff4b1df",
268:    "metadata": {},
269:    "outputs": [],
270:    "source": []
271:   },
272:   {
273:    "cell_type": "markdown",
274:    "id": "ada47c4b",
275:    "metadata": {},
276:    "source": [
277:     "# Visualize for all networks:\n"
278:    ]
279:   },
280:   {
281:    "cell_type": "code",
282:    "execution_count": 24,
283:    "id": "c24dbce9",
284:    "metadata": {},
285:    "outputs": [],
286:    "source": [
287:     "import sys\n",
288:     "from pathlib import Path\n",
289:     "from itertools import product\n",
290:     "from tqdm import tqdm\n",
291:     "\n",
292:     "### Load all surrogate statistics\n",
293:     "folder_path = Path('/Users/lmmi/anon_sbm/data/processed/')\n",
294:     "\n",
295:     "# find all log files in the logs directory\n",
296:     "edgelist_files = list(folder_path.glob(\"*.edgelist\"))\n",
297:     "size = (3,6,12,25)"
298:    ]
299:   },
300:   {
301:    "cell_type": "code",
302:    "execution_count": 25,
303:    "id": "9654c7d7",
304:    "metadata": {},
305:    "outputs": [],
306:    "source": [
307:     "def extract_network_name(file_path: Path) -> str:\n",
308:     "    \"\"\"\n",
309:     "    Extract the network name from the file path.\n",
310:     "    \"\"\"\n",
311:     "    return file_path.stem.split('.')[0]  # Assuming the name is the first part of the filename"
312:    ]
313:   },
314:   {
315:    "cell_type": "code",
316:    "execution_count": 26,
317:    "id": "c41de916",
318:    "metadata": {},
319:    "outputs": [],
320:    "source": [
321:     "EPS, DELTA, ALPHA = 3, 1e-4, 1-1e-4"
322:    ]
323:   },
324:   {
325:    "cell_type": "code",
326:    "execution_count": 27,
327:    "id": "0dc7e752",
328:    "metadata": {},
329:    "outputs": [
330:     {
331:      "name": "stderr",
332:      "output_type": "stream",
333:      "text": [
334:       "0it [00:00, ?it/s]"
335:      ]
336:     },
337:     {
338:      "name": "stdout",
339:      "output_type": "stream",
340:      "text": [
341:       "Processing /Users/lmmi/anon_sbm/data/processed/eu_email.edgelist with block size 3...\n",
342:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_eu_email_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
343:       "max σ_n: 0.133, max σ_e: 0.729\n",
344:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
345:       "[NAIVE]    Added 0 edges to zero pairs.\n"
346:      ]
347:     },
348:     {
349:      "name": "stderr",
350:      "output_type": "stream",
351:      "text": [
352:       "1it [00:41, 41.13s/it]"
353:      ]
354:     },
355:     {
356:      "name": "stdout",
357:      "output_type": "stream",
358:      "text": [
359:       "Processing /Users/lmmi/anon_sbm/data/processed/eu_email.edgelist with block size 6...\n",
360:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_eu_email_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
361:       "max σ_n: 0.133, max σ_e: 0.729\n",
362:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
363:       "[NAIVE]    Added 0 edges to zero pairs.\n"
364:      ]
365:     },
366:     {
367:      "name": "stderr",
368:      "output_type": "stream",
369:      "text": [
370:       "2it [01:20, 39.87s/it]"
371:      ]
372:     },
373:     {
374:      "name": "stdout",
375:      "output_type": "stream",
376:      "text": [
377:       "Processing /Users/lmmi/anon_sbm/data/processed/eu_email.edgelist with block size 12...\n",
378:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_eu_email_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
379:       "max σ_n: 0.133, max σ_e: 0.729\n",
380:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
381:       "[NAIVE]    Added 0 edges to zero pairs.\n"
382:      ]
383:     },
384:     {
385:      "name": "stderr",
386:      "output_type": "stream",
387:      "text": [
388:       "3it [01:59, 39.71s/it]"
389:      ]
390:     },
391:     {
392:      "name": "stdout",
393:      "output_type": "stream",
394:      "text": [
395:       "Processing /Users/lmmi/anon_sbm/data/processed/eu_email.edgelist with block size 25...\n",
396:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_eu_email_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
397:       "max σ_n: 0.133, max σ_e: 0.729\n",
398:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
399:       "[NAIVE]    Added 0 edges to zero pairs.\n"
400:      ]
401:     },
402:     {
403:      "name": "stderr",
404:      "output_type": "stream",
405:      "text": [
406:       "4it [02:38, 39.33s/it]"
407:      ]
408:     },
409:     {
410:      "name": "stdout",
411:      "output_type": "stream",
412:      "text": [
413:       "Processing /Users/lmmi/anon_sbm/data/processed/caltech_fb.edgelist with block size 3...\n",
414:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_caltech_fb_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
415:       "max σ_n: 0.247, max σ_e: 1.191\n",
416:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
417:       "[NAIVE]    Added 0 edges to zero pairs.\n"
418:      ]
419:     },
420:     {
421:      "name": "stderr",
422:      "output_type": "stream",
423:      "text": [
424:       "5it [03:11, 37.24s/it]"
425:      ]
426:     },
427:     {
428:      "name": "stdout",
429:      "output_type": "stream",
430:      "text": [
431:       "Processing /Users/lmmi/anon_sbm/data/processed/caltech_fb.edgelist with block size 6...\n",
432:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_caltech_fb_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
433:       "max σ_n: 0.247, max σ_e: 1.191\n",
434:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
435:       "[NAIVE]    Added 0 edges to zero pairs.\n"
436:      ]
437:     },
438:     {
439:      "name": "stderr",
440:      "output_type": "stream",
441:      "text": [
442:       "6it [03:45, 36.07s/it]"
443:      ]
444:     },
445:     {
446:      "name": "stdout",
447:      "output_type": "stream",
448:      "text": [
449:       "Processing /Users/lmmi/anon_sbm/data/processed/caltech_fb.edgelist with block size 12...\n",
450:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_caltech_fb_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
451:       "max σ_n: 0.247, max σ_e: 1.191\n",
452:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
453:       "[NAIVE]    Added 0 edges to zero pairs.\n"
454:      ]
455:     },
456:     {
457:      "name": "stderr",
458:      "output_type": "stream",
459:      "text": [
460:       "7it [04:18, 35.13s/it]"
461:      ]
462:     },
463:     {
464:      "name": "stdout",
465:      "output_type": "stream",
466:      "text": [
467:       "Processing /Users/lmmi/anon_sbm/data/processed/caltech_fb.edgelist with block size 25...\n",
468:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_caltech_fb_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
469:       "max σ_n: 0.247, max σ_e: 1.191\n",
470:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
471:       "[NAIVE]    Added 0 edges to zero pairs.\n"
472:      ]
473:     },
474:     {
475:      "name": "stderr",
476:      "output_type": "stream",
477:      "text": [
478:       "8it [04:53, 35.00s/it]"
479:      ]
480:     },
481:     {
482:      "name": "stdout",
483:      "output_type": "stream",
484:      "text": [
485:       "Processing /Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist with block size 3...\n",
486:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
487:       "max σ_n: 0.002, max σ_e: 2.017\n",
488:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
489:       "[NAIVE]    Added 0 edges to zero pairs.\n"
490:      ]
491:     },
492:     {
493:      "name": "stderr",
494:      "output_type": "stream",
495:      "text": [
496:       "9it [05:15, 30.94s/it]"
497:      ]
498:     },
499:     {
500:      "name": "stdout",
501:      "output_type": "stream",
502:      "text": [
503:       "Processing /Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist with block size 6...\n",
504:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
505:       "max σ_n: 0.002, max σ_e: 2.017\n",
506:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
507:       "[NAIVE]    Added 0 edges to zero pairs.\n"
508:      ]
509:     },
510:     {
511:      "name": "stderr",
512:      "output_type": "stream",
513:      "text": [
514:       "10it [05:37, 27.99s/it]"
515:      ]
516:     },
517:     {
518:      "name": "stdout",
519:      "output_type": "stream",
520:      "text": [
521:       "Processing /Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist with block size 12...\n",
522:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
523:       "max σ_n: 0.002, max σ_e: 2.017\n",
524:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
525:       "[NAIVE]    Added 0 edges to zero pairs.\n"
526:      ]
527:     },
528:     {
529:      "name": "stderr",
530:      "output_type": "stream",
531:      "text": [
532:       "11it [05:58, 25.99s/it]"
533:      ]
534:     },
535:     {
536:      "name": "stdout",
537:      "output_type": "stream",
538:      "text": [
539:       "Processing /Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist with block size 25...\n",
540:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
541:       "max σ_n: 0.002, max σ_e: 2.017\n",
542:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
543:       "[NAIVE]    Added 0 edges to zero pairs.\n"
544:      ]
545:     },
546:     {
547:      "name": "stderr",
548:      "output_type": "stream",
549:      "text": [
550:       "12it [06:19, 24.38s/it]"
551:      ]
552:     },
553:     {
554:      "name": "stdout",
555:      "output_type": "stream",
556:      "text": [
557:       "Processing /Users/lmmi/anon_sbm/data/processed/enron_email.edgelist with block size 3...\n",
558:       "Processing /Users/lmmi/anon_sbm/data/processed/enron_email.edgelist with block size 6...\n",
559:       "Processing /Users/lmmi/anon_sbm/data/processed/enron_email.edgelist with block size 12...\n",
560:       "Processing /Users/lmmi/anon_sbm/data/processed/enron_email.edgelist with block size 25...\n",
561:       "Processing /Users/lmmi/anon_sbm/data/processed/lastfm_asia.edgelist with block size 3...\n",
562:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_lastfm_asia_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
563:       "max σ_n: 0.077, max σ_e: 0.400\n",
564:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
565:       "[NAIVE]    Added 0 edges to zero pairs.\n"
566:      ]
567:     },
568:     {
569:      "name": "stderr",
570:      "output_type": "stream",
571:      "text": [
572:       "17it [10:28, 41.88s/it]"
573:      ]
574:     },
575:     {
576:      "name": "stdout",
577:      "output_type": "stream",
578:      "text": [
579:       "Processing /Users/lmmi/anon_sbm/data/processed/lastfm_asia.edgelist with block size 6...\n",
580:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_lastfm_asia_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
581:       "max σ_n: 0.077, max σ_e: 0.400\n",
582:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
583:       "[NAIVE]    Added 0 edges to zero pairs.\n"
584:      ]
585:     },
586:     {
587:      "name": "stderr",
588:      "output_type": "stream",
589:      "text": [
590:       "18it [14:22, 73.24s/it]"
591:      ]
592:     },
593:     {
594:      "name": "stdout",
595:      "output_type": "stream",
596:      "text": [
597:       "Processing /Users/lmmi/anon_sbm/data/processed/lastfm_asia.edgelist with block size 12...\n",
598:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_lastfm_asia_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
599:       "max σ_n: 0.077, max σ_e: 0.400\n",
600:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
601:       "[NAIVE]    Added 0 edges to zero pairs.\n"
602:      ]
603:     },
604:     {
605:      "name": "stderr",
606:      "output_type": "stream",
607:      "text": [
608:       "19it [18:28, 106.06s/it]"
609:      ]
610:     },
611:     {
612:      "name": "stdout",
613:      "output_type": "stream",
614:      "text": [
615:       "Processing /Users/lmmi/anon_sbm/data/processed/lastfm_asia.edgelist with block size 25...\n",
616:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_lastfm_asia_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\n",
617:       "max σ_n: 0.077, max σ_e: 0.400\n",
618:       "[LASSO]    Added 0 edges to previously-zero pairs\n",
619:       "[NAIVE]    Added 0 edges to zero pairs.\n"
620:      ]
621:     },
622:     {
623:      "name": "stderr",
624:      "output_type": "stream",
625:      "text": [
626:       "24it [22:35, 56.50s/it] "
627:      ]
628:     },
629:     {
630:      "name": "stdout",
631:      "output_type": "stream",
632:      "text": [
633:       "Processing /Users/lmmi/anon_sbm/data/processed/wiki_vote.edgelist with block size 3...\n",
634:       "Processing /Users/lmmi/anon_sbm/data/processed/wiki_vote.edgelist with block size 6...\n",
635:       "Processing /Users/lmmi/anon_sbm/data/processed/wiki_vote.edgelist with block size 12...\n",
636:       "Processing /Users/lmmi/anon_sbm/data/processed/wiki_vote.edgelist with block size 25...\n"
637:      ]
638:     },
639:     {
640:      "name": "stderr",
641:      "output_type": "stream",
642:      "text": [
643:       "\n"
644:      ]
645:     }
646:    ],
647:    "source": [
648:     "for index, (edgelist_path, block_size) in tqdm(enumerate(product(edgelist_files[::-1], size))):\n",
649:     "    print(f\"Processing {edgelist_path} with block size {block_size}...\")\n",
650:     "\n",
651:     "    name = extract_network_name(edgelist_path)\n",
652:     "\n",
653:     "    # too big\n",
654:     "    if name in {'enron_email', 'wiki_vote'}:\n",
655:     "        continue\n",
656:     "\n",
657:     "    sbm = SBMWriter.load(\n",
658:     "        Path(f\"/Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_{name}_cooling_rate_0_9999_force_undirected_True_init_method_metis_min_block_size_6\")\n",
659:     "    )\n",
660:     "    g = GraphLoader.load(\n",
661:     "        Path(edgelist_path), force_undirected=True)\n",
662:     "\n",
663:     "    sbm_g = sample_sbm_graph_from_fit(sbm, RNG)\n",
664:     "\n",
665:     "    noise = create_sbm_noise(sbm, EPS, DELTA, ALPHA, noise_type=\"heterogeneous_gaussian\")\n",
666:     "\n",
667:     "    lasso_noisy_fit = noise.sample_sbm_fit(RNG, post='lasso')\n",
668:     "    lasso_g = sample_sbm_graph_from_fit(lasso_noisy_fit, RNG)\n",
669:     "\n",
670:     "    naive_noisy_fit = noise.sample_sbm_fit(RNG, post='naive')\n",
671:     "    naive_g = sample_sbm_graph_from_fit(naive_noisy_fit, RNG)\n",
672:     "\n",
673:     "    fig, ax = plt.subplots(ncols=4, figsize=(16, 4))\n",
674:     "\n",
675:     "    if g.adjacency.shape[0] > 1000:\n",
676:     "        layout = 'large'\n",
677:     "        restrict_to_lcc = True\n",
678:     "    else:\n",
679:     "        layout = 'kamada_kawai'\n",
680:     "        restrict_to_lcc = False\n",
681:     "\n",
682:     "    for idx, (method_name, adjacency) in enumerate(\n",
683:     "        [\n",
684:     "            (\"Empirical\", g.adjacency),\n",
685:     "            ('SBM', sbm_g.adjacency),\n",
686:     "            (\"Lasso Noisy Fit\", lasso_g.adjacency),\n",
687:     "            (\"Naive Noisy Fit\", naive_g.adjacency),\n",
688:     "        ]\n",
689:     "    ):\n",
690:     "        plot_csr_network_igraph(\n",
691:     "            ax[idx],\n",
692:     "            adjacency,\n",
693:     "            title=method_name,\n",
694:     "            layout=layout, \n",
695:     "            base_node_size=1,\n",
696:     "            max_node_size=10,\n",
697:     "            restrict_to_lcc=restrict_to_lcc,\n",
698:     "            )\n",
699:     "\n",
700:     "    save_path = Path(f\"/Users/lmmi/anon_sbm/results/figures/sbm_fit_{name}_block_size_{block_size}.png\")\n",
701:     "    save_path.parent.mkdir(parents=True, exist_ok=True)\n",
702:     "    fig.savefig(save_path, dpi=300, bbox_inches='tight')\n",
703:     "    plt.close(fig)"
704:    ]
705:   },
706:   {
707:    "cell_type": "code",
708:    "execution_count": null,
709:    "id": "d95132b0",
710:    "metadata": {},
711:    "outputs": [],
712:    "source": []
713:   }
714:  ],
715:  "metadata": {
716:   "kernelspec": {
717:    "display_name": "Python 3",
718:    "language": "python",
719:    "name": "python3"
720:   },
721:   "language_info": {
722:    "codemirror_mode": {
723:     "name": "ipython",
724:     "version": 3
725:    },
726:    "file_extension": ".py",
727:    "mimetype": "text/x-python",
728:    "name": "python",
729:    "nbconvert_exporter": "python",
730:    "pygments_lexer": "ipython3",
731:    "version": "3.12.11"
732:   }
733:  },
734:  "nbformat": 4,
735:  "nbformat_minor": 5
736: }

================
File: planted_partitions/undirected_planted_partitions.py
================
  1: #!/usr/bin/env python3
  2: """
  3: undirected_planted_partition.py
  4: --------------------------------
  5: Simple smoke-test for the swap-only MCMC implementation.
  6: For each of 100 independent repetitions we
  7: 1.  Draw an undirected 100-node SBM with
  8:         – B = 10 blocks of size 10
  9:         – p_in  = 0.30   (within-block connection probability)
 10:         – p_out = 0.05   (between-block probability)
 11: 2.  Build an initial *random* equal-size partition with
 12:         UniformSmallBlockAssigner(min_block_size=10)             (code in block_assigner.py)
 13: 3.  Run the adaptive swap-only MCMC for `n_iter` iterations.
 14: 4.  Compute the Jaccard index between
 15:         – the set of node pairs co-clustered in the *final* state, and
 16:         – the same set for the planted partition.
 17: The script prints the mean, standard deviation and a histogram
 18: of the 100 Jaccard scores so you can eyeball whether the sampler
 19: typically finds the planted structure.
 20: """
 21: from typing import Sequence, Hashable
 22: from collections.abc import Sequence
 23: import numpy as np
 24: from scipy.sparse import csr_array
 25: from scipy.optimize import linear_sum_assignment
 26: from tqdm import tqdm
 27: from sbm.graph_data import GraphData
 28: from sbm.block_assigner import (
 29:     MetisBlockAssigner,
 30: )
 31: from sbm.model import SBMModel
 32: ###############################################################################
 33: # utility helpers
 34: ###############################################################################
 35: def planted_blocks(n_nodes: int, block_size: int, rng) -> dict[int, int]:
 36:     """Random planted partition: block 0 → nodes 0–9, block 1 → 10–19, …"""
 37:     random_nodes = rng.permutation(n_nodes)
 38:     # generate a random list of blocks for the nodes ensuring the correct block size
 39:     random_blocks = np.arange(n_nodes) // block_size
 40:     random_blocks = rng.permutation(random_blocks)
 41:     return {v: block for (v, block) in zip(random_nodes, random_blocks)}
 42: def sample_sbm(rng: np.random.Generator,
 43:                blocks: dict[int, int],
 44:                p_in: float,
 45:                p_out: float) -> csr_array:
 46:     """Generate an undirected loop-free adjacency matrix for a binary SBM."""
 47:     n = len(blocks)
 48:     adj = np.zeros((n, n), dtype=np.int8)
 49:     # probability matrix look-up
 50:     for u in range(n):
 51:         for v in range(u + 1, n):          # u < v → strict upper triangle
 52:             p = p_in if blocks[u] == blocks[v] else p_out
 53:             if rng.random() < p:
 54:                 adj[u, v] = adj[v, u] = 1  # symmetrise
 55:     return csr_array(adj)                 # sparse CSR
 56: def misclassification_rate(
 57:     true_labels: Sequence[Hashable],
 58:     est_labels: Sequence[Hashable],
 59: ) -> float:
 60:     """
 61:     Percentage of vertices whose community label is wrong *after*
 62:     optimally permuting the estimated labels to match the true ones.
 63:     Parameters
 64:     ----------
 65:     true_labels : sequence
 66:         Ground-truth block labels – length N.
 67:     est_labels  : sequence
 68:         Estimated block labels  – length N.
 69:     Returns
 70:     -------
 71:     float
 72:         Mis-classification rate in the interval [0, 1].
 73:     Notes
 74:     -----
 75:     * Label sets may use arbitrary hashables (str, int, …) and need not
 76:       have the same cardinality.  Any surplus estimated or true blocks
 77:       are matched to “dummy” columns/rows filled with zeros.
 78:     * Uses the Hungarian algorithm (via `scipy.optimize.linear_sum_assignment`)
 79:       to maximise the number of correctly matched vertices.
 80:     """
 81:     true = np.asarray(true_labels)
 82:     est  = np.asarray(est_labels)
 83:     if true.shape != est.shape:
 84:         raise ValueError("true_labels and est_labels must have the same length")
 85:     # Map arbitrary labels to contiguous integers 0..T-1 and 0..E-1
 86:     true_ids,  true_inv  = np.unique(true, return_inverse=True)
 87:     est_ids,   est_inv   = np.unique(est,  return_inverse=True)
 88:     T, E = len(true_ids), len(est_ids)
 89:     N    = len(true)
 90:     # Build contingency matrix C[e, t] = |{ i : est_i=e and true_i=t }|
 91:     C = np.zeros((E, T), dtype=int)
 92:     np.add.at(C, (est_inv, true_inv), 1)
 93:     # Pad to square (Hungarian implementation needs it or we need to
 94:     # maximise on rectangles by padding zeros).
 95:     if E != T:
 96:         dim = max(E, T)
 97:         C_padded = np.zeros((dim, dim), dtype=int)
 98:         C_padded[:E, :T] = C
 99:         C = C_padded
100:     # Maximise trace(C[perm])  →  minimise −C for Hungarian
101:     row_ind, col_ind = linear_sum_assignment(-C)
102:     matched = C[row_ind, col_ind].sum()
103:     return 1.0 - matched / N
104: ###############################################################################
105: # main loop
106: ###############################################################################
107: def main(
108:     n_nodes = 100,
109:     block_size = 10,
110:     p_in = 0.30,
111:     p_out = 0.05,
112:     n_experiments = 10,
113:     n_iter = 3_000,
114:     rng_master = np.random.default_rng(42),
115:     temperature: float = 1
116: ):
117:     init_scores = []
118:     final_scores = []
119:     for rep in tqdm(range(n_experiments)):
120:         rng = np.random.default_rng(rng_master.integers(2**32))
121:         # --- 1. plant graph -----------------------------------------------------
122:         planted = planted_blocks(n_nodes, block_size, rng)
123:         adj     = sample_sbm(rng, planted, p_in, p_out)
124:         # --- 2. initial random partition ---------------------------------------
125:         gdata    = GraphData(adjacency_matrix=adj, directed=False)
126:         assigner = MetisBlockAssigner(graph_data=gdata,
127:                                             rng=rng,
128:                                             min_block_size=block_size
129:                                         )
130:         init_blocks = assigner.compute_assignment()
131:         init_scores.append(
132:             misclassification_rate(
133:                 true_labels=list(planted.values()),
134:                 est_labels=list(init_blocks.blocks.values())
135:             )
136:         )
137:         sbm = SBMModel(
138:                 initial_blocks=init_blocks,
139:                 rng=rng,
140:                 logger=None,  # no logging
141:             )
142:         print(f"Initial nll {sbm.likelihood_calculator.nll:.3f}")
143:         sbm.fit(
144:             min_block_size=block_size,
145:             initial_temperature=temperature,
146:         )
147:         final_blocks = sbm.get_block_assignments()
148:         # --- 4. score -----------------------------------------------------------
149:         final_scores.append(
150:             misclassification_rate(
151:                 true_labels=list(planted.values()),
152:                 est_labels=list(final_blocks.values())
153:             )
154:         )
155:     # --- print results ----------------------------------------------------------
156:     print(f"Initial misclassification rate: {np.mean(init_scores):.3f} ± {np.std(init_scores):.3f}")
157:     print(f"Final misclassification rate:   {np.mean(final_scores):.3f} ± {np.std(final_scores):.3f}")
158: if __name__ == "__main__":
159:     main(
160:         n_nodes=300,
161:         block_size=3,
162:         p_in=0.5,
163:         p_out=0.01,
164:         n_experiments=1,
165:         n_iter=5_000,
166:         rng_master=np.random.default_rng(42),
167:         temperature=1e-2
168:     )

================
File: src/data_processing/process_caltech.py
================
 1: """
 2: Script for converting caltech-facebook data to simple edgelist format
 3: change from format:
 4:     %MatrixMarket matrix coordinate pattern symmetric 
 5:     769 769 16656
 6:     5 1
 7:     31 1
 8: to format:
 9:     769 769 16656
10:     5 1
11:     31 1
12: """
13: from pathlib import Path
14: if __name__ == "__main__":
15:     file_path = Path("data/raw/socfb-Caltech36/socfb-Caltech36.mtx")
16:     # read file
17:     with file_path.open("r") as f:
18:         lines = f.readlines()
19:     # process lines
20:     processed_lines = []
21:     # skip first two lines (Matrix Market header)
22:     for idx, line in enumerate(lines):
23:         if idx < 2:
24:             continue
25:         parts = line.split()
26:         if len(parts) >= 2:
27:             processed_lines.append(f"{parts[0]} {parts[1]}\n")
28:     # processed data goes in the "processed" folder in the parent-folder
29:     out_folder_path = Path("data/processed")
30:     out_file_path = out_folder_path / "caltech_fb.edgelist"
31:     # write to output file
32:     out_folder_path.mkdir(parents=True, exist_ok=True)
33:     with out_file_path.open("w") as f:
34:         f.writelines(processed_lines)
35:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_congress_twitter.py
================
 1: """
 2: Script for converting congress data to simple edgelist format
 3: change from format:
 4:   0 4 {'weight': 0.002105263157894737}
 5:   0 12 {'weight': 0.002105263157894737}
 6:   0 18 {'weight': 0.002105263157894737}
 7:   0 25 {'weight': 0.004210526315789474}
 8: to format:
 9:   0 4
10:   0 12
11:   0 18
12:   0 25
13: """
14: from pathlib import Path
15: if __name__ == "__main__":
16:     file_path = Path("data/raw/congress_twitter/congress.edgelist")
17:     # read file
18:     with file_path.open("r") as f:
19:         lines = f.readlines()
20:     # process lines
21:     processed_lines = []
22:     for line in lines:
23:         parts = line.split()
24:         if len(parts) >= 2:
25:             processed_lines.append(f"{parts[0]} {parts[1]}\n")
26:     # processed data goes in the "processed" folder in the parent-folder
27:     out_folder_path = Path("data/processed")
28:     out_file_path = out_folder_path / "congress_twitter.edgelist"
29:     # write to output file
30:     out_folder_path.mkdir(parents=True, exist_ok=True)
31:     with out_file_path.open("w") as f:
32:         f.writelines(processed_lines)
33:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_email_eu.py
================
 1: """
 2: Script for converting email-eu data to simple edgelist format
 3: change from format:
 4:     582 364 0
 5:     168 472 2797
 6:     168 912 3304
 7:     2 790 4523
 8: to format:
 9:     582 364
10:     168 472
11:     168 912
12:     2 790
13: while removing self-loops and duplicate edges.
14: """
15: from pathlib import Path
16: if __name__ == "__main__":
17:     file_path = Path("data/raw/email_eu/email-Eu-core-temporal.txt")
18:     # read file
19:     with file_path.open("r") as f:
20:         lines = f.readlines()
21:     # process lines
22:     processed_lines = []
23:     edgeset = set()
24:     for line in lines:
25:         parts = line.split()
26:         edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
27:         if edge not in edgeset:
28:             edgeset.add(edge)
29:             # only keep the first two parts of the line
30:             # and ignore the third part (weight)
31:             # also ignore self-loops
32:             if len(parts) >= 2 and parts[0] != parts[1]:
33:                 processed_lines.append(f"{parts[0]} {parts[1]}\n")
34:     # processed data goes in the "processed" folder in the parent-folder
35:     out_folder_path = Path("data/processed")
36:     out_file_path = out_folder_path / "eu_email.edgelist"
37:     # write to output file
38:     out_folder_path.mkdir(parents=True, exist_ok=True)
39:     with out_file_path.open("w") as f:
40:         f.writelines(processed_lines)
41:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_enron_email.py
================
 1: """
 2: Script for converting enron-email data to simple edgelist format
 3: change from format:
 4:     # Directed graph (each unordered pair of nodes is saved once): Email-Enron.txt 
 5:     # Enron email network (edge indicated that email was exchanged, undirected edges)
 6:     # Nodes: 36692 Edges: 367662
 7:     # FromNodeId	ToNodeId
 8:     0	1
 9:     1	0
10:     1	2
11:     1	3
12: to format:
13:     0	1
14:     1	0
15:     1	2
16:     1	3
17: while removing self-loops and duplicate edges.
18: """
19: from pathlib import Path
20: if __name__ == "__main__":
21:     file_path = Path("data/raw/enron_email/email-Enron.txt")
22:     # read file
23:     with file_path.open("r") as f:
24:         lines = f.readlines()
25:     # process lines
26:     processed_lines = []
27:     edgeset = set()
28:     for index, line in enumerate(lines):
29:         if index >= 4:
30:             parts = line.split()
31:             edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
32:             if edge not in edgeset:
33:                 edgeset.add(edge)
34:                 if parts[0] != parts[1]:
35:                     processed_lines.append(f"{parts[0]} {parts[1]}\n")
36:     # processed data goes in the "processed" folder in the parent-folder
37:     out_folder_path = Path("data/processed")
38:     out_file_path = out_folder_path / "enron_email.edgelist"
39:     # write to output file
40:     out_folder_path.mkdir(parents=True, exist_ok=True)
41:     with out_file_path.open("w") as f:
42:         f.writelines(processed_lines)
43:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_lastfm_asia.py
================
 1: """
 2: Script for converting lastfm-asia data to simple edgelist format
 3: remove the header and remove self-loops and duplicate edges.
 4: """
 5: from pathlib import Path
 6: if __name__ == "__main__":
 7:     file_path = Path("data/raw/lastfm_asia/lastfm_asia_edges.csv")
 8:     # read file
 9:     with file_path.open("r") as f:
10:         lines = f.readlines()
11:     # process lines
12:     processed_lines = []
13:     edgeset = set()
14:     for index, line in enumerate(lines):
15:         if index >= 1:
16:             parts = line.split(",")
17:             edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
18:             if edge not in edgeset:
19:                 edgeset.add(edge)
20:                 if len(parts) >= 1 and parts[0] != parts[1]:
21:                     processed_lines.append(f"{parts[0]} {parts[1]}\n")
22:     # processed data goes in the "processed" folder in the parent-folder
23:     out_folder_path = Path("data/processed")
24:     out_file_path = out_folder_path / "lastfm_asia.edgelist"
25:     # write to output file
26:     out_folder_path.mkdir(parents=True, exist_ok=True)
27:     with out_file_path.open("w") as f:
28:         f.writelines(processed_lines)
29:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_wiki_vote.py
================
 1: """
 2: Script for converting wiki-voce data to simple edgelist format
 3: change from format:
 4:     # Directed graph (each unordered pair of nodes is saved once): Wiki-Vote.txt 
 5:     # Wikipedia voting on promotion to administratorship (till January 2008). Directed edge A->B means user A voted on B becoming Wikipedia administrator.
 6:     # Nodes: 7115 Edges: 103689
 7:     # FromNodeId	ToNodeId
 8:     30	1412
 9:     30	3352
10:     30	5254
11: to format:
12:     30	1412
13:     30	3352
14:     30	5254
15: while removing self-loops and duplicate edges.
16: """
17: from pathlib import Path
18: if __name__ == "__main__":
19:     file_path = Path("data/raw/wiki_vote/wiki-vote.txt")
20:     # read file
21:     with file_path.open("r") as f:
22:         lines = f.readlines()
23:     # process lines
24:     processed_lines = []
25:     edgeset = set()
26:     for index, line in enumerate(lines):
27:         if index >= 4:
28:             parts = line.split()
29:             edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
30:             if edge not in edgeset:
31:                 edgeset.add(edge)
32:                 # only keep the first two parts of the line
33:                 # and ignore the third part (weight)
34:                 # also ignore self-loops
35:                 if parts[0] != parts[1]:
36:                     processed_lines.append(f"{parts[0]} {parts[1]}\n")
37:     # processed data goes in the "processed" folder in the parent-folder
38:     out_folder_path = Path("data/processed")
39:     out_file_path = out_folder_path / "wiki_vote.edgelist"
40:     # write to output file
41:     out_folder_path.mkdir(parents=True, exist_ok=True)
42:     with out_file_path.open("w") as f:
43:         f.writelines(processed_lines)
44:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/metrics/assortativity.py
================
 1: """ 
 2: Metrics for comparing assortativity of two graph.
 3: """
 4: import numpy as np
 5: from scipy.sparse import csr_array
 6: import networkx as nx
 7: ###############################################################################
 8: #Assortativity coefficient difference ------------------------------------
 9: ###############################################################################
10: def assortativity_difference(
11:     emp_adj: csr_array,
12:     sur_adj: csr_array,
13:     *,
14:     rng: np.random.Generator = np.random.default_rng(1),
15: ) -> float:
16:     """Absolute difference in degree‑assortativity (Pearson) coefficient."""
17:     def _assort(adj: csr_array) -> float:
18:         G = nx.from_scipy_sparse_matrix(adj)
19:         # NetworkX warns for disconnected graphs → ignore
20:         try:
21:             return float(nx.degree_pearson_correlation_coefficient(G))
22:         except Exception:
23:             return 0.0  # fallback (e.g., for trivial graphs)
24:     emp_assort = _assort(emp_adj)
25:     sur_assort = _assort(sur_adj)
26:     return abs(emp_assort - sur_assort)

================
File: src/metrics/community.py
================
 1: """
 2: Metric functions to compare the community structure of two graphs.
 3: """
 4: import numpy as np
 5: from scipy.sparse import csr_array, csr_matrix
 6: # external heavy‑duty packages (all listed in requirements.txt)
 7: from infomap import Infomap  # type: ignore
 8: import igraph as ig  # type: ignore
 9: import leidenalg  # type: ignore
10: ### Utility -----------------------------------------------------------------
11: def _modularity(adj: csr_array) -> float:
12:     g = ig.Graph.Adjacency(csr_matrix(adj), mode="UNDIRECTED")
13:     part = leidenalg.find_partition(g, leidenalg.ModularityVertexPartition, weights=None)
14:     return g.modularity(part)
15: ###############################################################################
16: # Infomap codelength difference -------------------------------------------
17: ###############################################################################
18: def infomap_codelength_difference(
19:     emp_adj: csr_array,
20:     sur_adj: csr_array,
21:     *,
22:     directed: bool = False,
23:     rng: np.random.Generator = np.random.default_rng(1),
24: ) -> float:
25:     """Absolute difference in Infomap codelength (compression) between graphs."""
26:     def _codelength(adj: csr_array) -> float:
27:         im = Infomap("--directed" if directed else "")
28:         rows, cols = adj.nonzero()
29:         for u, v in zip(rows, cols, strict=False):
30:             if u < v or directed:
31:                 im.add_link(int(u), int(v))
32:         im.run(silent=True)
33:         return im.codelength
34:     return abs(_codelength(emp_adj) - _codelength(sur_adj))
35: ###############################################################################
36: # Modularity distance via Leiden ------------------------------------------
37: ###############################################################################
38: def leiden_modularity_difference(
39:     emp_adj: csr_array,
40:     sur_adj: csr_array,
41:     *,
42:     rng: np.random.Generator = np.random.default_rng(1),
43: ) -> float:
44:     """Absolute difference in maximum modularity found by Leiden."""
45:     return abs(_modularity(emp_adj) - _modularity(sur_adj))

================
File: src/metrics/embedding.py
================
 1: """
 2: Metrics for comparing two adjacency matrices based on node embeddings
 3: """
 4: from typing import Literal
 5: import numpy as np
 6: import networkx as nx
 7: from scipy.sparse import csr_array
 8: from scipy.stats import wasserstein_distance  # 1‑D Earth mover distance
 9: from scipy.spatial.distance import cosine
10: from sbm.utils.util import restrict_to_lcc
11: from nodevectors import Node2Vec, ProNE  # type: ignore
12: ### Aliases --------------------------------------------------------
13: EmbeddingMethods = Literal["node2vec", "prone"]
14: ### Helper functions -----------------------------------------------
15: def _embed_and_sample(
16:         adj: csr_array,
17:         method: str,
18:         dim: int,
19:         n_pairs:int,
20:         rng:np.random.Generator
21:     ) -> np.ndarray:
22:     G = nx.from_scipy_sparse_matrix(adj)
23:     if method == "node2vec":
24:         model = Node2Vec(n_components=dim, walklen=80, return_weight=1.0, 
25:                             neighbor_weight=1.0, epochs=20, verbose=False)
26:     elif method == "prone":
27:         model = ProNE(n_components=dim)
28:     else:
29:         raise ValueError("Unknown method")
30:     emb = model.fit_transform(G)
31:     nodes = np.arange(emb.shape[0])  # node indices
32:     vecs = np.vstack([emb[n] for n in nodes])
33:     # sample pairs uniformly without replacement (if possible)
34:     m = nodes.size
35:     total_pairs = m * (m - 1) // 2
36:     n_samp = min(n_pairs, total_pairs)
37:     idx1 = rng.choice(m, size=n_samp, replace=True)
38:     idx2 = rng.choice(m - 1, size=n_samp, replace=True)
39:     idx2[idx2 >= idx1] += 1  # ensure idx2 ≠ idx1
40:     # compute inner products between sampled pairs
41:     #ip = np.array([cosine(vecs[idx1[i]], vecs[idx2[i]]) for i in range(n_samp)])
42:     ip = np.einsum("ij,ij->i", vecs[idx1], vecs[idx2])  # inner product
43:     return ip.ravel().astype(float)  # return as 1D array
44: def _embedding_ip_emd(
45:     emp_adj: csr_array,
46:     sur_adj: csr_array,
47:     *,
48:     dim: int = 128,
49:     n_pairs: int = 10_000,
50:     embedding_method: EmbeddingMethods = "node2vec",  # "node2vec" or "prone"
51:     rng: np.random.Generator = np.random.default_rng(1),
52: ) -> float:
53:     """Compare Node2Vec *and* ProNE embeddings via inner‑product distributions.
54:     The returned distance is the mean of the two 1‑D Wasserstein distances.
55:     """
56:     if embedding_method == "node2vec":
57:         ip_emp_n2v = _embed_and_sample(emp_adj, "node2vec", dim=dim,
58:                                        n_pairs=n_pairs, rng=rng
59:                                     )
60:         ip_sur_n2v = _embed_and_sample(sur_adj, "node2vec", dim=dim,
61:                                        n_pairs=n_pairs, rng=rng
62:                                     )
63:         d = wasserstein_distance(ip_emp_n2v, ip_sur_n2v)
64:     elif embedding_method == "prone":
65:         ip_emp_prn = _embed_and_sample(emp_adj, "prone", dim=dim,
66:                                        n_pairs=n_pairs, rng=rng
67:                                     )
68:         ip_sur_prn = _embed_and_sample(sur_adj, "prone", dim=dim,
69:                                        n_pairs=n_pairs, rng=rng
70:                                     )
71:         d = wasserstein_distance(ip_emp_prn, ip_sur_prn)
72:     else:
73:         raise ValueError(f"Unknown embedding method: {embedding_method}")
74:     return float(d)
75: ###############################################################################
76: # Embedding inner‑product EMD ---------------------------------------------
77: ###############################################################################
78: def embedding_node2vec_ip_emd(
79:     emp_adj: csr_array,
80:     sur_adj: csr_array,
81:     *,
82:     dim: int = 128,
83:     n_pairs: int = 10_000,
84:     rng: np.random.Generator = np.random.default_rng(1),
85: ) -> float:
86:     """Compare Node2Vec embeddings via inner‑product distributions."""
87:     return _embedding_ip_emd(emp_adj, sur_adj, dim=dim, n_pairs=n_pairs, 
88:                              embedding_method="node2vec", rng=rng)
89: def embedding_prone_ip_emd(
90:     emp_adj: csr_array,
91:     sur_adj: csr_array,
92:     *,
93:     dim: int = 128,
94:     n_pairs: int = 10_000,
95:     rng: np.random.Generator = np.random.default_rng(1),
96: ) -> float:
97:     """Compare ProNE embeddings via inner‑product distributions."""
98:     return _embedding_ip_emd(emp_adj, sur_adj, dim=dim, n_pairs=n_pairs, 
99:                              embedding_method="prone", rng=rng)

================
File: src/metrics/spectral.py
================
  1: """
  2: Spectral-subspace distance metric.
  3: This module provides :pyfunc:`eigen_subspace_distance`, which compares the
  4: leading *k* eigenpairs of two graphs.  It is robust to
  5: * integer or float adjacency matrices (we up-cast when needed);
  6: * asking for *too many* eigenpairs (ARPACK requires ``k < n``);
  7: * graphs of **different size** – we fall back to an eigenvalue-only distance;
  8: * tiny numerical noise – any value below *tolerance* is rounded to exact 0.
  9: """
 10: from typing import Tuple, Literal
 11: import numpy as np
 12: from scipy.sparse import csr_array
 13: from scipy.sparse.linalg import eigsh
 14: from scipy.spatial.distance import cosine
 15: from scipy.stats import wasserstein_distance
 16: # --------------------------------------------------------------------------- #
 17: # type aliases
 18: # --------------------------------------------------------------------------- #
 19: metric_type = Literal['eigen_val', 'eigen_vec']
 20: # --------------------------------------------------------------------------- #
 21: # helpers                                                                     #
 22: # --------------------------------------------------------------------------- #
 23: def _eig_pairs(A: csr_array, k: int, which: str = "LA") -> Tuple[np.ndarray, np.ndarray]:
 24:     """
 25:     Return the *k* largest-algebraic eigenvalues and eigenvectors of ``A``.
 26:     Parameters
 27:     ----------
 28:     A
 29:         Square symmetric matrix in CSR format.
 30:     k
 31:         Number of eigenpairs requested.  If ``k`` is ≥ *min(A.shape)`` it is
 32:         reduced to ``n − 1`` to satisfy ARPACK.
 33:     which
 34:         Part of the spectrum to compute (``"LA"`` = largest algebraic).
 35:     Returns
 36:     -------
 37:     λ, V
 38:         ``λ`` is length-``k`` (descending order); ``V`` has shape (*n*, *k*).
 39:     """
 40:     n = min(A.shape)
 41:     if k >= n:
 42:         k = n - 1  # ARPACK cannot handle k == n
 43:     A = A.astype(float, copy=False)  # ensure a float dtype for eigsh
 44:     vals, vecs = eigsh(A, k=k, which=which)
 45:     order = np.argsort(vals)[::-1]  # descending
 46:     return vals[order], vecs[:, order]
 47: def _eigen_distance(
 48:     emp_adj: csr_array,
 49:     sur_adj: csr_array,
 50:     *,
 51:     k: int = 10,
 52:     tolerance: float = 1e-12,
 53:     metric: metric_type = 'eigen_val',
 54: ) -> float:
 55:     """
 56:     Distance between the leading spectral subspaces of two graphs.
 57:     If *both* graphs have the same node count the metric is::
 58:         ||λ_emp − λ_sur||₂  +  mean_i(1 − cos(|v_emp,i|, |v_sur,i|))
 59:     where the absolute value removes the ± sign ambiguity of eigenvectors.
 60:     If node counts differ an eigenvector comparison is undefined.  In that
 61:     case a `RuntimeWarning` is emitted and the metric degrades gracefully to
 62:     **eigenvalue-only** distance ``||λ_emp − λ_sur||₂``.
 63:     Any result whose magnitude is below *tolerance* is returned as *exact*
 64:     0.0 so that identical graphs do not yield tiny floating-point residues.
 65:     Parameters
 66:     ----------
 67:     emp_adj, sur_adj
 68:         CSR adjacency matrices (weighted or unweighted, symmetric).
 69:     k
 70:         Number of leading eigenpairs to use (will be clamped so that
 71:         ``k < min(n_emp, n_sur)``).
 72:     tolerance
 73:         Numerical zero threshold for the final distance.
 74:     Returns
 75:     -------
 76:     float
 77:         Non-negative spectral distance.
 78:     """
 79:     # ------------------------------------------------------------------ k clamp
 80:     k_emp = min(k, emp_adj.shape[0] - 1)
 81:     k_sur = min(k, sur_adj.shape[0] - 1)
 82:     k_ = min(k_emp, k_sur)
 83:     # ---------------------------------------------------------------- eigpairs
 84:     λ_emp, V_emp = _eig_pairs(emp_adj, k_)
 85:     λ_sur, V_sur = _eig_pairs(sur_adj, k_)
 86:     if metric == 'eigen_val':
 87:         val_dist = float(np.linalg.norm(λ_emp - λ_sur))
 88:         return val_dist if abs(val_dist) >= tolerance else 0.0
 89:     elif metric == 'eigen_vec':
 90:         # ------------------------------------------------------------- vectors term
 91:         if emp_adj.shape == sur_adj.shape:
 92:             vec_dist = [
 93:                 cosine(np.abs(V_emp[:, i]), np.abs(V_sur[:, i]))
 94:                 for i in range(k_)
 95:             ]
 96:             vec_dist = float(np.mean(vec_dist))
 97:             return vec_dist if abs(vec_dist) >= tolerance else 0.0
 98:         else:
 99:             raise ValueError(
100:                 "Cannot compare eigenvectors of graphs with different node counts."
101:             )
102:     else:
103:         raise ValueError(
104:             f"Unknown metric type: {metric}. Use 'eigen_val' or 'eigen_vec'."
105:         )
106: # --------------------------------------------------------------------------- #
107: # main functions
108: # --------------------------------------------------------------------------- #
109: def eigen_val_distance(
110:     emp_adj: csr_array,
111:     sur_adj: csr_array,
112:     *,
113:     k: int = 10,
114:     tolerance: float = 1e-12,
115: ) -> float:
116:     return _eigen_distance(emp_adj, sur_adj, k=k, tolerance=tolerance, metric='eigen_val')
117: def eigen_vec_distance(
118:     emp_adj: csr_array,
119:     sur_adj: csr_array,
120:     *,
121:     k: int = 10,
122:     tolerance: float = 1e-12,
123: ) -> float:
124:     return _eigen_distance(emp_adj, sur_adj, k=k, tolerance=tolerance, metric='eigen_vec')
125: def centrality_distance(
126:     emp_adj: csr_array,
127:     sur_adj: csr_array,
128:     *,
129:     tolerance: float = 1e-12,
130: ) -> float:
131:     _, V_emp = _eig_pairs(emp_adj, 1)
132:     _, V_sur = _eig_pairs(sur_adj, 1)
133:     d = wasserstein_distance(
134:         np.abs(V_emp.ravel()),
135:         np.abs(V_sur.ravel()),
136:     )
137:     return d if abs(d) >= tolerance else 0.0

================
File: src/pipelines/evaluate_noisy_surrogates.py
================
  1: """
  2:     Generate surrogate differentially private SBM graphs and evaluate them against empirical data.
  3: """
  4: import argparse
  5: import yaml
  6: import csv
  7: from pathlib import Path
  8: import numpy as np
  9: from itertools import product
 10: from multiprocessing import Pool, cpu_count
 11: from tqdm import tqdm
 12: from metrics import REGISTRY
 13: from sbm.io import SBMWriter
 14: from sbm.sampling import sample_sbm_graph_from_fit
 15: from sbm.io import GraphLoader
 16: from sbm.utils.pipeline_utils import (
 17:     sbmfit_folderpath,
 18:     surrogate_statistics_filename,
 19:     FitConfig,
 20:     EvalConfig,
 21: )
 22: from sbm.noisy_fit import create_sbm_noise
 23: #######################
 24: ### Configuration Types 
 25: #######################
 26: def _generate_and_evaluate(
 27:         sbm_config, # fitting configs of the SBM
 28:         ds, # dataset specifications
 29:         eval_config, # evaluation configurations
 30:         rng: np.random.Generator,
 31:         eps:float, # privacy level epsilon
 32:         delta_sum:float, # sum of privacy level delta and alpha
 33:     ):
 34:     # split the privacy level delta (probability of failure)
 35:     delta, alpha = delta_sum/2, delta_sum/2
 36:     # load fitted model
 37:     fit_folder_path = sbmfit_folderpath(
 38:         base_dir=Path("results/sbm_fits"),
 39:         sbm_config=sbm_config,# type: ignore
 40:         data_spec=ds,
 41:     )
 42:     # load the sbm fit
 43:     sbm_fit = SBMWriter.load(fit_folder_path)
 44:     noise_factory = create_sbm_noise(
 45:         sbm=sbm_fit,
 46:         eps=eps,
 47:         delta=delta,
 48:         alpha=alpha,
 49:         noise_type="heterogeneous_gaussian"
 50:     )
 51:     # check if metrics have been cached earlier
 52:     out = surrogate_statistics_filename(
 53:         base_dir=Path("results/surrogate_statistics/dp"),
 54:         eval_configs=eval_config,
 55:         sbm_config=sbm_config,# type: ignore
 56:         data_spec=ds,
 57:     )
 58:     out.parent.mkdir(exist_ok=True)
 59:     if out.exists() and not eval_config["overwrite"]:
 60:         return
 61:     # Generate surrogates and campare metrics
 62:     results = []
 63:     for i in tqdm(range(eval_config["n_surrogates"])):
 64:         # sample an SBM graph from the sbm fit
 65:         emp = sample_sbm_graph_from_fit(sbm_fit, rng)
 66:         # sample differentially private sbm-fit
 67:         lasso_noisy_fit = noise_factory.sample_sbm_fit(rng, post='lasso') # type: ignore
 68:         # sample graph from the noisy sbm fit
 69:         private_surr = sample_sbm_graph_from_fit(lasso_noisy_fit, rng)
 70:         private_surr = private_surr.adjacency
 71:         row = {"dataset": ds["name"], "surrogate": f'surr_{i}'}
 72:         for m in eval_config["metrics"]:
 73:             row[m] = REGISTRY[m](emp, private_surr)
 74:         results.append(row)
 75:     with out.open("w", newline="") as f:
 76:         w = csv.DictWriter(f, fieldnames=results[0].keys())
 77:         w.writeheader(); w.writerows(results)
 78: ############################################
 79: ### main function
 80: ############################################
 81: def main(fit_config: str, eval_config: str, parallel:bool): # type: ignore
 82:     fit_config: FitConfig = yaml.safe_load(Path(fit_config).read_text())
 83:     rng = np.random.default_rng(fit_config["seed"])
 84:     data_config = fit_config["datasets"] # type: ignore
 85:     eval_config: EvalConfig = yaml.safe_load(Path(eval_config).read_text())
 86:     # load lists of privacy levels
 87:     eps_list = eval_config["eps"] # type: ignore
 88:     delta_sum_list = eval_config["delta"] # type: ignore
 89:     # Prepare arguments for the worker function
 90:     args = [
 91:         (sbm_config, ds, eval_config, rng, float(eps), float(delta_sum))# type: ignore
 92:         for sbm_config, ds, eps, delta_sum in
 93:             product(
 94:                 fit_config["sbm"],
 95:                 data_config,
 96:                 eps_list,
 97:                 delta_sum_list,
 98:             )
 99:     ]
100:     if parallel:
101:         # Create a pool of workers
102:         n_workers = max(1, cpu_count() - 1)  # Leave one core free
103:         with Pool(n_workers) as pool:
104:             # Execute the worker function in parallel
105:             pool.starmap(_generate_and_evaluate, args)
106:     else:
107:         for sbm_config, ds, eval_config, rng, eps, delta_sum in args:
108:             _generate_and_evaluate(
109:                 sbm_config=sbm_config,
110:                 ds=ds,
111:                 eval_config=eval_config,
112:                 rng=rng,
113:                 eps=eps,
114:                 delta_sum=delta_sum,
115:             )
116: if __name__ == "__main__":
117:     p = argparse.ArgumentParser()
118:     p.add_argument("--fit_config", type=str, help="Path to the configuration file.")
119:     p.add_argument("--eval_config", type=str, help="Path to the configuration file.")
120:     p.add_argument("--parallel", action="store_true", help="Run in parallel leaving one core free.")
121:     args = p.parse_args()
122:     main(
123:         fit_config=args.fit_config,
124:         eval_config=args.eval_config,
125:         parallel=args.parallel,
126:     )

================
File: src/sbm/utils/logger.py
================
  1: """
  2: sbm.utils.logger
  3: =================
  4: Enhanced CSV logger that also records online convergence diagnostics
  5: (R̂ and ESS) produced by :pyclass:`sbm.diagnostics.OnlineDiagnostics`.
  6: * The monitoring class keeps only *running* summaries, so you need an
  7:   external sink if you want to inspect those values later or feed them
  8:   into your existing visualisation pipeline.
  9: Row schema
 10: ----------
 11: ```
 12: iteration, elapsed_seconds, neg_log_likelihood,
 13: accept_rate_window, temperature,
 14: rhat_max, ess_min
 15: ```
 16: If you pass ``None`` for the diagnostic fields the columns are left
 17: empty, so existing parsing code keeps working when the diagnostics are
 18: switched off.
 19: """
 20: import csv
 21: import time
 22: from pathlib import Path
 23: from typing import Union, TextIO, Optional
 24: __all__ = ["CSVLogger"]
 25: class CSVLogger:
 26:     """Light‑weight CSV logger for long‐running SBM fits.
 27:     Parameters
 28:     ----------
 29:     file
 30:         Path to a CSV file *or* an already opened file handle.  If a path
 31:         is given and the file exists it will be **overwritten** so that
 32:         every fit starts with a clean log.
 33:     log_every
 34:         Only every ``log_every``‑th call to :py:meth:`log` results in a
 35:         new row.  Use this when your chain runs millions of sweeps but
 36:         you only need a coarse‑grained trace on disk.
 37:     """
 38:     header = [
 39:         "iteration",
 40:         "elapsed_seconds",
 41:         "neg_log_likelihood",
 42:         "accept_rate_window",
 43:         "temperature",
 44:         "rhat_max",   # max split‑R̂ across monitored scalars
 45:         "ess_min",    # min bulk/tail ESS across monitored scalars
 46:     ]
 47:     # ---------------------------------------------------------------------
 48:     def __init__(
 49:         self,
 50:         file: Union[str, Path, TextIO],
 51:         *,
 52:         log_every: int = 1_000,
 53:     ):
 54:         self.log_every = int(log_every)
 55:         self._start = time.time()
 56:         # Ensure we own a fresh handle ------------------------------------------------
 57:         if isinstance(file, (str, Path)):
 58:             file = Path(file)
 59:             if file.exists():
 60:                 file.unlink()  # start from scratch every run
 61:         # Open handle + CSV writer ----------------------------------------------------
 62:         if isinstance(file, (str, Path)):
 63:             self._own_handle = True
 64:             path = Path(file)
 65:             path.parent.mkdir(parents=True, exist_ok=True)
 66:             first = not path.exists()
 67:             self._fh: TextIO = path.open("a", newline="")
 68:             self._writer = csv.writer(self._fh)
 69:             if first:
 70:                 self._writer.writerow(self.header)
 71:         else:  # already a file‑like object
 72:             self._own_handle = False
 73:             self._fh = file
 74:             self._writer = csv.writer(self._fh)
 75:             # assume caller has written the header
 76:         self._iteration_since_flush = 0
 77:     # ------------------------------------------------------------------
 78:     def log(
 79:         self,
 80:         iteration: int,
 81:         neg_loglike: float,
 82:         accept_rate_window: float,
 83:         temperature: float,
 84:         *,
 85:         rhat_max: Optional[float] = None,
 86:         ess_min: Optional[float] = None,
 87:     ) -> None:
 88:         """Append one new row if ``iteration`` meets the cadence.
 89:         The diagnostics fields are *optional* so you can turn them off
 90:         without touching call‑sites.
 91:         """
 92:         if iteration % self.log_every:
 93:             return  # skip — not a checkpoint
 94:         elapsed = time.time() - self._start
 95:         self._writer.writerow([
 96:             iteration,
 97:             f"{elapsed:.3f}",
 98:             f"{neg_loglike:.6f}",
 99:             f"{accept_rate_window:.6f}",
100:             f"{temperature:.6f}",
101:             f"{rhat_max:.5f}" if rhat_max is not None else "",
102:             f"{ess_min:.1f}"   if ess_min  is not None else "",
103:         ])
104:         # Flush every ~10 rows to amortise disk writes.
105:         self._iteration_since_flush += 1
106:         if self._iteration_since_flush >= 10:
107:             self._fh.flush()
108:             self._iteration_since_flush = 0
109:     # ------------------------------------------------------------------
110:     def close(self):
111:         if self._own_handle:
112:             self._fh.close()
113:     # Context‑manager sugar ------------------------------------------------
114:     def __enter__(self):
115:         return self
116:     def __exit__(self, exc_type, exc, tb):
117:         self.close()

================
File: src/sbm/initial_partition.py
================
 1: import numpy as np
 2: import scipy.sparse as sp
 3: from scipy.sparse.linalg import eigsh
 4: from typing import Dict, Optional
 5: from sklearn.cluster import KMeans
 6: from scipy.sparse import csr_matrix
 7: class SpectralPartitioner:
 8:     def __init__(self, adjacency: csr_matrix, seed: Optional[int] = None):
 9:         """
10:         Initialize the SpectralPartitioner.
11:         :param adjacency: The adjacency matrix of the network (sparse CSR matrix).
12:         :param seed: Random seed for reproducibility.
13:         """
14:         self.adjacency: csr_matrix = adjacency.tocsr()
15:         self.num_nodes: int = self.adjacency.shape[0]
16:         self.rng = np.random.default_rng(seed)
17:         self.degree_vector = np.array(self.adjacency.sum(axis=1)).flatten()
18:         self.laplacian = self._compute_normalized_laplacian()
19:     def _compute_normalized_laplacian(self) -> csr_matrix:
20:         """
21:         Compute the normalized Laplacian matrix of the graph.
22:         :return: The normalized Laplacian matrix (sparse CSR matrix).
23:         """
24:         # Avoid division by zero
25:         with np.errstate(divide='ignore'):
26:             d_inv_sqrt = np.power(self.degree_vector, -0.5)
27:             d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.0
28:         D_inv_sqrt = sp.diags(d_inv_sqrt)
29:         L = sp.eye(self.num_nodes) - D_inv_sqrt @ self.adjacency @ D_inv_sqrt
30:         return L
31:     def partition(self, num_blocks: int) -> Dict[int, int]:
32:         """
33:         Partition the nodes into blocks using spectral clustering.
34:         :param num_blocks: The desired number of blocks.
35:         :return: A dictionary mapping node indices to block indices.
36:         """
37:         # Compute the first (num_blocks) eigenvectors of the normalized Laplacian
38:         # Use 'SM' to find eigenvalues closest to zero
39:         eigenvalues, eigenvectors = eigsh(
40:             self.laplacian, k=num_blocks, which='SM', tol=1e-6, maxiter=5000
41:         )
42:         # Normalize rows to unit length to improve clustering
43:         embedding = eigenvectors
44:         row_norms = np.linalg.norm(embedding, axis=1, keepdims=True)
45:         row_norms[row_norms == 0] = 1e-10  # Avoid division by zero
46:         embedding_normalized = embedding / row_norms
47:         # Use k-means clustering on the spectral embeddings
48:         kmeans = KMeans(n_clusters=num_blocks, random_state=self.rng.integers(1 << 32))
49:         labels = kmeans.fit_predict(embedding_normalized)
50:         # Map nodes to blocks
51:         blocks = {node: int(label) for node, label in enumerate(labels)}
52:         return blocks

================
File: src/sbm/noisy_fit.py
================
  1: ###############################################################################
  2: #  noisy_fit_refactored.py
  3: #  ───────────────────────────────────────────────────────────────────────────
  4: #  Differential-privacy noise generation for Stochastic-Block-Model (SBM) fits
  5: #
  6: #  This module implements three Gaussian–mechanism variants:
  7: #
  8: #    • **heterogeneous_gaussian**  – optimal per-coordinate σq   (Sec.-4, eq. 12)
  9: #    • **naive_degree_gaussian**   – one common  σ  calibrated to global
 10: #                                     Δmax-degree  (classic node-DP baseline)
 11: #    • **naive_edge_count_gaussian** – one common  σ  calibrated to
 12: #                                       Δnlk  (α-quantile “single–block change”)
 13: #
 14: #  All noise is added to the *SBM sufficient statistics*
 15: #           n_r   … block sizes            (1 × B   coordinates)
 16: #           m_rs  … upper-tri edge counts  (B(B+1)/2 coordinates)
 17: #
 18: #  Memory footprint is O(B + nnz(m)), never B².
 19: #
 20: #──────────────────────────────────────────────────────────────────────────────
 21: #  SYMBOL TABLE  (matches notation in the derivation)
 22: #──────────────────────────────────────────────────────────────────────────────
 23: #
 24: #  B           : number of blocks.
 25: #  k_vec       : integer array [k₀,…,k_{B-1}]  — true block sizes (≈k or k+1).
 26: #
 27: #  m_rs        : true edge count between blocks r and s (upper triangle incl. diag).
 28: #  N_rs        : number of *possible* edges, =
 29: #                  k_r·(k_r-1)/2    if r=s
 30: #                  k_r·k_s          if r≠s
 31: #
 32: #  p_rs        : edge probability  m_rs / N_rs.  For p=0 or 1 we clip to
 33: #                clip_p   (default 1e-12) to keep weights finite.
 34: #
 35: #  Δ_nlk       : “single-block change” sensitivity — α-quantile of the
 36: #                maximum number of neighbours a *single* node can have in the
 37: #                *same* block (max Binomial), eq. (2).
 38: #  delta_tail  : 1-α — contributes to δ in (ε,δ+δ_tail)-DP.
 39: #
 40: #  c_n         : sensitivity² for n_r.  Here Δ=1 ⇒  c_n = 1.
 41: #  c_e_val     : sensitivity² for *all* edge counts m_rs = Δ_nlk².
 42: #
 43: #  w_n[r]      : utility weight for n_r
 44: #  w_rs        : utility weight for m_rs
 45: #  w_e         : list of w_rs for every stored upper-tri cell.
 46: #
 47: #  S_sum       : Σ_q √(c_q w_q)   (needed in eq. (10)–(12)).
 48: #
 49: #  R           : ε² / (2 ln(1.25/(δ+δ_tail)))   — Gaussian mech. constant.
 50: #
 51: #  σ_n[r]      : standard deviation for noise on n_r  (heterogeneous case).
 52: #  σ_e[r,s]    : standard deviation for noise on m_rs (upper-tri CSR).
 53: #  σ_common    : single σ used by the two naïve variants.
 54: #
 55: #  noise_type  : one of {"heterogeneous_gaussian", "naive_degree_gaussian",
 56: #                        "naive_edge_count_gaussian"}.
 57: #
 58: #  clip_p      : lower/upper bound substituted for p_rs = 0 or 1.
 59: #  weight_clip : optional upper bound on w to avoid extreme σ→0.
 60: ###############################################################################
 61: # sbm/noisy_fit.py
 62: from dataclasses import dataclass
 63: from typing import List, Optional, Callable, Literal, Tuple
 64: import math
 65: import numpy as np
 66: import scipy.sparse as sp
 67: from scipy.sparse import csr_array
 68: from scipy.special import binom
 69: from math import exp, sqrt
 70: from scipy.stats import norm
 71: from sbm.io import SBMFit
 72: from sbm.post_process import (
 73:     naive_clamping,
 74:     constrained_lasso,
 75:     PostProcessFnName,
 76: )
 77: # --------------------------------------------------------------
 78: ### aliasses
 79: # --------------------------------------------------------------
 80: NoiseType = Literal[
 81:     "heterogeneous_gaussian",
 82:     "naive_degree_gaussian",
 83:     "naive_edge_count_gaussian"
 84: ]
 85: # --------------------------------------------------------------
 86: ### Helper functions
 87: # --------------------------------------------------------------
 88: # ---------------------------------------------------------------------
 89: #  analytic_gauss_K  (now with the 2-factor)
 90: # ---------------------------------------------------------------------
 91: def analytic_gauss_K(eps: float, delta: float, tol: float = 1e-12) -> float:
 92:     """
 93:     Return alpha* for the analytic Gaussian mechanism (Balle et al. 2018, Alg. 1).
 94:     Works for any eps > 0 and 0 < delta < 1.
 95:     """
 96:     delta0 = norm.cdf(0.0) - exp(eps) * norm.cdf(-sqrt(2*eps))
 97:     # ----------------------------------------------------------------
 98:     # Branch A  (delta >= delta0)  ->  solve for v >= 0
 99:     # ----------------------------------------------------------------
100:     if delta >= delta0:
101:         def B_plus(v: float) -> float:
102:             return float(norm.cdf(sqrt(eps)*v) - \
103:                    exp(eps) * norm.cdf(-sqrt(eps)*(v + 2.0)))
104:         lo, hi = 0.0, 1.0
105:         while B_plus(hi) < delta:      # B_plus increases in v
106:             hi *= 2.0
107:         while hi - lo > tol:
108:             mid = 0.5 * (lo + hi)
109:             if B_plus(mid) < delta:
110:                 lo = mid
111:             else:
112:                 hi = mid
113:         v_star = hi
114:         alpha  = sqrt(1.0 + v_star/2.0) - sqrt(v_star/2.0)
115:     # ----------------------------------------------------------------
116:     # Branch B  (delta < delta0)   ->  solve for u >= 0
117:     # ----------------------------------------------------------------
118:     else:
119:         def B_minus(u: float) -> float:
120:             return float(norm.cdf(-sqrt(eps)*u) - \
121:                    exp(eps) * norm.cdf(-sqrt(eps)*(u + 2.0)))
122:         lo, hi = 0.0, 1.0
123:         while B_minus(hi) > delta:     # B_minus decreases in u
124:             hi *= 2.0
125:         while hi - lo > tol:
126:             mid = 0.5 * (lo + hi)
127:             if B_minus(mid) > delta:
128:                 lo = mid
129:             else:
130:                 hi = mid
131:         u_star = hi
132:         alpha  = sqrt(1.0 + u_star/2.0) + sqrt(u_star/2.0)
133:     return alpha      # this is K
134: def _upper_tri_csr(rows, cols, data, B):
135:     """Return symmetric CSR from upper-tri lists."""
136:     coo = sp.coo_array((data, (rows, cols)), shape=(B, B))
137:     csr = csr_array(coo)
138:     return csr + csr.T - sp.diags(csr.diagonal())
139: def max_binom_quantile(k: int, ps: np.ndarray, alpha: float) -> int:
140:     """
141:     Small k (≤50) ⇒ brute-force exact cdf of max{Bin(k,p_s)}.
142:     Returns the smallest c s.t.   P(max ≤ c) ≥ α.
143:     """
144:     if not (0 < alpha < 1):
145:         raise ValueError("alpha must be in (0,1)")
146:     # pre-compute per-block Binomial pmf for 0..k
147:     pmf = np.array([binom(k, j) * ps**j * (1 - ps)**(k - j)
148:                     for j in range(k + 1)])        # shape (k+1,B)
149:     cdf = pmf.cumsum(axis=0)                       # shape (k+1,B)
150:     # P(max ≤ c) = ∏_s F_s(c)
151:     prod = np.prod(cdf, axis=1)                    # length k+1
152:     for c in range(k + 1):
153:         if prod[c] >= alpha:
154:             return c
155:     return k  # should never happen if alpha<1
156: def n_possible(k_r: int, k_s: int, same_block: bool) -> int:
157:     if same_block:
158:         return k_r * (k_r - 1) // 2
159:     return k_r * k_s
160: def add_edge_noise(
161:         block_conn: sp.csr_array,
162:         sigma_e: sp.csr_array,
163:         rng: np.random.Generator
164:     ) -> sp.csr_array:
165:     noisy_conn = sp.triu(
166:         block_conn.copy(),
167:         k=0, # include diagonal
168:         format="csr"
169:     )
170:     # add noise to edge-counts (m_rs) upper traingle
171:     rr, cc = noisy_conn.nonzero() # coordinates of the stored upper-tri values
172:     sigma = np.asarray(sigma_e[rr, cc]).ravel() # shape the sigma_e vector
173:     data = np.array(noisy_conn.data, dtype=float)
174:     data += rng.normal(0.0, sigma, size=len(sigma))
175:     return sp.csr_array(
176:         (data, (rr, cc)),
177:         shape=noisy_conn.shape,
178:         dtype=float
179:     )
180: # ---------------------------------------------------------
181: #### Main class
182: # ---------------------------------------------------------
183: @dataclass
184: class Noise:
185:     """Base class for noise added to an SBM fit."""
186:     fit: SBMFit
187:     sigma_n: np.ndarray              # shape (B,)
188:     sigma_e: sp.csr_array            # upper triangle incl. diag
189:     eps: float
190:     delta: float
191:     delta_tail: float                # = 1 - alpha
192:     delta_nlk: int                   # sensitivity used for m_rs
193:     metadata: dict
194:     def sample_sbm_fit(self,
195:                        rng: np.random.Generator,
196:                        post: Optional[Callable[[sp.csr_array], sp.csr_array]] = None,
197:                        ) -> SBMFit:
198:         """
199:         Draw *one* noisy SBM draw.
200:         Returns a **new** `SBMFit` instance ready for `sample_sbm_graph`.
201:         """
202:         raise NotImplementedError("Must be implemented in subclass")
203: @dataclass
204: class HeterogeneousGaussNoise(Noise):
205:     """An `SBMFit` with optimal Gaussian noise already added."""
206:     fit: SBMFit
207:     sigma_n: np.ndarray              # shape (B,)
208:     sigma_e: sp.csr_array            # upper triangle incl. diag
209:     sigma_zero_fun: Callable[[int], float]  # function to compute σ for zero pairs
210:     eps: float
211:     delta: float
212:     delta_tail: float                # = 1 - alpha
213:     delta_nlk: int                   # sensitivity used for m_rs
214:     S_sum: float                     # Σ_q √(c_q w_q) used in σ formula
215:     #R: float
216:     metadata: dict
217:     # ---------- sampling ---------------------------------------------
218:     def sample_sbm_fit(self, # type: ignore
219:                      rng: np.random.Generator,
220:                      post: Optional[PostProcessFnName] = 'naive',
221:                      ) -> SBMFit:
222:         """
223:         Draw *one* noisy SBM draw, then (optionally) post-process the
224:         noisy counts.
225:         Returns a **new** `SBMFit` instance ready for `sample_sbm_graph`.
226:         """
227:         k_vec = np.array(self.fit.block_sizes, int)
228:         # find the most frequent block size (this will be k)
229:         k_val = int(np.bincount(k_vec).argmax())  # most frequent block size
230:         # 1) add Gaussian noise to non-zero elements --------------------
231:         n_noisy = k_vec + rng.normal(0, self.sigma_n)
232:         noisy_conn = add_edge_noise(
233:             block_conn=self.fit.block_conn,
234:             sigma_e=self.sigma_e,
235:             rng=rng
236:         )
237:         ### post-process the noisy counts ------------------------
238:         if str(post).lower() == 'lasso':
239:             conn, n_noisy = constrained_lasso(
240:                 n_noisy=n_noisy,
241:                 noisy_conn=noisy_conn,  # type: ignore
242:                 sigma_rs=self.sigma_e,
243:                 k_val=k_val,
244:                 sigma_zero_fun=self.sigma_zero_fun,
245:                 rng=rng,
246:                 round_thresh=0.5,  # threshold for rounding
247:                 lam=None,  # λ in soft-threshold (impute from noisy fit)
248:                 n_possible_fn=n_possible,
249:             )
250:         else:
251:             ### perform simple post-processing:
252:             conn, n_noisy = naive_clamping(
253:                 n_noisy=n_noisy,
254:                 noisy_conn=noisy_conn, # type: ignore
255:                 sigma_e=self.sigma_e,
256:                 k_val=k_val,
257:                 sigma_zero_fun=self.sigma_zero_fun,
258:                 rng=rng,
259:                 round_thresh=0.5,  # threshold for rounding
260:                 n_possible_fn=n_possible,
261:                 )
262:         # 2) re-symmetrise & cast to int -----------------------------
263:         block_sizes = n_noisy.astype(int).tolist()
264:         return SBMFit(
265:             block_sizes=block_sizes,
266:             block_conn=conn,
267:             directed_graph=self.fit.directed_graph,
268:             neg_loglike=float("nan"),          # unknown after noise
269:             metadata={
270:                 **self.fit.metadata,
271:                 "dp_eps": self.eps,
272:                 "dp_delta": self.delta,
273:                 "dp_delta_tail": self.delta_tail,
274:             },
275:         )
276: @dataclass
277: class _HomogGaussNoiseBase(Noise):
278:     """
279:     Base for 'naïve' variants with *single* σ for n_r, single σ for m_rs.
280:     Stores only two scalars:  sigma_n_scalar, sigma_e_scalar
281:     """
282:     sigma_n_scalar: float      # same σ for every n_r
283:     sigma_e_scalar: float      # same σ for every m_rs (non-zero counts)
284:     # ---- helper ----------------------------------------------------
285:     def _draw_noisy_counts(self,
286:                            rng: np.random.Generator,
287:     ) -> tuple[np.ndarray, sp.csr_array]:
288:         k_vec = np.array(self.fit.block_sizes, int)
289:         n_noisy = np.maximum( 1, k_vec + rng.normal(0, self.sigma_n_scalar, size=len(k_vec)))
290:         conn = self.fit.block_conn.copy().astype(float).tocsr()
291:         mask_nz = conn.data != 0          # we only stored non-zeros
292:         conn.data[mask_nz] += rng.normal(
293:             0, self.sigma_e_scalar, size=mask_nz.sum()
294:         )
295:         conn = sp.triu(conn, k=0, format="csr")
296:         conn = conn + conn.T - sp.diags(conn.diagonal())
297:         conn = conn.astype(int).tocsr()
298:         return n_noisy, conn
299:     # ---- public ----------------------------------------------------
300:     def sample_sbm_fit(self,
301:                        rng: np.random.Generator,
302:                        post: Optional[Callable[[sp.csr_array], sp.csr_array]] = None
303:                        ) -> SBMFit:
304:         n_noisy, conn = self._draw_noisy_counts(rng)
305:         if post is not None:
306:             conn = post(conn)
307:         else:
308:             ### perform simple post-processing:
309:             #   round conn and block_sizes to int and ensure
310:             #   no conn-count is larger than the max possible
311:             rr, cc = conn.nonzero()
312:             for r, c in zip(rr, cc):
313:                 n_noisy[r] = np.round(n_noisy[r])
314:                 n_noisy[c] = np.round(n_noisy[c])
315:                 N = n_possible(n_noisy[r], n_noisy[c], same_block=(r == c)) # type: ignore
316:                 conn[r, c] = np.round(conn[r, c]) # type: ignore
317:                 if conn[r, c] > N: # type: ignore
318:                     conn[r, c] = N # type: ignore
319:         return SBMFit(
320:             block_sizes=n_noisy.tolist(),
321:             block_conn=conn,
322:             directed_graph=self.fit.directed_graph,
323:             neg_loglike=float("nan"),
324:             metadata={**self.fit.metadata, **self.metadata},
325:         )
326: @dataclass
327: class NaiveDegreeGaussNoise(_HomogGaussNoiseBase):
328:     """Homogeneous σ using global Δ_deg (α-quantile max-degree)."""
329:     pass
330: @dataclass
331: class NaiveEdgeCountGaussNoise(_HomogGaussNoiseBase):
332:     """Homogeneous σ using global Δ_nlk (α-quantile single block-change)."""
333:     pass
334: # --------------------------------------------------------------------
335: # 1.  p-matrix and Δ_{nlk}
336: # --------------------------------------------------------------------
337: def _prob_matrix_and_sens(
338:     conn: sp.csr_array,
339:     k_vec: np.ndarray,
340:     alpha: float,
341:     clip_p: float
342: ) -> Tuple[sp.csr_array, int]:
343:     """
344:     Convert edge counts → probabilities **p_{rs}** and compute
345:     Δ_{nlk} = α–quantile of max neighbours in any single block.
346:     """
347:     B = len(k_vec)
348:     p = conn.copy().astype(float).tocoo()
349:     for i, (r, s) in enumerate(zip(p.row, p.col)):
350:         N = n_possible(k_vec[r], k_vec[s], r == s) # type: ignore
351:         p.data[i] = conn[r, s] / N
352:     p = p.tocsr()
353:     delta_nlk = 0
354:     for r in range(B):
355:         ps_row = np.zeros(B)
356:         start, end = p.indptr[r], p.indptr[r + 1]
357:         ps_row[p.indices[start:end]] = p.data[start:end]
358:         delta_nlk = max(delta_nlk,
359:                         max_binom_quantile(k_vec[r], ps_row, alpha))
360:     # Avoid p=0 or 1 in later calculations
361:     p.data[p.data == 0.0] = clip_p
362:     p.data[p.data == 1.0] = 1.0 - clip_p
363:     return p, delta_nlk
364: # --------------------------------------------------------------------
365: # 2.  Weight computation
366: # --------------------------------------------------------------------
367: def _weights_and_S(
368:     p_mat: sp.csr_array,
369:     k_vec: np.ndarray,
370:     delta_nlk: int,
371:     weight_clip: float,
372:     clip_p: float,
373:     c_n_val: float,
374: ) -> Tuple[np.ndarray, np.ndarray, List[int], List[int], float]:
375:     """
376:     Compute weights w_q for n_r and m_rs, and the sum S = Σ √(c_q w_q).
377:     Weights are used to compute the noise levels σ_q so as to minimize
378:     expected likelihood loss
379:     Compute:
380:       * w_n   : vector length B
381:       * w_e   : list for every stored upper-tri cell (row parity)
382:       * idx_e : corresponding *column* indices (for CSR builder)
383:       * S_sum = Σ sqrt(c_q w_q) used in σ formula (12)
384:     """
385:     B = len(k_vec)
386:     c_e_val = delta_nlk ** 2
387:     w_n = np.zeros(B)
388:     w_e = []
389:     col_e= []
390:     row_e = []
391:     S_sum = 0.0
392:     for r in range(B):
393:         # ---- diagonal r,r (zero and non-zero alike) ---------------
394:         N_rr = n_possible(k_vec[r], k_vec[r], True)
395:         p_rr = p_mat[r, r]
396:         if p_rr < clip_p:
397:             w_rr = weight_clip
398:         else:
399:             # MSE weights
400:             #w_rr = 1.0 / N_rr
401:             # KL-based weight  w_rr = N_rr / [2 p_rr (1-p_rr)]
402:             w_rr = N_rr / (2.0 * p_rr * (1.0 - p_rr))   ### ← NEW (KL)
403:         w_rr = min(w_rr, weight_clip)
404:         # store sparse diagonal weight
405:         w_e.append(w_rr)
406:         row_e.append(r)
407:         col_e.append(r)
408:         S_sum += math.sqrt(c_e_val * w_rr)
409:         # ---- off-diagonal non-zero pairs r,s (s>r) -------------------------------
410:         for s_ptr in range(p_mat.indptr[r], p_mat.indptr[r + 1]):
411:             s = p_mat.indices[s_ptr]
412:             if s <= r:
413:                 continue
414:             p_rs = p_mat[r, s]
415:             if p_rs <= clip_p or p_rs >= 1.0 - clip_p:
416:                 w_rs = weight_clip
417:             else:
418:                 N_rs = n_possible(k_vec[r], k_vec[s], False) # type: ignore
419:                 # MSE weights
420:                 #w_rs = 1.0 / N_rs# (2 * N_rs * p_rs * (1 - p_rs))
421:                 # KL-based weight
422:                 w_rs = N_rs / (2.0 * p_rs * (1.0 - p_rs))  ### ← NEW (KL)
423:             w_rs = min(w_rs, weight_clip)
424:             # store sparse upper-tri weights
425:             w_e.append(w_rs)
426:             row_e.append(r)
427:             col_e.append(s)
428:             # add to normalization S
429:             S_sum += math.sqrt(c_e_val * w_rs)
430:         # ---- off-diagonal zero-pairs r>s ----------------------------
431:         # off diag
432:         present = set(p_mat.indices[p_mat.indptr[r] : p_mat.indptr[r+1]])
433:         for s in range(r+1, B):
434:             # only add terms from zero pairs upper diagonal pairs
435:             if (s in present) or s<=r:
436:                 continue
437:             N_rs = n_possible(k_vec[r], k_vec[s], False)
438:             S_sum += math.sqrt(c_e_val * (1/N_rs))
439:         # ---- MSE block-size weight w_n[r] -----------------------------
440:         #inter = p_mat[[r]].toarray().ravel()
441:         #inter[r] = 0.0
442:         ## ---- block-size weight w_n[r]  (MSE version)
443:         #p_row = p_mat[[r]].toarray().ravel()
444:         #p_off = np.delete(p_row, r)
445:         #w_n[r]  = k_vec[r] * (p_off ** 2 @ np.delete(k_vec, r))
446:         #p_rr    = p_row[r]
447:         #if k_vec[r] > 1:
448:         #    w_n[r] += ((2 * k_vec[r] - 1) ** 2) / (2 * k_vec[r] * (k_vec[r] - 1)) \
449:         #      * (p_rr ** 2)
450:         #if w_n[r] > weight_clip:
451:         #    w_n[r] = weight_clip
452:         # ---- block-size weight w_n[r]  (KL version) ---------------
453:         p_row = p_mat[[r]].toarray().ravel()
454:         # First sum:  2 * Σ w_rs * p_rs^2 / k^2
455:         w_nr = 0.0
456:         for s in range(B):
457:             if s == r:
458:                 # diagonal term already added
459:                 continue
460:             p_rs = p_row[s]
461:             if p_rs <= clip_p or p_rs >= 1.0 - clip_p:
462:                 continue
463:             N_rs = n_possible(k_vec[r], k_vec[s], False)
464:             w_rs = N_rs / (2.0 * p_rs * (1.0 - p_rs))
465:             w_nr += 2.0 * w_rs * (p_rs ** 2) / (k_vec[r] ** 2)
466:         # Second (diagonal) term: w_rr * c_k^2 * p_rr^2
467:         c_k = (2 * k_vec[r] - 4) / (k_vec[r] * (k_vec[r] - 1))
468:         w_nr += w_rr * (c_k ** 2) * (p_rr ** 2)
469:         if w_nr > weight_clip:
470:             w_nr = weight_clip
471:         w_n[r] = w_nr
472:         S_sum += math.sqrt(c_n_val * w_n[r])
473:     # backup in case all probs were clipped to zero 
474:     if S_sum <= 0:
475:         print("Warning: S_sum is zero, using small value to avoid division by zero.")
476:         S_sum = 1e-12
477:     return w_n, np.asarray(w_e), row_e, col_e, S_sum
478: # --------------------------------------------------------------------
479: # 3.  σ computation
480: # --------------------------------------------------------------------
481: def _compute_sigmas(
482:     w_n: np.ndarray,
483:     w_e: np.ndarray,
484:     S_sum: float,
485:     eps: float,
486:     delta: float,
487:     delta_tail: float,
488:     B: int,
489:     c_e_val: float,
490:     col_e: List[int],
491:     row_e: List[int],
492: ) -> Tuple[np.ndarray, sp.csr_array, float]:
493:     """
494:     Return vector σ_n and sparse CSR σ_e (upper-tri inc. diag).
495:     Computes the noise levels for the heterogeneous Gaussian mechanism
496:     """
497:     ### old gaussian mechanism:
498:     #R = eps**2 / (2*math.log(1.25/(delta+delta_tail)))
499:     #sigma_n = np.sqrt(1/np.sqrt(w_n*R) * S_sum)
500:     #sigma_e_vals = np.sqrt(c_e_val * w_e) * S_sum / R
501:     #sigma_e_vals = np.sqrt(np.sqrt(c_e_val / (w_e*R)) * S_sum)
502:     ### New gaussian mechanism: Balle and Wang 2018
503:     R = analytic_gauss_K(eps, delta)
504:     factor = (2 * R) ** 2 / S_sum
505:     sigma_n       = np.sqrt( np.sqrt(1.0 * w_n) * factor )
506:     sigma_e_vals  = np.sqrt( np.sqrt(c_e_val * w_e) * factor )
507:     print(f'max σ_n: {sigma_n.max():.3f}, max σ_e: {sigma_e_vals.max():.3f}')
508:     sigma_e = _upper_tri_csr(row_e, col_e, sigma_e_vals, B)
509:     return sigma_n, sigma_e, factor
510: # --------------------------------------------------------------------
511: # 4.  Factory
512: # --------------------------------------------------------------------
513: def create_sbm_noise(
514:     sbm: SBMFit,
515:     eps: float,
516:     delta: float,
517:     alpha: float,
518:     *,
519:     clip_p: float = 1e-12,
520:     weight_clip: float = 1e12,
521:     noise_type: NoiseType = "heterogeneous_gaussian",
522: ) -> "Noise":
523:     """
524:     Construct one of the three Noise objects.
525:     Steps:
526:       (1) convert counts→probabilities and compute Δ_{nlk}
527:       (2) weights  w_q  and  S = Σ√(c_q w_q)
528:       (3) σ_q  via eq. (12)
529:       (4) package into chosen Noise subclass
530:     """
531:     if sbm.directed_graph:
532:         raise NotImplementedError("undirected only")
533:     k_vec = np.asarray(sbm.block_sizes, int)
534:     B = len(k_vec)
535:     # 1) probabilities & sensitivity Δ_nlk --------------------------
536:     p_mat, delta_nlk = _prob_matrix_and_sens(
537:         sbm.block_conn, k_vec, alpha, clip_p
538:     )
539:     delta_tail = 1.0 - alpha
540:     c_e_val = delta_nlk ** 2
541:     # 2) weights & S -------------------------------------------------
542:     w_n, w_e, row_e, col_e, S_sum = _weights_and_S(
543:         p_mat, k_vec, delta_nlk, weight_clip, clip_p, c_n_val=1.0
544:     )
545:     # 3) σ’s  --------------------------------------------------------
546:     sigma_n, sigma_e, factor = _compute_sigmas(
547:         w_n=w_n, w_e=w_e, S_sum=S_sum,
548:         eps=eps, delta=delta, delta_tail=delta_tail,
549:         B=B, c_e_val=c_e_val, col_e=col_e, row_e=row_e
550:     )
551:     # -- select variant ---------------------------------------------
552:     if noise_type == "heterogeneous_gaussian":
553:         return HeterogeneousGaussNoise(
554:             fit=sbm,
555:             sigma_n=sigma_n,
556:             sigma_e=sigma_e,
557:             ### OLD gaussian mechanism:
558:             #sigma_zero_fun=lambda N_rs: np.sqrt(np.sqrt(c_e_val / (N_rs*R)) * S_sum),
559:             ### NEW gaussian mechanism:
560:             sigma_zero_fun=lambda N_rs: np.sqrt(
561:                 np.sqrt(c_e_val / N_rs) * factor      # ← updated line
562:             ),
563:             eps=eps,
564:             delta=delta,
565:             delta_tail=delta_tail,
566:             delta_nlk=delta_nlk,
567:             S_sum=S_sum,
568:             #R=R,
569:             metadata={"noise": "heterogeneous_gaussian",
570:                       "alpha": alpha,
571:                       "Delta_nlk": delta_nlk,
572:                       "delta_tail": delta_tail,
573:                       "eps": eps,
574:                       **sbm.metadata,
575:                       },
576:         )
577:     # ----- homogeneous variants share one σ ------------------------
578:     total_c = B*1.0 + (B*(B+1)//2) * c_e_val   # all cells!
579:     sigma_common = math.sqrt(total_c /
580:                              (eps**2 / (2*math.log(1.25/(delta+delta_tail)))))
581:     if noise_type == "naive_edge_count_gaussian":
582:         return NaiveEdgeCountGaussNoise(
583:             fit=sbm,
584:             sigma_n_scalar=sigma_common,
585:             sigma_e_scalar=sigma_common,
586:             sigma_n=np.full(B, sigma_common),
587:             sigma_e=sp.csr_array((B, B), dtype=float),
588:             eps=eps,
589:             delta=delta,
590:             delta_tail=delta_tail,
591:             delta_nlk=delta_nlk,
592:             metadata={"noise": "naive_edge_count_gaussian",
593:                       "sigma_common": sigma_common, **sbm.metadata},
594:         )
595:     # compute 
596:     if noise_type == "naive_degree_gaussian":
597:         return NaiveDegreeGaussNoise(
598:             fit=sbm,
599:             sigma_n_scalar=sigma_common,
600:             sigma_e_scalar=sigma_common,
601:             sigma_n=np.full(B, sigma_common),
602:             sigma_e=sp.csr_array((B, B), dtype=float),
603:             eps=eps,
604:             delta=delta,
605:             delta_tail=0.,
606:             delta_nlk=0,
607:             metadata={"noise": "naive_degree_gaussian",
608:                       "sigma_common": sigma_common,
609:                       **sbm.metadata},
610:         )
611:     raise ValueError(f"unknown noise_type {noise_type!r}")

================
File: src/sbm/post_process.py
================
  1: """
  2: Functions and classes for post-processing SBM fits to create noisy SBM fits
  3: """
  4: # --------------------------------------------------------------
  5: from typing import Callable, Tuple, Literal, Optional
  6: import numpy as np
  7: import scipy.sparse as sp
  8: from scipy.stats import norm
  9: from scipy.sparse import csr_array
 10: from typing import Callable
 11: # ------------------------------------------------------------------
 12: # Aliases
 13: PostProcessFnName = Literal['naive', 'lasso']
 14: # ------------------------------------------------------------------
 15: def naive_clamping(
 16:     n_noisy: np.ndarray,
 17:     noisy_conn: sp.csr_array,
 18:     sigma_e: sp.csr_array,
 19:     k_val: int,
 20:     sigma_zero_fun: Callable[[int], float],
 21:     rng: np.random.Generator,
 22:     *,
 23:     round_thresh: float = 0.5,
 24:     n_possible_fn: Callable[[int, int, bool], int],
 25: )-> Tuple[csr_array, np.ndarray]: 
 26:     rr, cc = noisy_conn.nonzero()
 27:     noise = rng.normal(loc=0, scale=sigma_e[rr, cc]) # type: ignore
 28:     noisy_conn.data = np.maximum(0., noisy_conn.data + noise).astype(int)
 29:     ### perform simple post-processing:
 30:     #   We have to release k anyway, so we set all block sizes to k_val.
 31:     #   This allows us to put strict bounds on the connectivity matrix.
 32:     for r, c in zip(rr, cc):
 33:         n_noisy[r] = k_val # type: ignore
 34:         n_noisy[c] = k_val # type: ignore
 35:         # ensure no negative counts
 36:         if noisy_conn[r, c] < 0: # type: ignore
 37:             noisy_conn[r, c] = 0 # type: ignore
 38:             continue
 39:         # ensure no noisy_conn-count is larger than the max possible
 40:         N = n_possible_fn(n_noisy[r], n_noisy[c], same_block=(r == c)) # type: ignore
 41:         if noisy_conn[r, c] > N: # type: ignore
 42:             noisy_conn[r, c] = N # type: ignore
 43:             continue
 44:         # round conn to int
 45:         noisy_conn[r, c] = np.round(noisy_conn[r, c]) # type: ignore
 46:     ### add noise to zero pairs
 47:     noisy_conn_lil = noisy_conn.tolil()
 48:     B = len(n_noisy)
 49:     total_zero_pair_edges = 0
 50:     for r in range(B):
 51:         present = set(noisy_conn_lil.rows[r])
 52:         for s in range(r, B):
 53:             # only add noise to zero pairs
 54:             if s in present:
 55:                 continue
 56:             N_rs = n_possible_fn(k_val, k_val, r == s)  # type: ignore
 57:             z = rng.normal(0, sigma_zero_fun(N_rs))  # noise for zero pair (r,s)
 58:             if z < round_thresh:  # round_thresh
 59:                 continue  # remain zero
 60:             m_rs = int(round(z))  # symmetric, non-negative
 61:             m_rs = min(m_rs, N_rs)
 62:             if m_rs > 0:
 63:                 total_zero_pair_edges += m_rs
 64:                 noisy_conn_lil[r, s] = m_rs # type: ignore
 65:                 if r != s:
 66:                     noisy_conn_lil[s, r] = m_rs # type: ignore
 67:     print(f"[NAIVE]    Added {total_zero_pair_edges} edges to zero pairs.") 
 68:     # ---------- finish   ------------------------------------------
 69:     conn_csr = csr_array(noisy_conn_lil, dtype=int)
 70:     conn_sym = sp.triu(conn_csr, k=0, format='csr')
 71:     conn_sym = conn_sym + conn_sym.T - sp.diags(conn_sym.diagonal())
 72:     conn_sym.data = conn_sym.data.astype(int)
 73:     noisy_conn = csr_array(conn_sym, dtype=int)
 74:     return noisy_conn, n_noisy
 75: # ------------------------------------------------------------------
 76: # utility functions for Lasso post-processing
 77: def lambda_for_activation(rho: float) -> float:
 78:     """λ so that exactly rho of zero cells survive the threshold."""
 79:     lam = norm.isf(rho / 2.0) # two-sided tail
 80:     return float(lam)
 81: # ------------------------------------------------------------------
 82: def constrained_lasso(
 83:     n_noisy: np.ndarray,
 84:     noisy_conn: sp.csr_array,
 85:     sigma_rs: sp.csr_array,
 86:     k_val: int,
 87:     sigma_zero_fun: Callable[[int], float],
 88:     rng: np.random.Generator,
 89:     *,
 90:     round_thresh: float = 0.5,
 91:     lam: Optional[float] = None,
 92:     n_possible_fn: Callable[[int, int, bool], int],
 93: ) -> Tuple[sp.csr_array, np.ndarray]:
 94:     """
 95:     L1-constrained projection row-by-row.
 96:     Parameters
 97:     ----------
 98:     conn_ut        : noisy counts, CSR, **upper triangle only**.
 99:     sigma_rs       : matching σ_rs for the same nnz pattern.
100:     k_val          : released block size k (all blocks are k or k+1).
101:     sigma_zero_fun : N_rs ↦ σ for a zero entry (uses new weight scheme).
102:     rng            : np.random.Generator.
103:     round_thresh   : magnitude that rounds to 1 (default .5).
104:     lam            : λ in soft-threshold  x ← sign(x)·max(|x|−λσ²,0).
105:     n_possible_fn  : callable (k_r,k_s,r==s) → N_rs.
106:     """
107:     B = noisy_conn.shape[0]
108:     noisy_conn_lil = noisy_conn.tolil(copy=True)          # efficient insertion
109:     sigma = sigma_rs.tolil(copy=False)
110:     if lam is None:
111:         # compute lambda based on desired proportion of active block pairs
112:         # assume that the average block connects to 5 others
113:         rho = .1 #5 * B / (B * (B - 1)/2)  
114:         lam = lambda_for_activation(rho)  # default λ for 5% of zero pairs
115:     total_added = 0
116:     for r in range(B):
117:         ### set block sizes to k_val
118:         #   We have to release k anyway, so we set all block sizes to k_val.
119:         #   This allows us to put strict bounds on the connectivity matrix.
120:         n_noisy[r] = k_val
121:         # check where non-zero counts
122:         present = {c: i for i, c in enumerate(noisy_conn_lil.rows[r])}
123:         # ---------- a) process existing nnz ------------------------
124:         for idx, c in enumerate(noisy_conn_lil.rows[r]):
125:             # account for upper-triangle only
126:             if c < r:
127:                 continue
128:             val   = noisy_conn_lil.data[r][idx]
129:             sig   = float(sigma[r, c]) # type: ignore
130:             # lasso regression with soft thresholding and clamping
131:             N_rs  = n_possible_fn(k_val, k_val, r == c)
132:             lasso_shrink = np.sign(val) * max(abs(val) - lam * sig, 0)
133:             new   = min(max(round(lasso_shrink), 0), N_rs)
134:             noisy_conn_lil.data[r][idx] = int(new)
135:         # ---------- b) add noise to zero cells (upper-tri only) ----
136:         for s in range(r, B):
137:             if s in present or s < r:                 # already processed nnz
138:                 continue
139:             N_rs = n_possible_fn(k_val, k_val, r == s)
140:             sig0 = sigma_zero_fun(N_rs)
141:             z = rng.normal(0.0, sig0)
142:             if abs(z) < round_thresh:
143:                 continue
144:             # lasso regression with soft thresholding
145:             lasso_shrink = np.sign(z) * max(abs(z) - lam * sig0, 0)
146:             m = min(round(lasso_shrink), N_rs)
147:             if m <=0:
148:                 continue
149:             noisy_conn_lil[r, s] = m
150:             if r != s:
151:                 noisy_conn_lil[s, r] = m
152:             total_added += m
153:     # ---------- finish   ------------------------------------------
154:     conn_csr = csr_array(noisy_conn_lil, dtype=int)
155:     conn_sym = sp.triu(conn_csr, k=0, format='csr')
156:     conn_sym = conn_sym + conn_sym.T - sp.diags(conn_sym.diagonal())
157:     conn_sym.data = conn_sym.data.astype(int)
158:     print(f"[LASSO]    Added {total_added} edges to previously-zero pairs")
159:     return conn_sym, n_noisy

================
File: src/sbm/stopping_criteria.py
================
 1: """ 
 2: Stopping criteria for the MCMC algorithm in the Stochastic Block Model (SBM).
 3: """
 4: class StoppingCriteria:
 5:     """
 6:     Base class for stopping criteria in the MCMC algorithm.
 7:     """
 8:     def __init__(self, stopping_configs: dict):
 9:         pass
10:     def should_stop(self, iteration: int, current_ll: float) -> bool:
11:         """
12:         Check if the stopping criteria are met.
13:         :param iteration: Current iteration number.
14:         :param current_ll: Current log-likelihood value.
15:         :return: True if the algorithm should stop, False otherwise.
16:         """
17:         raise NotImplementedError("Subclasses should implement this method.")

================
File: src/tests/dp/test_noise.py
================
  1: # ---------------------------------------------------------------------
  2: # tests/test_dp_noise.py
  3: # ---------------------------------------------------------------------
  4: import numpy as np
  5: import scipy.sparse as sp
  6: import pytest
  7: from sbm.io import SBMFit
  8: from sbm.noisy_fit import (
  9:     create_sbm_noise,
 10:     HeterogeneousGaussNoise,
 11:     NaiveDegreeGaussNoise,
 12:     NaiveEdgeCountGaussNoise,
 13: )
 14: from sbm.sampling import sample_sbm_graph_from_fit
 15: # ---------------------------------------------------------------------
 16: # helpers
 17: # ---------------------------------------------------------------------
 18: def _make_sbm(block_sizes, P):
 19:     """
 20:     Create an SBMFit with integer edge counts according to prob-matrix P.
 21:     P must be square len(block_sizes) × len(block_sizes), symmetric.
 22:     """
 23:     k_vec = np.array(block_sizes, int)
 24:     B = len(k_vec)
 25:     data, rows, cols = [], [], []
 26:     for r in range(B):
 27:         for s in range(r, B):
 28:             N = k_vec[r] * k_vec[s] if r != s else k_vec[r] * (k_vec[r] - 1) // 2
 29:             m = int(round(P[r, s] * N))
 30:             if m > 0:
 31:                 rows.append(r); cols.append(s); data.append(m)
 32:     M = sp.csr_array((data, (rows, cols)), shape=(B, B))
 33:     M = M + M.T - sp.diags(M.diagonal())
 34:     return SBMFit(
 35:         block_sizes=list(block_sizes),
 36:         block_conn=M,
 37:         directed_graph=False,
 38:         neg_loglike=-1.0,
 39:         metadata={},
 40:     )
 41: def _extract_sigma_e(noise_obj):
 42:     """Return 1-D array of σ_e values stored (heterogeneous variant)."""
 43:     if isinstance(noise_obj, HeterogeneousGaussNoise):
 44:         return noise_obj.sigma_e.data
 45:     raise ValueError
 46: # ---------------------------------------------------------------------
 47: # parametrisation -----------------------------------------------------
 48: EPS, DELTA, ALPHA = 1.0, 1e-6, 0.999
 49: RNG = np.random.default_rng(0)
 50: # ---------------------------------------------------------------------
 51: # 1. factory returns correct subclass ---------------------------------
 52: @pytest.mark.parametrize("ntype,cls", [
 53:     ("heterogeneous_gaussian",       HeterogeneousGaussNoise),
 54:     ("naive_degree_gaussian",  NaiveDegreeGaussNoise),
 55:     ("naive_edge_count_gaussian", NaiveEdgeCountGaussNoise),
 56: ])
 57: def test_factory_returns(ntype, cls):
 58:     sbm = _make_sbm([3, 3], np.zeros((2, 2)))
 59:     nz = create_sbm_noise(sbm, EPS, DELTA, ALPHA, noise_type=ntype)
 60:     assert isinstance(nz, cls)
 61: # ---------------------------------------------------------------------
 62: # 2. hetero σ_e differ when p differs ---------------------------------
 63: def test_heterogeneous_noise_varies():
 64:     P = np.array([[0.2, 0.9, 0.05],
 65:                   [0.9, 0.2, 0.05],
 66:                   [0.05,0.05, 0.01]])
 67:     sbm = _make_sbm([3, 3, 3], P)
 68:     oz  = create_sbm_noise(sbm, EPS, DELTA, ALPHA, noise_type="heterogeneous_gaussian")
 69:     sig = _extract_sigma_e(oz)
 70:     assert len(np.unique(sig)) > 1, "σ_e should vary for different p_rs"
 71: # ---------------------------------------------------------------------
 72: # 3. hetero σ_e identical when all p equal ----------------------------
 73: def test_heterogeneous_noise_equal():
 74:     P = np.full((3, 3), 0.3)
 75:     sbm = _make_sbm([3, 3, 3], P)
 76:     oz  = create_sbm_noise(sbm, EPS, DELTA, ALPHA,
 77:                            noise_type="heterogeneous_gaussian")
 78:     sig = _extract_sigma_e(oz)
 79:     print(f'sigma_e: {sig}')
 80:     diag = sig[[0, 4, 8]]  # diagonal σ’s
 81:     # diagonal σ’s should all be identical.
 82:     # Account for the fact that only upper-tri is stored.
 83:     assert np.allclose(diag, diag[0])
 84:     # … off-diagonals identical to each other …
 85:     off  = sig[[1, 2, 5]]
 86:     assert np.allclose(off, off[0])
 87:     # … but OFF ≠ DIAG because N_rr ≠ N_rs
 88:     assert not np.allclose(diag[0], off[0])
 89: # ---------------------------------------------------------------------
 90: # 4. naive σ scalars are equal for every coord ------------------------
 91: @pytest.mark.parametrize("ntype", ["naive_degree_gaussian",
 92:                                    "naive_edge_count_gaussian"])
 93: def test_naive_sigma_equal(ntype):
 94:     P = np.array([[0.4, 0.4],
 95:                   [0.4, 0.4]])
 96:     sbm = _make_sbm([4, 4], P)
 97:     nz  = create_sbm_noise(sbm, EPS, DELTA, ALPHA, noise_type=ntype)
 98:     assert np.all(nz.sigma_n == nz.sigma_n[0])
 99:     assert nz.sigma_n_scalar == nz.sigma_e_scalar # type: ignore
100: # ---------------------------------------------------------------------
101: # 5. zero & one probabilities handled (no inf / NaN) ------------------
102: @pytest.mark.parametrize("pdiag,poff", [(0.0, 0.0), (1.0, 0.0),
103:                                         (0.0, 1.0), (1.0, 1.0)])
104: def test_zero_one_probabilities(pdiag, poff):
105:     P = np.array([[pdiag, poff],
106:                   [poff,  pdiag]])
107:     sbm = _make_sbm([3, 3], P)
108:     nz  = create_sbm_noise(sbm, EPS, DELTA, ALPHA,
109:                            noise_type="heterogeneous_gaussian")
110:     assert not np.isnan(nz.sigma_n).any(), \
111:         f'sigma_n should not contain NaN, got {nz.sigma_n}'
112:     sig = _extract_sigma_e(nz)
113:     assert not np.isnan(sig).any() and not np.isinf(sig).any(),\
114:         f'sigma_e should not contain NaN or inf, got {sig}'
115: # ---------------------------------------------------------------------
116: # 6. big blocks memory usage (no excessive RAM) -----------------------
117: def test_big_blocks_memory():
118:     B = 300
119:     k = 3
120:     sizes = [k] * B
121:     P = np.full((B, B), 0.1)
122:     np.fill_diagonal(P, 0.2)
123:     sbm = _make_sbm(sizes, P)          # builds sparse counts
124:     nz = create_sbm_noise(sbm, 1.0, 1e-6, 0.999,
125:                           noise_type="heterogeneous_gaussian"
126:                           )
127:     # should finish < 1 s and < 200 MB RAM
128: # ---------------------------------------------------------------------
129: # 7. sampling integrity (no counts exceed max possible) ---------------
130: def test_sample_integrity():
131:     P = np.array([[0.8, 0.3],
132:                   [0.3, 0.05]])
133:     sbm   = _make_sbm([10, 20], P)
134:     noise = create_sbm_noise(sbm, EPS, DELTA, ALPHA,
135:                              noise_type="heterogeneous_gaussian")
136:     sbm_noisy = noise.sample_sbm_fit(RNG)
137:     # check sizes positive
138:     assert min(sbm_noisy.block_sizes) >= 1
139:     # check counts ≤ possible
140:     k = sbm_noisy.block_sizes
141:     conn = sbm_noisy.block_conn
142:     rr, cc = conn.nonzero()
143:     for r, c in zip(rr, cc):
144:         N = k[r] * k[c] if r != c else k[r] * (k[r]-1) // 2
145:         assert conn[r, c] <= N
146:     # can we sample a surrogate graph?
147:     g = sample_sbm_graph_from_fit(sbm_noisy, RNG)
148:     assert g.adjacency.shape[0] == sum(k)
149:     # undirected check
150:     assert (g.adjacency != g.adjacency.T).nnz == 0

================
File: src/tests/dp/test_post_processing.py
================
  1: """
  2: Unit‑tests for sbm.post_process.constrained_lasso
  3: ------------------------------------------------
  4: The tests focus exclusively on the *post‑processing* step and therefore
  5: construct tiny synthetic inputs instead of going through the full
  6: `HeterogeneousGaussNoise.sample_sbm_fit` pipeline.
  7: The invariants we check are:
  8:   1. No negative edge counts are returned.
  9:   2. All counts are *integers* and *symmetric* (upper‑triangle mirrored).
 10:   3. Every count is <= the maximum possible edges
 11:      N_rs = k_r*k_s for r≠s,  k_r*(k_r−1)/2 for r=s,  where every k_r == k_val.
 12:   4. The routine overwrites all released block sizes with `k_val`.
 13: Two deterministic corner‑case tests are followed by a stochastic
 14: property test that runs 50 random scenarios; this should still complete
 15: in well under 100 ms.
 16: """
 17: import numpy as np
 18: import scipy.sparse as sp
 19: import pytest
 20: # ---------------------------------------------------------------------
 21: # system under test
 22: # ---------------------------------------------------------------------
 23: from sbm.post_process import constrained_lasso
 24: from sbm.noisy_fit import n_possible  # helper already used by the library
 25: # ---------------------------------------------------------------------
 26: # helpers
 27: # ---------------------------------------------------------------------
 28: def _csr_symmetric_from_dense(mat: np.ndarray) -> sp.csr_array:
 29:     """Return *exactly* the upper‑triangle incl. diagonal as CSR."""
 30:     r, c = np.triu_indices(mat.shape[0])
 31:     data = mat[r, c]
 32:     nz_mask = data != 0
 33:     return sp.csr_array((data[nz_mask], (r[nz_mask], c[nz_mask])), shape=mat.shape)
 34: def _make_sigma_rs(pattern: sp.csr_array, *, sigma: float = 1.0) -> sp.csr_array:
 35:     """Return a symmetric σ matrix that shares *pattern*'s sparsity."""
 36:     return sp.csr_array((np.full_like(pattern.data, sigma, dtype=float), pattern.indices, pattern.indptr), shape=pattern.shape)
 37: RNG = np.random.default_rng(0)
 38: SIGMA_ZERO = lambda N: 1.0  # simple constant σ for zero pairs
 39: # ---------------------------------------------------------------------
 40: # 1. deterministic corner‑cases
 41: # ---------------------------------------------------------------------
 42: def test_negative_and_too_large_values_are_clamped():
 43:     """Negative counts become zero; overly large counts are capped at N_rs."""
 44:     k_val = 3
 45:     B = 2
 46:     # construct noisy_conn with impossible values
 47:     dense = np.array([
 48:         [ -2, 10],   # −2 on diagonal 0, 10 off‑diag
 49:         [  0,  5]    # 5 on diag 1 (will be ignored, only upper‑tri processed)
 50:     ], dtype=float)
 51:     noisy_conn = _csr_symmetric_from_dense(dense)
 52:     sigma_rs   = _make_sigma_rs(noisy_conn, sigma=0.5)  # arbitrary σ
 53:     n_noisy    = np.array([k_val, k_val]) + 1  # wrong on purpose
 54:     conn_out, n_out = constrained_lasso(
 55:         n_noisy=n_noisy,
 56:         noisy_conn=noisy_conn,
 57:         sigma_rs=sigma_rs,
 58:         k_val=k_val,
 59:         sigma_zero_fun=SIGMA_ZERO,
 60:         rng=RNG,
 61:         lam=1.0,
 62:         n_possible_fn=n_possible,
 63:     )
 64:     conn_dense = conn_out.toarray()
 65:     # invariants ------------------------------------------------------
 66:     assert (conn_dense >= 0).all()
 67:     assert np.issubdtype(conn_dense.dtype, np.integer)
 68:     # diag 0: max possible = 3*2/2 = 3 ; off‑diag: 3*3 = 9
 69:     assert conn_dense[0, 0] <= 3
 70:     assert conn_dense[0, 1] <= 9
 71:     # symmetry
 72:     assert conn_dense[0, 1] == conn_dense[1, 0]
 73:     # block sizes all set to k_val
 74:     assert (n_out == k_val).all()
 75: def test_zero_matrix_remains_valid():
 76:     """All‑zero input should stay zero (aside from possible added edges)."""
 77:     k_val = 4
 78:     B = 3
 79:     noisy_conn = sp.csr_array((B, B), dtype=float)
 80:     sigma_rs   = sp.csr_array((B, B), dtype=float)
 81:     n_noisy    = np.ones(B, dtype=int) * k_val
 82:     conn_out, _ = constrained_lasso(
 83:         n_noisy=n_noisy,
 84:         noisy_conn=noisy_conn,
 85:         sigma_rs=sigma_rs,
 86:         k_val=k_val,
 87:         sigma_zero_fun=SIGMA_ZERO,
 88:         rng=RNG,
 89:         lam=0.0,          # turn off shrinkage so only zero‑pair addition matters
 90:         round_thresh=10**10,  # large threshold ⇒ keep zeros
 91:         n_possible_fn=n_possible,
 92:     )
 93:     print(noisy_conn.toarray())
 94:     print(conn_out.toarray())
 95:     assert conn_out.nnz == 0, "No edges should be added when threshold is huge"
 96:     assert conn_out.shape == (B, B)
 97: # ---------------------------------------------------------------------
 98: # 2. stochastic property test
 99: # ---------------------------------------------------------------------
100: @pytest.mark.parametrize("seed", range(50))
101: def test_randomised_invariants(seed: int):
102:     """For many random inputs the core invariants must always hold."""
103:     rng = np.random.default_rng(seed)
104:     B      = rng.integers(2, 6)            # 2 ≤ B ≤ 5
105:     k_val  = int(rng.integers(2, 6))       # 2 ≤ k ≤ 5
106:     # generate random noisy counts in [‑5, 2*N_rs]
107:     dense  = np.zeros((B, B), dtype=float)
108:     for r in range(B):
109:         for s in range(r, B):
110:             N_rs = n_possible(k_val, k_val, r == s)
111:             dense[r, s] = rng.integers(-5, 2*N_rs + 1)
112:     noisy_conn = _csr_symmetric_from_dense(dense)
113:     sigma_rs   = _make_sigma_rs(noisy_conn, sigma=1.0)
114:     n_noisy    = rng.integers(1, k_val + 3, size=B)  # arbitrary wrong values
115:     conn_out, n_out = constrained_lasso(
116:         n_noisy=n_noisy,
117:         noisy_conn=noisy_conn,
118:         sigma_rs=sigma_rs,
119:         k_val=k_val,
120:         sigma_zero_fun=SIGMA_ZERO,
121:         rng=rng,
122:         lam=1.0,
123:         n_possible_fn=n_possible,
124:     )
125:     # ----- checks ----------------------------------------------------
126:     conn_dense = conn_out.toarray()
127:     assert (conn_dense >= 0).all(), "negative counts returned"
128:     assert np.issubdtype(conn_dense.dtype, np.integer), "counts not integer"
129:     assert np.allclose(conn_dense, conn_dense.T), "matrix not symmetric"
130:     for r in range(B):
131:         for s in range(r, B):
132:             N_rs = n_possible(k_val, k_val, r == s)
133:             assert conn_dense[r, s] <= N_rs, "count exceeds N_rs"
134:     # every block size released as k
135:     assert (n_out == k_val).all()

================
File: src/tests/mcmc/likelihood_test.py
================
  1: # tests/test_likelihood.py
  2: """
  3: End-to-end tests for the Bernoulli likelihood calculators.
  4:  * We create a tiny 4-node undirected graph with two blocks.
  5:  * We compare every Δℓ returned by the incremental code against the
  6:    ground-truth global likelihood difference.
  7: """
  8: from __future__ import annotations
  9: from collections import Counter
 10: from typing import Tuple, Dict
 11: import numpy as np
 12: #np.float_ = np.float64  # ensure float64 is used
 13: import pytest
 14: from scipy.sparse import csr_array
 15: from sbm.likelihood import (
 16:     compute_global_bernoulli_ll,
 17:     LikelihoodCalculator
 18: )
 19: from sbm.block_data import BlockData
 20: from sbm.graph_data import GraphData
 21: from sbm.block_change_proposers import NodeSwapProposer 
 22: ##############################################################################
 23: # Fixtures
 24: ##############################################################################
 25: @pytest.fixture(scope="module")
 26: def four_node_example() -> Tuple[BlockData, GraphData, Dict[int, int]]:
 27:     """
 28:     Graph:
 29:         0──1   Block 0: {0,1}      Edges: (0,1)
 30:         │  │   Block 1: {2,3}              (2,3)
 31:         2──3                              (0,2) (1,3)
 32:     The matrix is symmetrical (undirected, no loops).
 33:     """
 34:     adj = np.zeros((4, 4), dtype=int)
 35:     edges = [(0, 1), (2, 3), (0, 2), (1, 3)]
 36:     for u, v in edges:
 37:         adj[u, v] = 1
 38:         adj[v, u] = 1  # symmetric
 39:     adjacency = csr_array(adj)
 40:     blocks = {0: 0, 1: 0, 2: 1, 3: 1}  # Node to block mapping
 41:     graph_data: GraphData = GraphData(adjacency_matrix=adjacency, directed=False)
 42:     return BlockData(graph_data=graph_data, initial_blocks=blocks), graph_data, blocks
 43: ##############################################################################
 44: # Tests
 45: ##############################################################################
 46: def test_edge_counter(four_node_example):
 47:     """`_compute_edge_counts_between_node_and_blocks` returns correct counts."""
 48:     block_data, *_ = four_node_example
 49:     change_proposer = NodeSwapProposer(block_data)
 50:     counts = change_proposer._compute_edge_counts_between_node_and_blocks(node=0)
 51:     # Node 0 is linked to node-1 (block-0) and node-2 (block-1) → {0:1, 1:1}
 52:     assert counts == Counter({0: 1, 1: 1})
 53: def test_swap_same_block_zero_delta(four_node_example):
 54:     """
 55:     Swapping two nodes that are *already* in the same block must leave the
 56:     likelihood unchanged.
 57:     """
 58:     block_data, *_ = four_node_example
 59:     swap_proposer = NodeSwapProposer(block_data)
 60:     calc = LikelihoodCalculator(block_data)
 61:     # attempt to swap nodes 0 and 2
 62:     swap = [(0, block_data.blocks[1]), (1, block_data.blocks[0])]
 63:     swap, delta_e, delta_n = swap_proposer.propose_change(swap)
 64:     delta = calc.compute_delta_nll(delta_e=delta_e, delta_n=delta_n)
 65:     assert delta == pytest.approx(0.0, abs=1e-6)
 66: def test_delta_ll_matches_global_recompute(four_node_example):
 67:     """
 68:     delta ll from the incremental calculator must equal the brute-force recomputed
 69:     likelihood difference after the swap (0 ↔ 2).
 70:     """
 71:     block_data_old, graph_data, blocks_old = four_node_example
 72:     adjacency = graph_data.adjacency
 73:     swap_proposer = NodeSwapProposer(block_data_old)
 74:     calc = LikelihoodCalculator(block_data_old)
 75:     # ---------- perform swap 0 ↔ 2 -----------------------------------------
 76:     blocks_new = blocks_old.copy()
 77:     blocks_new[0], blocks_new[2] = blocks_new[2], blocks_new[0]
 78:     block_data_new = BlockData(
 79:         graph_data=GraphData(adjacency_matrix=adjacency, directed=False),
 80:         initial_blocks=blocks_new
 81:     )
 82:     ll_old = compute_global_bernoulli_ll(block_data_old)
 83:     ll_new = compute_global_bernoulli_ll(block_data_new)
 84:     expected_delta = ll_new - ll_old
 85:     swap = [(0, block_data_old.blocks[2]), (2, block_data_old.blocks[0])]
 86:     swap, delta_e, delta_n = swap_proposer.propose_change(swap)
 87:     delta_calc = calc.compute_delta_nll(delta_e=delta_e, delta_n=delta_n)
 88:     msg = (
 89:         f"Failed on swap (0 ↔ 2) with blocks {blocks_old} → {blocks_new}\n"
 90:         f"delta_e: {delta_e}\n"
 91:     )
 92:     assert delta_calc == pytest.approx(expected_delta, rel=1e-6, abs=1e-6), msg
 93: def test_delta_edge_counts_consistency(four_node_example):
 94:     """
 95:     The raw `delta_e` returned by `_compute_delta_edge_counts_swap` should turn
 96:     the old connectivity into the new one *exactly* on every affected (r,s).
 97:     """
 98:     block_data_old, graph_data, blocks_old = four_node_example
 99:     adjacency = graph_data.adjacency
100:     swap_proposer = NodeSwapProposer(block_data_old)
101:     calc = LikelihoodCalculator(block_data_old)
102:     i, j = 0, 2  # the same swap as above
103:     proposed_changes = [(i, block_data_old.blocks[j]), (j, block_data_old.blocks[i])]
104:     delta_e = swap_proposer._compute_delta_edge_counts(
105:         proposed_changes= proposed_changes
106:     )
107:     conn_expected = block_data_old.block_connectivity.copy()
108:     for (r, s), de in delta_e.items():
109:         conn_expected[r, s] += de
110:     # Ground-truth connectivity after the swap
111:     blocks_new = blocks_old.copy()
112:     blocks_new[i], blocks_new[j] = blocks_new[j], blocks_new[i]
113:     block_data_new = BlockData(
114:         graph_data=GraphData(adjacency_matrix=adjacency, directed=False),
115:         initial_blocks=blocks_new
116:     )
117:     for (r, s), de in delta_e.items():
118:         assert (
119:             conn_expected[r, s] == block_data_new.block_connectivity[r, s]
120:         ), f"Mismatch on block pair ({r},{s})"
121: ###################################################
122: ### Randomized tests
123: ###################################################
124: def _er_graph_csr(n: int, p: float, *, seed: int) -> csr_array:
125:     """Undirected G(n,p) without self-loops, returned as CSR matrix."""
126:     rng = np.random.default_rng(seed)
127:     upper = rng.random((n, n)) < p                           # boolean mask
128:     upper = np.triu(upper, k=1)                              # keep strict upper
129:     adj = upper | upper.T                                    # symmetrise
130:     return csr_array(adj.astype(np.int8))
131: def _random_equal_blocks(n: int, block_size: int, *, seed: int) -> dict[int, int]:
132:     """Random permutation of vertices into equal-size blocks."""
133:     rng = np.random.default_rng(seed)
134:     perm = rng.permutation(n)
135:     blocks: dict[int, int] = {}
136:     for b in range(n // block_size):
137:         for v in perm[b * block_size : (b + 1) * block_size]:
138:             blocks[v] = b
139:     return blocks
140: def _pick_two_different_blocks(rng: np.random.Generator, blocks: dict[int, int]):
141:     n = len(blocks)
142:     i = rng.choice(n, size=1)[0]
143:     j = rng.choice(n-1, size=1)[0]
144:     if j >= i:
145:         j += 1
146:     return i, j
147: def _single_swap_calc_vs_bruteforce(
148:     graph_data: GraphData,
149:     blocks: dict[int, int],
150:     rng: np.random.Generator,
151:     tol: float = 1e-6,
152:     experiment_index: int = 0
153: ):
154:     """One random swap and check incremental delta ll against brute force."""
155:     # choose vertices in different blocks
156:     i, j = _pick_two_different_blocks(rng, blocks)
157:     # incremental path -------------------------------------------------
158:     block_data = BlockData(graph_data=graph_data, initial_blocks=blocks)
159:     print(block_data.blocks)
160:     swap_proposer = NodeSwapProposer(block_data)
161:     calc = LikelihoodCalculator(block_data)
162:     swap_instr = [(i, blocks[j]), (j, blocks[i])]
163:     _, delta_e, delta_n = swap_proposer.propose_change(swap_instr)
164:     delta_ll = calc.compute_delta_nll(delta_e=delta_e, delta_n=delta_n)
165:     # brute-force path -------------------------------------------------
166:     nll_before = -compute_global_bernoulli_ll(block_data)
167:     new_blocks = blocks.copy()
168:     new_blocks[i], new_blocks[j] = new_blocks[j], new_blocks[i]
169:     block_data_after = BlockData(graph_data=graph_data, initial_blocks=new_blocks)
170:     nll_after = -compute_global_bernoulli_ll(block_data_after)
171:     delta_brute = nll_after - nll_before
172:     # compute the delta_e in the brute-force way
173:     # only storing non-zero deltas in upper triangular matrix
174:     delta_e_brute = block_data_after.block_connectivity - block_data.block_connectivity
175:     delta_e_brute = {
176:         (r, s): de for (r, s), de in zip(
177:             np.argwhere(delta_e_brute != 0),
178:             delta_e_brute[delta_e_brute != 0]
179:         )
180:         if r <= s
181:     }
182:     # comparison and print informatino in case of failure
183:     msg = (
184:         f"Failed on experiment {experiment_index}"
185:         f"\nGraph: {graph_data.adjacency.toarray()}"
186:         f"\nBlocks: {blocks}"
187:         f"\nswap:         {i} <-> {j} (blocks {blocks[i]} <-> {blocks[j]})"
188:         f"\ndelta_e:   {delta_e}"
189:         f"\ndelta_e_brute:   {delta_e_brute}"
190:         f"\ndelta_inc:    {delta_ll:.12g}"
191:         f"\ndelta_brute:  {delta_brute:.12g}"
192:     )
193:     assert delta_ll == pytest.approx(delta_brute, rel=tol, abs=tol), msg
194: def test_delta_ll_random_swaps_er():
195:     """100 random swaps on independent ER-20 graph must all match brute force delta ll."""
196:     for index in range(100):
197:         n, p, b = 20, 0.1, 2
198:         rng = np.random.default_rng(1)
199:         adj = _er_graph_csr(n, p, seed=42)
200:         graph = GraphData(adjacency_matrix=adj, directed=False)
201:         blocks = _random_equal_blocks(n, block_size=b, seed=2)
202:         _single_swap_calc_vs_bruteforce(graph_data=graph,
203:                                         blocks=blocks,
204:                                         rng=rng,
205:                                         experiment_index=index,
206:                                         tol=1e-6
207:                                         )

================
File: src/tests/mcmc/planted_partition_tests.py
================
 1: # src/tests/test_regressions.py
 2: """
 3: Targeted regression tests for issues uncovered in the planted‐partition script.
 4: * size-1 blocks must not crash likelihood computation
 5: * Δ-dicts must use *matrix indices*, not block-IDs
 6: """
 7: import numpy as np
 8: import pytest
 9: from scipy.sparse import csr_array
10: from sbm.block_data import BlockData
11: from sbm.likelihood import compute_global_bernoulli_ll
12: from sbm.block_change_proposers import NodeSwapProposer
13: from sbm.block_data import BlockData
14: from sbm.graph_data import GraphData
15: # -------------------------------------------------------------------
16: # 1. size-1 diagonal must be ignored (or handled gracefully)
17: # -------------------------------------------------------------------
18: @pytest.mark.parametrize("singletons", [1, 3])
19: def test_singleton_blocks_allowed(singletons):
20:     """
21:     A partition containing blocks of size 1 must not raise or return NaN.
22:     """
23:     n = 6
24:     # make a path graph (any sparse graph works)
25:     rows = np.arange(n-1)
26:     cols = rows + 1
27:     data = np.ones(n-1, dtype=int)
28:     A = csr_array((data, (rows, cols)), shape=(n, n))
29:     A = A + A.T
30:     # put the first `singletons` nodes into their own blocks
31:     blocks = {v: v if v < singletons else singletons for v in range(n)}
32:     bd = BlockData(
33:         initial_blocks=blocks,
34:         graph_data=GraphData(adjacency_matrix=A, directed=False)
35:     )
36:     ll = compute_global_bernoulli_ll(bd)
37:     assert np.isfinite(ll), "likelihood should be finite even with size-1 blocks"
38: # -------------------------------------------------------------------
39: # 2. Δ-dicts must reference matrix indices, not block-IDs
40: # -------------------------------------------------------------------
41: def test_delta_keys_are_matrix_indices():
42:     """
43:     When block IDs are non-contiguous (e.g. {0,10}), the delta_e keys
44:     must still be *matrix indices* (0 or 1), otherwise the likelihood
45:     updater crashes with an IndexError.
46:     """
47:     # two blocks with ids 0 and 10, one edge across
48:     adj = csr_array([[0,1],[1,0]])
49:     blocks = {0: 0, 1: 10}
50:     bd = BlockData(
51:         initial_blocks=blocks,
52:         graph_data=GraphData(adjacency_matrix=adj, directed=False)
53:     )
54:     proposer = NodeSwapProposer(bd)
55:     swap = [(0, 10)]  # move node 0 to block 10 -> will create a singleton & trigger Δ
56:     _, delta_e, _ = proposer.propose_change(swap)
57:     # the only valid matrix indices are 0 and 1
58:     valid = {0,1}
59:     for (r, s) in delta_e:
60:         assert r in valid and s in valid, (
61:             "delta_e must use matrix indices (0..B-1), "
62:             "not raw block IDs"
63:         )

================
File: src/tests/mcmc/test_block_assigner.py
================
  1: """PyTest suites for structural block‑model code.
  2: These unit tests focus on two invariants that *must* hold for the current
  3: pipeline:
  4: 1. **MetisBlockAssigner should only emit blocks whose sizes are either
  5:    `min_block_size` or `min_block_size + 1`.**  (Because the assigner first
  6:    builds blocks of exactly `min_block_size` vertices and then distributes any
  7:    leftovers one‑by‑one.)
  8: 2. **A SWAP move in the MCMC sampler must leave every block size unchanged.**
  9: The tests rely only on public APIs plus `_attempt_move`, which is part of the
 10: MCMC sampler’s stable interface (it is used by `fit` internally).  If the
 11: names or module paths differ in your codebase, tweak the imports at the top of
 12: each file – the assertions themselves should stay valid.
 13: Run with::
 14:     pytest -q tests/
 15: """
 16: # ──────────────────────────────────────────────────────────────────────────────
 17: # tests/test_block_assigner.py
 18: # ──────────────────────────────────────────────────────────────────────────────
 19: import networkx as nx
 20: import numpy as np
 21: import pytest
 22: # Adjust the import path to wherever MetisBlockAssigner lives in your project
 23: from sbm.block_assigner import MetisBlockAssigner
 24: from sbm.block_assigner import ProNEAndConstrKMeansAssigner
 25: from sbm.graph_data import gd_from_networkx
 26: @pytest.mark.parametrize(
 27:     "num_nodes,num_blocks,min_block_size,edge_p",
 28:     [
 29:         (97, 10, 8, 0.05),
 30:         (50, 5, 6, 0.10),
 31:         (23, 4, 5, 0.30),
 32:         (128, 16, 7, 0.02),
 33:     ],
 34: )
 35: def test_metis_block_sizes_are_balanced(num_nodes, num_blocks, min_block_size, edge_p):
 36:     """The initial partition must use only *min* and *min+1* sized blocks."""
 37:     G = nx.erdos_renyi_graph(
 38:             n=num_nodes,
 39:             p=edge_p,
 40:             seed=1,
 41:             directed=False
 42:         )
 43:     graph_data = gd_from_networkx(G)
 44:     assigner = MetisBlockAssigner(
 45:         graph_data=graph_data,
 46:         num_blocks=num_blocks,
 47:         min_block_size=min_block_size,
 48:         rng=np.random.default_rng(42),
 49:     )
 50:     block_data = assigner.compute_assignment()
 51:     # ensure that block_sizes correspond to 
 52:     # Ensure every vertex received exactly one label
 53:     assert len(block_data.blocks) == num_nodes
 54:     # Compute block‑size histogram
 55:     _, counts = np.unique(
 56:         list(block_data.blocks.values()),
 57:         return_counts=True
 58:         )
 59:     # All block sizes must be either min_block_size or min_block_size+1
 60:     assert (counts >= min_block_size).all(), \
 61:         (
 62:             "MetisBlockAssigner produced illegal block sizes: "
 63:             f"{sorted(set(counts))}. Expected larger than {min_block_size}."
 64:         )
 65:     # The partition must contain exactly *num_blocks* non‑empty blocks.
 66:     assert len(counts) == num_blocks
 67: def test_ProNEKMeans_block_sizes_are_balanced():
 68:     """The ProNEKMeans assigner must also use only *min* and *min+1* sized blocks."""
 69:     num_nodes = 100
 70:     min_block_size = 8
 71:     num_blocks = num_nodes // min_block_size
 72:     edge_p = 0.05
 73:     G = nx.erdos_renyi_graph(
 74:             n=num_nodes,
 75:             p=edge_p,
 76:             seed=1,
 77:             directed=False
 78:         )
 79:     graph_data = gd_from_networkx(G)
 80:     assigner = ProNEAndConstrKMeansAssigner(
 81:         graph_data=graph_data,
 82:         min_block_size=min_block_size,
 83:         rng=np.random.default_rng(42),
 84:     )
 85:     block_data = assigner.compute_assignment()
 86:     # ensure that block_sizes correspond to 
 87:     # Ensure every vertex received exactly one label
 88:     assert len(block_data.blocks) == num_nodes, \
 89:         "ProNEKMeansBlockAssigner did not assign a label to every vertex."
 90:     # ensure that block sizes correspond to the number of blocks
 91:     assert len(block_data.block_sizes) == num_blocks  \
 92:         and len(set(block_data.blocks.values())) == num_blocks, \
 93:         "ProNEKMeansBlockAssigner did not produce the expected number of blocks."
 94:     # Compute block‑size histogram
 95:     _, counts = np.unique(
 96:         list(block_data.blocks.values()),
 97:         return_counts=True
 98:         )
 99:     # All block sizes must be either min_block_size or min_block_size+1
100:     assert (counts >= min_block_size).all(), \
101:         (
102:             "ProNEKMeansBlockAssigner produced illegal block sizes: "
103:             f"{sorted(set(counts))}. Expected larger than {min_block_size}."
104:         )
105:     count_set = set(counts)
106:     # Ensure that the block sizes are either min_block_size or min_block_size + 1
107:     assert count_set.issubset({min_block_size, min_block_size + 1})
108:     # The partition must contain exactly *num_blocks* non‑empty blocks.
109:     assert len(counts) == num_blocks

================
File: src/tests/mcmc/test_change_proposer_and_mover.py
================
  1: # src/tests/test_change_proposers_and_mover.py
  2: """
  3: Unit-tests for
  4:   • sbm.block_change_proposers           (helper + NodeSwapProposer)
  5:   • sbm.node_mover                      (NodeMover)
  6: All graphs are 4 undirected vertices:
  7:     0──1   block 0 = {0,1}
  8:     │  │
  9:     2──3   block 1 = {2,3}
 10: Edges: (0,1) (2,3)  plus two cross edges (0,2) (1,3).
 11: """
 12: from __future__ import annotations
 13: from collections import defaultdict
 14: from typing import Dict, Tuple
 15: import numpy as np
 16: from numpy.typing import ArrayLike
 17: import pytest
 18: from scipy.sparse import csr_array
 19: from sbm.graph_data import GraphData
 20: from sbm.block_data import BlockData
 21: from sbm.block_change_proposers import (
 22:     NodeSwapProposer,
 23:     ProposedValidChanges,
 24:     EdgeBasedSwapProposer,
 25:     TriadicSwapProposer,
 26: )
 27: from sbm.edge_delta import EdgeDelta
 28: from sbm.node_mover import NodeMover
 29: ###############################################################################
 30: # helpers
 31: ###############################################################################
 32: def _toy_graph() -> Tuple[csr_array, Dict[int, int]]:
 33:     """Return 4×4 adjacency and initial {node: block} mapping."""
 34:     adj = np.zeros((4, 4), dtype=int)
 35:     edges = [(0, 1), (2, 3), (0, 2), (1, 3)]
 36:     for u, v in edges:
 37:         adj[u, v] = adj[v, u] = 1
 38:     blocks = {0: 0, 1: 0, 2: 1, 3: 1}
 39:     return csr_array(adj), blocks
 40: def _brute_block_connectivity(adj: csr_array, blocks: Dict[int, int]) -> Dict[Tuple[int, int], int]:
 41:     """Return upper-triangle edge counts between blocks."""
 42:     rows, cols = adj.nonzero() # type: ignore
 43:     bc = defaultdict(int)
 44:     for u, v in zip(rows, cols, strict=False):
 45:         if u >= v:  # count each undirected edge once
 46:             continue
 47:         a, b = blocks[u], blocks[v]
 48:         r, s = (a, b) if a <= b else (b, a)
 49:         bc[(r, s)] += 1
 50:     return bc
 51: ###############################################################################
 52: # tests for _increment_delta_e
 53: ###############################################################################
 54: def test_increment_delta_e_uses_sorted_key() -> None:
 55:     e_delta = EdgeDelta(n_blocks=4)
 56:     e_delta.increment(
 57:         counts=[1],
 58:         blocks_i=[3],
 59:         blocks_j=[1],
 60:     )          # block_i > block_j → key (1,3)
 61:     assert ((1, 3), 1) in e_delta.items() and ((3, 1), 1) not in e_delta.items(), \
 62:         f"Key mismatch: delta keys = {list(e_delta.items())}"
 63: def test_increment_delta_e_overwrites_existing() -> None:
 64:     e_delta = EdgeDelta(n_blocks=4)
 65:     e_delta.increment(
 66:         counts = [1],
 67:         blocks_i = [0],
 68:         blocks_j = [2],
 69:     )          # set to 1
 70:     e_delta.increment(
 71:         counts = [3],
 72:         blocks_i = [2],
 73:         blocks_j = [0]
 74:     )          # overwrite same pair
 75:     assert e_delta[(0, 2)] == 3, \
 76:         f"Value not overwritten, got {e_delta[(0, 2)]}, expected 3"
 77: ###############################################################################
 78: # tests for NodeSwapProposer
 79: ###############################################################################
 80: @pytest.fixture(scope="module")
 81: def proposer() -> NodeSwapProposer:
 82:     adj, blocks = _toy_graph()
 83:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
 84:     return NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
 85: def test_compute_delta_edge_counts_matches_brute(proposer: NodeSwapProposer) -> None:
 86:     # swap vertices 0 (block 0) and 2 (block 1)
 87:     changes: ProposedValidChanges = [(0, 1), (2, 0)]
 88:     delta = proposer._compute_delta_edge_counts(changes)          # type: ignore
 89:     before = _brute_block_connectivity(
 90:         proposer.block_data.graph_data.adjacency,
 91:         proposer.block_data.blocks
 92:     )
 93:     # build new blocks mapping
 94:     new_blocks = proposer.block_data.blocks.copy()
 95:     new_blocks[0], new_blocks[2] = new_blocks[2], new_blocks[0]
 96:     after = _brute_block_connectivity(proposer.block_data.graph_data.adjacency,
 97:                                       new_blocks)
 98:     brute_delta = {k: after.get(k, 0) - before.get(k, 0) for k in set(after) | set(before)}
 99:     delta_dict = dict(delta.items())
100:     assert delta_dict == brute_delta, \
101:         f"\nexpected {brute_delta}\ngot      {delta_dict}"
102: def test_propose_change_returns_expected_structure(proposer: NodeSwapProposer) -> None:
103:     changes = [(0, 1), (2, 0)]
104:     new_changes, delta_e, delta_n = proposer.propose_change(changes=changes)
105:     assert new_changes == changes, "proposer changed explicit instruction"
106:     assert all(isinstance(k, tuple) and len(k) == 2 for k in delta_e.items()), "delta_e keys malformed"
107:     # check that all kays of delta_e are accesible in delta_n (not necessarily non-zero)
108:     for (i, j), _ in delta_e.items():
109:         try:
110:             _ = delta_n[(i, j)]
111:         except KeyError:
112:             pytest.fail(f"delta_n missing key ({i}, {j}) from delta_e: {delta_e.items()}")
113: ###############################################################################
114: # tests for NodeMover
115: ###############################################################################
116: def test_node_mover_updates_blocks_and_sizes() -> None:
117:     adj, blocks = _toy_graph()
118:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
119:     mover = NodeMover(bd)
120:     changes = [(0, 1), (2, 0)]
121:     # reuse proposer to get correct delta_e
122:     prop = NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
123:     delta_e = prop._compute_delta_edge_counts(changes)            # type: ignore
124:     mover.perform_change(changes, delta_e)
125:     assert bd.blocks[0] == 1 and bd.blocks[2] == 0, \
126:         f"blocks not swapped: {bd.blocks}"
127:     assert bd.block_sizes[0] == 2 and bd.block_sizes[1] == 2, \
128:         f"block_sizes wrong: {bd.block_sizes}"
129: def test_node_mover_updates_connectivity() -> None:
130:     adj, blocks = _toy_graph()
131:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
132:     mover = NodeMover(bd)
133:     before = bd.block_connectivity.copy()
134:     changes = [(0, 1), (2, 0)]
135:     prop = NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
136:     delta_e = prop._compute_delta_edge_counts(changes)            # type: ignore
137:     mover.perform_change(changes, delta_e)
138:     # brute recompute
139:     after_brute = _brute_block_connectivity(bd.graph_data.adjacency, bd.blocks)
140:     # connectivity matrix stores both triangles → pick upper
141:     after_matrix = {(r, s): int(bd.block_connectivity[r, s]) #type: ignore
142:                     for r, s in after_brute}
143:     msg = (f"\nexpected connectivity {after_brute}"
144:            f"\nobserved  connectivity {after_matrix}"
145:            f"\ndelta_e applied        {delta_e}")
146:     assert after_matrix == after_brute, msg
147: # ---------------------------------------------------------------------------
148: # helpers – minimal block‑edge accounting for validation
149: # ---------------------------------------------------------------------------
150: def _block_edge_matrix(adj: csr_array, blocks: np.ndarray, n_blocks: int) -> np.ndarray:
151:     """Return an n_blocks×n_blocks symmetric matrix with edge counts."""
152:     mat = np.zeros((n_blocks, n_blocks), dtype=int)
153:     rows, cols = adj.nonzero()
154:     for u, v in zip(rows, cols):
155:         if u >= v:  # undirected ⇒ count each unordered pair once
156:             continue
157:         bu, bv = blocks[u], blocks[v]
158:         mat[bu, bv] += 1
159:         if bu != bv:
160:             mat[bv, bu] += 1
161:     return mat
162: def _apply_changes(blocks: np.ndarray, changes):
163:     new_blocks = blocks.copy()
164:     for node, tgt in changes:
165:         new_blocks[node] = tgt
166:     return new_blocks
167: def _assert_delta_matches(delta_e, before, after):
168:     """Check that EdgeDelta equals after–before for every block pair."""
169:     n_blocks = before.shape[0]
170:     for r in range(n_blocks):
171:         for s in range(n_blocks):
172:             assert delta_e[r, s] == after[r, s] - before[r, s]
173: # ---------------------------------------------------------------------------
174: # fixtures
175: # ---------------------------------------------------------------------------
176: @pytest.fixture(scope="module")
177: def toy_block_data():
178:     """Simple 6‑node, 2‑block undirected graph with both intra‑ and cross‑edges."""
179:     edges = [
180:         (0, 1), (1, 2), (0, 2),  # block 0 internal triangle
181:         (3, 4), (4, 5), (3, 5),  # block 1 internal triangle
182:         (0, 3), (1, 4), (2, 5),  # three cross edges
183:     ]
184:     n = 6
185:     rows, cols = [], []
186:     for u, v in edges:
187:         rows += [u, v]
188:         cols += [v, u]
189:     data = np.ones(len(rows), dtype=int)
190:     adj = csr_array((data, (rows, cols)), shape=(n, n))
191:     blocks = {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1}  # type: ignore[assignment]
192:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
193:     return bd
194: # ---------------------------------------------------------------------------
195: # tests – EdgeBasedSwapProposer
196: # ---------------------------------------------------------------------------
197: def test_edge_based_swap_valid_move(toy_block_data):
198:     rng = np.random.default_rng(42)
199:     prop = EdgeBasedSwapProposer(toy_block_data, rng=rng)
200:     changes, delta_e, _ = prop.propose_change()
201:     # exactly two tuples returned
202:     assert len(changes) == 2
203:     (i, tgt_i), (j, tgt_j) = changes
204:     blocks = toy_block_data.blocks
205:     # originally different blocks and connected by an edge
206:     assert blocks[i] != blocks[j]
207:     assert toy_block_data.graph_data.adjacency[i, j] == 1  # type: ignore[index]
208:     # swap  semantics: targets are the partner's old blocks
209:     assert tgt_i == blocks[j]
210:     assert tgt_j == blocks[i]
211:     # edge‑delta correctness --------------------------------------------------
212:     before = _block_edge_matrix(toy_block_data.graph_data.adjacency, blocks,  # type: ignore[attr-defined]
213:                                 n_blocks=2)
214:     after_blocks = _apply_changes(blocks, changes)
215:     after = _block_edge_matrix(toy_block_data.graph_data.adjacency, after_blocks, 2)
216:     _assert_delta_matches(delta_e, before, after)
217: # ---------------------------------------------------------------------------
218: # tests – TriadicSwapProposer
219: # ---------------------------------------------------------------------------
220: def test_triadic_swap_valid_move(toy_block_data):
221:     rng = np.random.default_rng(7)
222:     prop = TriadicSwapProposer(toy_block_data, rng=rng, candidate_trials=20)
223:     changes, delta_e, _ = prop.propose_change()
224:     # two tuples returned
225:     assert len(changes) == 2
226:     (i, tgt_i), (l, tgt_l) = changes
227:     blocks = toy_block_data.blocks
228:     # i moves to l's block and vice‑versa
229:     assert tgt_i == blocks[l]
230:     assert tgt_l == blocks[i]
231:     # block sizes preserved ---------------------------------------------------
232:     block_sizes = toy_block_data.block_sizes
233:     after_blocks = _apply_changes(blocks, changes)
234:     new_block_sizes = {
235:         b: sum(1 for v in after_blocks.values() if v == b)
236:         for b in set(after_blocks.values())
237:     }
238:     for block, size in new_block_sizes.items():
239:         assert size == block_sizes[block], \
240:             f"Block {block} size changed: expected {block_sizes[block]}, got {size}"
241:     # delta‑edge correctness --------------------------------------------------
242:     before = _block_edge_matrix(toy_block_data.graph_data.adjacency, blocks, 2)  # type: ignore[attr-defined]
243:     after = _block_edge_matrix(toy_block_data.graph_data.adjacency, after_blocks, 2)
244:     _assert_delta_matches(delta_e, before, after)

================
File: src/tests/mcmc/test_edge_delta.py
================
  1: # tests/test_edge_delta_equivalence.py
  2: """
  3: Unit tests that compare behaviour of sbm.edge_delta.EdgeDelta
  4: and its NumPy-accelerated subclass NumpyEdgeDelta.
  5: The tests are written against the public API actually used by
  6: block-change proposers and the likelihood calculator:
  7:     • increment(counts, blocks_i, blocks_j)              :contentReference[oaicite:0]{index=0}
  8:     • __getitem__, __len__, items                       :contentReference[oaicite:1]{index=1}
  9: """
 10: from __future__ import annotations
 11: import random
 12: from collections import defaultdict
 13: from itertools import combinations
 14: import numpy as np
 15: import pytest
 16: from sbm.edge_delta import EdgeDelta, NumpyEdgeDelta
 17: # --------------------------------------------------------------------------- #
 18: # helpers                                                                     #
 19: # --------------------------------------------------------------------------- #
 20: def _random_updates(
 21:     n_blocks: int,
 22:     n_updates: int,
 23:     *, rng: random.Random
 24: ) -> tuple[list[int], list[int], list[int]]:
 25:     """
 26:     Create a *single* batch of updates without duplicate (i, j) pairs
 27:     – this mirrors how `_compute_delta_edge_counts` builds its argument
 28:     lists before calling ``increment`` once per batch.                   :contentReference[oaicite:2]{index=2}
 29:     """
 30:     pairs = random.sample(list(combinations(range(n_blocks), 2)), k=n_updates)
 31:     counts = [rng.randint(-5, 5) for _ in range(n_updates)]
 32:     blocks_i, blocks_j = zip(*pairs)   # already i < j
 33:     return counts, list(blocks_i), list(blocks_j)
 34: def _build_two_deltas(
 35:     n_blocks: int,
 36:     counts: list[int],
 37:     blocks_i: list[int],
 38:     blocks_j: list[int],
 39: ) -> tuple[EdgeDelta, NumpyEdgeDelta]:
 40:     """
 41:     Convenience wrapper: build and *increment once* – just like the
 42:     real code does.                                                      :contentReference[oaicite:3]{index=3}
 43:     """
 44:     d_py  = EdgeDelta(n_blocks)
 45:     d_np  = NumpyEdgeDelta(n_blocks)
 46:     d_py.increment(counts, blocks_i, blocks_j)
 47:     d_np.increment(counts, blocks_i, blocks_j)
 48:     return d_py, d_np
 49: # --------------------------------------------------------------------------- #
 50: # public API parity tests                                                     #
 51: # --------------------------------------------------------------------------- #
 52: @pytest.mark.parametrize("n_blocks, n_updates, seed", [
 53:     (5,  6,  1),
 54:     (7, 10, 42),
 55:     (3,  2, 99),
 56: ])
 57: def test_increment_equivalence(n_blocks: int, n_updates: int, seed: int) -> None:
 58:     """After an identical batch update, both classes hold exactly the same deltas."""
 59:     rng = random.Random(seed)
 60:     counts, bi, bj = _random_updates(n_blocks, n_updates, rng=rng)
 61:     d_py, d_np = _build_two_deltas(n_blocks, counts, bi, bj)
 62:     # compare through the *public* interface ─ not private storage
 63:     pairs = set(d_py.items()) | set(d_np.items())
 64:     for (i, j), _ in pairs:
 65:         assert d_py[i, j] == d_np[i, j], \
 66:             f"Mismatch on pair {(i, j)}: python={d_py[i, j]}, numpy={d_np[i, j]}"
 67:     assert len(d_py) == len(d_np), \
 68:         f"__len__ diverged: python={len(d_py)}, numpy={len(d_np)}"
 69:     # full dict comparison (order-independent)
 70:     assert dict(d_py.items()) == dict(d_np.items())
 71: def test_getitem_default_zero() -> None:
 72:     """Both classes must return 0 for unseen (i,j) pairs."""
 73:     d_py  = EdgeDelta(4)
 74:     d_np  = NumpyEdgeDelta(4)
 75:     for pair in ((0, 0), (0, 1), (2, 3)):
 76:         assert d_py[pair] == d_np[pair] == 0
 77: def test_negative_and_positive_counts() -> None:
 78:     """Signed counts stay intact and are *not* silently truncated."""
 79:     counts  = [  5, -3,  2]
 80:     blocks_i = [0, 0, 1]
 81:     blocks_j = [1, 2, 2]
 82:     d_py, d_np = _build_two_deltas(3, counts, blocks_i, blocks_j)
 83:     assert dict(d_py.items()) == { (0, 1): 5, (0, 2): -3, (1, 2): 2 }
 84:     assert dict(d_py.items()) == dict(d_np.items())
 85: # --------------------------------------------------------------------------- #
 86: # integration smoke test – reproduces the exact public call-sequence used
 87: # by `_compute_delta_edge_counts`                                            #
 88: # --------------------------------------------------------------------------- #
 89: def test_two_step_update_matches() -> None:
 90:     """
 91:     `_compute_delta_edge_counts` issues *two* successive ``increment`` calls
 92:     on the *same* EdgeDelta instance.  Here we reproduce that pattern and make
 93:     sure the NumPy implementation yields identical final deltas after both
 94:     steps.                                                                   :contentReference[oaicite:4]{index=4}
 95:     """
 96:     n_blocks = 4
 97:     # step-1: neighbour blocks
 98:     counts1  = [ 2, -1]
 99:     blocks1a = [0, 1]
100:     blocks1b = [2, 2]
101:     # step-2: intra / inter old blocks
102:     counts2  = [ 7, -4, -3]
103:     blocks2a = [0, 0, 1]
104:     blocks2b = [1, 0, 1]
105:     py = EdgeDelta(n_blocks)
106:     npd = NumpyEdgeDelta(n_blocks)
107:     py.increment(counts1, blocks1a, blocks1b)
108:     py.increment(counts2, blocks2a, blocks2b)
109:     npd.increment(counts1, blocks1a, blocks1b)
110:     npd.increment(counts2, blocks2a, blocks2b)
111:     assert dict(py.items()) == dict(npd.items())

================
File: src/tests/mcmc/test_global_ll.py
================
  1: """Tests that the *slow* and *fast* global Bernoulli log‑likelihood
  2: implementations are numerically identical on a variety of synthetic block
  3: partitions.
  4: We build *real* ``BlockData`` instances by constructing a synthetic graph
  5: (adjacency matrix) whose edge counts per block pair match a prescribed
  6: connectivity matrix.  This avoids touching the rest of the SBM pipeline
  7: while exercising exactly the code paths used by the likelihood routines.
  8: """
  9: from __future__ import annotations
 10: import random
 11: from typing import List, Sequence, Tuple
 12: import numpy as np
 13: import pytest
 14: import scipy.sparse as sp
 15: # ---------------------------------------------------------------------------
 16: # Functions under test
 17: # ---------------------------------------------------------------------------
 18: from sbm.likelihood import (
 19:     compute_global_bernoulli_ll,
 20:     compute_global_bernoulli_ll_fast,
 21: )
 22: from sbm.graph_data import GraphData
 23: # ---------------------------------------------------------------------------
 24: # Utility to create a BlockData instance whose *block_connectivity* matches a
 25: # given integer matrix ``conn`` (undirected only, because BlockData does not
 26: # implement the directed path).
 27: # ---------------------------------------------------------------------------
 28: try:
 29:     from sbm.block_data import BlockData  # type: ignore
 30: except ModuleNotFoundError:  # local fallback
 31:     from block_data import BlockData  # type: ignore
 32: def _node_ranges(sizes: Sequence[int]) -> List[Tuple[int, int]]:
 33:     """Return (start, stop) index for each block (Python half‑open)."""
 34:     ranges = []
 35:     start = 0
 36:     for sz in sizes:
 37:         ranges.append((start, start + sz))
 38:         start += sz
 39:     return ranges
 40: def build_block_data(
 41:     block_sizes: Sequence[int],
 42:     conn: np.ndarray,
 43:     rng: random.Random,
 44: ) -> BlockData:
 45:     """Construct a *consistent* BlockData (undirected) for testing."""
 46:     B = len(block_sizes)
 47:     assert conn.shape == (B, B)
 48:     assert (conn == conn.T).all(), "Connectivity must be symmetric for undirected graphs."  # noqa: E501
 49:     # Total number of nodes & adjacency matrix
 50:     N = int(sum(block_sizes))
 51:     adj = sp.dok_array((N, N), dtype=np.int64)
 52:     ranges = _node_ranges(block_sizes)
 53:     for r in range(B):
 54:         nodes_r = list(range(*ranges[r]))
 55:         # Diagonal block r==r
 56:         e_rr = int(conn[r, r])
 57:         if e_rr:
 58:             # all unordered pairs inside block
 59:             possible = [(u, v) for i, u in enumerate(nodes_r) for v in nodes_r[i + 1 :]]
 60:             assert e_rr <= len(possible)
 61:             chosen = rng.sample(possible, e_rr)
 62:             for u, v in chosen:
 63:                 adj[u, v] = 1
 64:                 adj[v, u] = 1
 65:         for s in range(r + 1, B):
 66:             e_rs = int(conn[r, s])
 67:             if not e_rs:
 68:                 continue
 69:             nodes_s = list(range(*ranges[s]))
 70:             possible = [(u, v) for u in nodes_r for v in nodes_s]
 71:             assert e_rs <= len(possible)
 72:             chosen = rng.sample(possible, e_rs)
 73:             for u, v in chosen:
 74:                 adj[u, v] = 1
 75:                 adj[v, u] = 1
 76:     adj = adj.tocsr()
 77:     # Blocks mapping: node -> block_id (block IDs are 0..B-1)
 78:     blocks = {node: b for b, (start, stop) in enumerate(ranges) for node in range(start, stop)}
 79:     dummy_graph = GraphData(adj, directed=False)
 80:     return BlockData(initial_blocks=blocks, graph_data=dummy_graph)
 81: # ---------------------------------------------------------------------------
 82: # Sanity helper
 83: # ---------------------------------------------------------------------------
 84: def assert_ll_equal(bd: BlockData):
 85:     ll_slow = compute_global_bernoulli_ll(bd)
 86:     ll_fast = compute_global_bernoulli_ll_fast(bd)
 87:     assert np.isclose(ll_slow, ll_fast, rtol=1e-4, atol=1e-6), f"{ll_slow} != {ll_fast}"
 88: # ==========================================================================
 89: # TEST CASES
 90: # ==========================================================================
 91: # 1) Tiny hand-crafted graph -------------------------------------------------
 92: def test_tiny_example():
 93:     sizes = [3, 4]
 94:     conn = np.array([[2, 5],
 95:                      [5, 1]], dtype=np.int64)
 96:     bd = build_block_data(sizes, conn, rng=random.Random(0))
 97:     assert_ll_equal(bd)
 98: # 2) Singleton block present -------------------------------------------------
 99: def test_singleton_block():
100:     sizes = [1, 5, 2]
101:     conn = np.array([[0, 0, 0],
102:                      [0, 4, 3],
103:                      [0, 3, 1]], dtype=np.int64)
104:     # ensure symmetry
105:     conn = conn + conn.T - np.diag(conn.diagonal())
106:     bd = build_block_data(sizes, conn, rng=random.Random(1))
107:     assert_ll_equal(bd)
108: # 3) Random dense undirected graphs -----------------------------------------
109: @pytest.mark.parametrize("seed,B", [(2, 4), (3, 6)])
110: def test_random_dense(seed: int, B: int):
111:     rng = random.Random(seed)
112:     sizes = [rng.randint(2, 6) for _ in range(B)]
113:     conn = np.zeros((B, B), dtype=np.int64)
114:     for r in range(B):
115:         n_rr = sizes[r] * (sizes[r] - 1) // 2
116:         conn[r, r] = rng.randrange(n_rr + 1)
117:         for s in range(r + 1, B):
118:             n_rs = sizes[r] * sizes[s]
119:             val = rng.randrange(n_rs + 1)
120:             conn[r, s] = conn[s, r] = val
121:     bd = build_block_data(sizes, conn, rng)
122:     assert_ll_equal(bd)

================
File: src/tests/mcmc/test_greedy_assign_helpers.py
================
  1: import numpy as np
  2: import scipy.sparse as sp
  3: from scipy.sparse import csr_array
  4: import pytest
  5: from collections import Counter, defaultdict
  6: from sbm.block_assigner import (
  7:     _boundary_vertices,
  8:     _movable_vertex,
  9:     _move,
 10:     categorize,
 11:     move_node_to_under,
 12:     move_node_from_over,
 13:     balance_k_plus_1_blocks,
 14:     _rebalance_to_min_size,
 15: )
 16: # ---------------------------------------------------------------------------
 17: # Minimal helper to build a fully connected small graph ---------------------
 18: # ---------------------------------------------------------------------------
 19: def full_graph_csr(n: int) -> csr_array:
 20:     rows, cols = np.triu_indices(n, 1)
 21:     data = np.ones_like(rows)
 22:     A = csr_array((data, (rows, cols)), shape=(n, n))
 23:     A = A + A.T  # undirected
 24:     return A
 25: # ---------------------------------------------------------------------------
 26: # Tests for categorize ------------------------------------------------------
 27: # ---------------------------------------------------------------------------
 28: def test_categorize_basic():
 29:     k = 3
 30:     sizes = {0: 2, 1: 3, 2: 4, 3: 5}
 31:     over2, over1, under = categorize(sizes, k)
 32:     assert over2 == {3}
 33:     assert over1 == {2}
 34:     assert under == {0}
 35: # ---------------------------------------------------------------------------
 36: # Tests for move_node_to_under -------------------------------------------
 37: # ---------------------------------------------------------------------------
 38: def test_move_node_to_under_correct():
 39:     k = 2
 40:     A = full_graph_csr(4)
 41:     # block 0 undersize (1), block 1 oversize (3)
 42:     blocks = {0: 0, 1: 1, 2: 1, 3: 1}
 43:     sizes = Counter(blocks.values())
 44:     members = defaultdict(set)
 45:     for v, b in blocks.items():
 46:         members[b].add(v)
 47:     rng = np.random.default_rng(0)
 48:     over2, over1, under = categorize(sizes, k)
 49:     move_node_to_under(
 50:         under=under,
 51:         over1=over1,
 52:         over2=over2,
 53:         rng=rng,
 54:         sizes=sizes,
 55:         k=k,
 56:         members=members,
 57:         blocks=blocks,
 58:         indptr=A.indptr,
 59:         indices=A.indices,
 60:     )
 61:     # After move, block 0 should have size 2, block 1 size 2
 62:     assert sizes[0] == k
 63:     assert sizes[1] == k
 64:     # No undersized blocks remain
 65:     _, _, under_new = categorize(sizes, k)
 66:     assert not under_new
 67: # ---------------------------------------------------------------------------
 68: # Tests for move_node_from_over --------------------------------------------
 69: # ---------------------------------------------------------------------------
 70: def test_move_node_from_over_shrink():
 71:     k = 3
 72:     A = full_graph_csr(8)
 73:     # block 0 size 2 (<k), block 1 size 6 (>k+1), others size 0
 74:     blocks = {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1}
 75:     sizes = Counter(blocks.values())
 76:     members = defaultdict(set)
 77:     for v, b in blocks.items():
 78:         members[b].add(v)
 79:     rng = np.random.default_rng(1)
 80:     over2, over1, under = categorize(sizes, k)
 81:     move_node_from_over(
 82:         under=under,
 83:         over1=over1,
 84:         over2=over2,
 85:         rng=rng,
 86:         sizes=sizes,
 87:         k=k,
 88:         members=members,
 89:         blocks=blocks,
 90:         indptr=A.indptr,
 91:         indices=A.indices,
 92:         r_target=0,
 93:     )
 94:     # block 0 size should have increased by 1, block1 decreased by1
 95:     assert sizes[0] == 2  # reached k
 96:     assert sizes[1] == 6
 97: # ---------------------------------------------------------------------------
 98: # Tests for balance_k_plus_1_blocks ----------------------------------------
 99: # ---------------------------------------------------------------------------
100: def test_balance_k_plus_1_blocks_shrink_and_enlarge():
101:     k = 2
102:     A = full_graph_csr(6)
103:     # create three blocks: 0 size 3 (k+1), 1 size 3 (k+1), 2 size 0 (empty)
104:     blocks = {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1}
105:     sizes = Counter(blocks.values())
106:     members = defaultdict(set)
107:     for v, b in blocks.items():
108:         members[b].add(v)
109:     rng = np.random.default_rng(3)
110:     r_target = 1  # we want exactly one k+1
111:     over2, over1, under = categorize(sizes, k)
112:     assert len(over1) == 2  # pre‑condition
113:     # no possible balance to achieve
114:     balance_k_plus_1_blocks(
115:         over1=over1,
116:         over2=over2,
117:         rng=rng,
118:         sizes=sizes,
119:         k=k,
120:         members=members,
121:         blocks=blocks,
122:         indptr=A.indptr,
123:         indices=A.indices,
124:         r_target=r_target,
125:     )
126:     # After balancing, over1 should be 1
127:     over2_after, over1_after, under_after = categorize(sizes, k)
128:     assert len(over1_after) == len(over1) # no change made
129:     assert len(over2_after) == len(over2) # no change made
130:     assert not under_after and not under # no undersized introduced
131: # ---------------------------------------------------------------------------
132: # Test safety with empty sets ----------------------------------------------
133: # ---------------------------------------------------------------------------
134: def test_empty_sets_no_crash():
135:     k = 2
136:     A = full_graph_csr(3)
137:     blocks = {0: 0, 1: 0, 2: 0}
138:     sizes = Counter(blocks.values())
139:     members = defaultdict(set)
140:     for v, b in blocks.items():
141:         members[b].add(v)
142:     rng = np.random.default_rng(4)
143:     # empty over/under sets
144:     over2, over1, under = categorize(sizes, k)
145:     # should do nothing and not raise
146:     move_node_to_under(under, over1, over2, rng, sizes, k, members, blocks, A.indptr, A.indices)
147:     move_node_from_over(under, over1, over2, rng, sizes, k, members, blocks, A.indptr, A.indices, r_target=0)
148:     balance_k_plus_1_blocks(over1, over2, rng, sizes, k, members, blocks, A.indptr, A.indices, r_target=0)
149: # ---------------------------------------------------------------------------
150: # Integration test for _rebalance_to_min_size ------------------------------
151: # ---------------------------------------------------------------------------
152: def test_rebalance_removes_all_undersize():
153:     n = 25
154:     k = 3
155:     A = full_graph_csr(n)
156:     rng = np.random.default_rng(10)
157:     # start with random over/under assignment
158:     blocks = {i: rng.integers(0, 8) for i in range(n)}
159:     print(set(Counter(blocks.values()).values()))
160:     balanced = _rebalance_to_min_size(blocks.copy(), A, k, rng)
161:     sizes = Counter(balanced.values())
162:     print(set(sizes.values()))
163:     # No block smaller than k
164:     assert min(sizes.values()) >= k

================
File: src/tests/mcmc/test_swaps.py
================
 1: # ──────────────────────────────────────────────────────────────────────────────
 2: # tests/test_swap_move.py
 3: # ──────────────────────────────────────────────────────────────────────────────
 4: import networkx as nx
 5: import numpy as np
 6: import pytest
 7: from sbm.block_assigner import MetisBlockAssigner
 8: from sbm.block_change_proposers import NodeSwapProposer
 9: from sbm.likelihood import LikelihoodCalculator
10: from sbm.mcmc import MCMC
11: from sbm.graph_data import gd_from_networkx
12: from sbm.block_data import BlockData
13: def _sizes_from_block_data(block_data: BlockData, num_blocks):
14:     """Helper used in both reference and post‑move checks."""
15:     sizes = np.zeros(num_blocks, dtype=int)
16:     for bid, nodes in block_data.block_members.items():
17:         if bid < num_blocks:
18:             sizes[bid] = len(nodes)
19:     return sizes
20: @pytest.mark.parametrize(
21:     "num_nodes,num_blocks,min_block_size,iterations,edge_p",
22:     [
23:         (80, 8, 8, 250, 0.05),
24:         (30, 6, 4, 100, 0.25),
25:         (10, 5, 2, 100, 0.25),
26:     ],
27: )
28: def test_swap_move_preserves_block_sizes(num_nodes, num_blocks, min_block_size, iterations, edge_p):
29:     """After *every* accepted SWAP move, block‑size vector must be unchanged."""
30:     rng = np.random.default_rng(42)
31:     # old version of networkx can't take rng so use seed instead
32:     G = nx.erdos_renyi_graph(num_nodes, edge_p, seed=42, directed=False)
33:     graph_data = gd_from_networkx(G)
34:     # ── Build initial state ────────────────────────────────────────────────
35:     block_data = MetisBlockAssigner(
36:         graph_data=graph_data,
37:         num_blocks=num_blocks,
38:         min_block_size=min_block_size,
39:         rng=rng,
40:     ).compute_assignment()
41:     likelihood_calculator = LikelihoodCalculator(block_data=block_data)
42:     swap_proposer = NodeSwapProposer(block_data=block_data, rng=rng)
43:     mcmc = MCMC(
44:         block_data=block_data,
45:         likelihood_calculator=likelihood_calculator,
46:         change_proposer={"uniform_swap": swap_proposer},
47:         rng=rng,
48:     )
49:     reference_sizes = _sizes_from_block_data(block_data, num_blocks)
50:     # ── Run many candidate swap moves ──────────────────────────────────────
51:     for iter in range(iterations):
52:         _delta_ll, accepted = mcmc._attempt_move(move_type="uniform_swap", temperature=1.0)
53:         if accepted:
54:             current_sizes = _sizes_from_block_data(mcmc.block_data, num_blocks)
55:             assert np.array_equal(reference_sizes, current_sizes), (
56:                 f"SWAP move {iter} changed block sizes:", reference_sizes, "→", current_sizes
57:             )
58:     # Final safeguard: after *all* moves sizes are still identical.
59:     final_sizes = _sizes_from_block_data(mcmc.block_data, num_blocks)
60:     assert np.array_equal(reference_sizes, final_sizes)

================
File: src/tests/metrics/clustering
================
 1: import numpy as np
 2: from scipy.sparse import csr_array
 3: from metrics.clustering import avg_clustering_difference
 4: from tests.metrics.conftest import _line_graph, _complete_graph
 5: 
 6: def test_identical_zero() -> None:
 7:     A: csr_array = _line_graph()
 8:     assert avg_clustering_difference(A, A) == 0.0
 9: 
10: def test_line_vs_complete() -> None:
11:     d = avg_clustering_difference(_line_graph(10), _complete_graph(10))
12:     assert d > 0 and np.isfinite(d)

================
File: src/tests/metrics/conftest.py
================
 1: import numpy as np, scipy.sparse as sp
 2: import pytest
 3: from scipy.sparse import csr_array
 4: # ------------------------------------------------------------------ helpers
 5: def _line_graph(n: int = 6) -> csr_array:
 6:     rows = np.arange(n - 1)
 7:     cols = rows + 1
 8:     A = sp.coo_matrix((np.ones_like(rows), (rows, cols)), shape=(n, n))
 9:     A = A + A.T
10:     return csr_array(A, dtype=np.int8)
11: def _complete_graph(n: int = 6) -> csr_array:
12:     A = np.ones((n, n), dtype=np.int8)
13:     np.fill_diagonal(A, 0)
14:     return csr_array(A)
15: def _er_graph(n: int = 10, p: float = .2, *, seed: int = 1) -> csr_array:
16:     rng = np.random.default_rng(seed)
17:     upper = rng.random((n, n)) < p
18:     upper = np.triu(upper, k=1)
19:     A = upper | upper.T
20:     return csr_array(A.astype(np.int8))
21: def _two_triangles() -> csr_array:
22:     edges = [(0, 1), (1, 2), (0, 2), (3, 4), (4, 5), (3, 5)]
23:     rows, cols = zip(*edges)
24:     A = sp.coo_matrix((np.ones(len(edges)), (rows, cols)), shape=(6, 6))
25:     A = A + A.T
26:     return csr_array(A, dtype=np.int8)
27: # ------------------------------------------------------------------ fixtures
28: @pytest.fixture(scope="module")
29: def rng() -> np.random.Generator:
30:     return np.random.default_rng(0)

================
File: src/tests/metrics/shortest_path.py
================
 1: import numpy as np, pytest
 2: from scipy.sparse import csr_array
 3: from metrics.shortest_path import avg_path_length_difference
 4: from tests.metrics.conftest import _line_graph, _complete_graph
 5: def test_identical_zero() -> None:
 6:     A: csr_array = _line_graph()
 7:     assert avg_path_length_difference(A, A, n_samples=None) == 0.0
 8: @pytest.mark.parametrize(
 9:     "emp,sur",
10:     [
11:         (_line_graph(8), _complete_graph(8)),
12:         (_line_graph(20), _line_graph(30)),
13:     ],
14: )
15: def test_difference_positive(emp: csr_array, sur: csr_array) -> None:
16:     d = avg_path_length_difference(emp, sur, n_samples=100)
17:     assert d > 0.0 and np.isfinite(d)

================
File: src/tests/metrics/test_assortativity.py
================
1: from scipy.sparse import csr_array
2: from metrics.assortativity import assortativity_difference
3: from tests.metrics.conftest import _line_graph, _complete_graph, _er_graph
4: def test_identical_zero() -> None:
5:     A: csr_array = _line_graph()
6:     assert assortativity_difference(A, A) == 0.0
7: def test_line_vs_complete_positive() -> None:
8:     d = assortativity_difference(_line_graph(12), _er_graph(n=12))
9:     assert d > 0

================
File: src/tests/metrics/test_community_metrics.py
================
 1: import numpy as np
 2: from scipy.sparse import csr_array
 3: from metrics.community import (
 4:     infomap_codelength_difference,
 5:     leiden_modularity_difference,
 6: )
 7: from tests.metrics.conftest import _two_triangles, _complete_graph
 8: def test_infomap_identical_zero():
 9:     A: csr_array = _two_triangles()
10:     assert infomap_codelength_difference(A, A) == 0.0
11: def test_leiden_identical_zero():
12:     A: csr_array = _two_triangles()
13:     assert leiden_modularity_difference(A, A) == 0.0
14: def test_infomap_vs_complete_positive():
15:     d = infomap_codelength_difference(_two_triangles(), _complete_graph(6))
16:     assert d > 0
17: def test_leiden_vs_complete_positive():
18:     d = leiden_modularity_difference(_two_triangles(), _complete_graph(6))
19:     assert d > 0

================
File: src/tests/metrics/test_eigen_subspace.py
================
 1: import numpy as np, pytest
 2: from scipy.sparse import csr_array
 3: from metrics.spectral import (
 4:     eigen_val_distance,
 5:     eigen_vec_distance,
 6:     centrality_distance
 7: )
 8: from tests.metrics.conftest import _line_graph, _complete_graph, _er_graph
 9: # ------------------------------------------------------------------------- #
10: # Eigenval tests
11: # ------------------------------------------------------------------------- #
12: def test_val_identical_zero_int_input() -> None:
13:     # adjacency is *int* on purpose – function must up-cast internally
14:     A: csr_array = _line_graph(12)
15:     assert eigen_val_distance(A, A, k=3) == 0.0
16: def test_val_different_size_graphs() -> None:
17:     # adjacency is *int* on purpose – function must up-cast internally
18:     A: csr_array = _line_graph(12)
19:     B: csr_array = _line_graph(13)
20:     eigen_val_distance(A, B, k=3)
21: @pytest.mark.parametrize("k", [1, 3])
22: def test_val_line_vs_complete_positive(k: int) -> None:
23:     d = eigen_val_distance(_line_graph(12), _complete_graph(12), k=k)
24:     assert d > 0.0 and np.isfinite(d)
25: # ------------------------------------------------------------------------- #
26: # Eigenvec tests
27: # ------------------------------------------------------------------------- #
28: def test_vec_identical_zero_int_input() -> None:
29:     # adjacency is *int* on purpose – function must up-cast internally
30:     A: csr_array = _line_graph(12)
31:     assert eigen_vec_distance(A, A, k=3) == 0.0
32: def test_vec_line_vs_er_positive() -> None:
33:     # adjacency is *int* on purpose – function must up-cast internally
34:     A: csr_array = _line_graph(50)
35:     B: csr_array = _er_graph(50)
36:     assert eigen_vec_distance(A, B, k=3) > 0.0
37: def test_vec_different_size_graphs() -> None:
38:     # adjacency is *int* on purpose – function must up-cast internally
39:     A: csr_array = _line_graph(12)
40:     B: csr_array = _line_graph(13)
41:     # check that the function raises a ValueError
42:     # because the graphs have different sizes
43:     with pytest.raises(ValueError):
44:         eigen_vec_distance(A, B, k=3)
45: # ------------------------------------------------------------------------- #
46: # Eigen centrality tests
47: # ------------------------------------------------------------------------- #
48: @pytest.mark.parametrize("k", [1, 3])
49: def test_vec_line_vs_complete_positive(k: int) -> None:
50:     d = centrality_distance(_line_graph(12), _complete_graph(12))
51:     assert d > 0.0 and np.isfinite(d)
52: def test_cent_identical_zero_int_input() -> None:
53:     # adjacency is *int* on purpose – function must up-cast internally
54:     A: csr_array = _line_graph(12)
55:     assert centrality_distance(A, A) == 0.0
56: def test_cent_different_size_graphs() -> None:
57:     # adjacency is *int* on purpose – function must up-cast internally
58:     A: csr_array = _line_graph(12)
59:     B: csr_array = _line_graph(20)
60:     assert centrality_distance(A, B) > 0.0
61: @pytest.mark.parametrize("k", [1, 3])
62: def test_cent_line_vs_complete_positive(k: int) -> None:
63:     d = centrality_distance(_line_graph(12), _complete_graph(12))
64:     assert d > 0.0 and np.isfinite(d)

================
File: src/tests/metrics/test_embedding_metrics.py
================
 1: import numpy as np, pytest
 2: from scipy.sparse import csr_array
 3: from metrics.embedding import (
 4:     embedding_node2vec_ip_emd,
 5:     embedding_prone_ip_emd,
 6: )
 7: from tests.metrics.conftest import _line_graph, _er_graph
 8: @pytest.mark.parametrize("fn", [embedding_node2vec_ip_emd, embedding_prone_ip_emd])
 9: def test_dissimilar_for_different_graphs(fn):
10:     A: csr_array = _line_graph(100)
11:     B: csr_array = _er_graph(100)
12:     d_AA = fn(A, A, dim=32, n_pairs=500)
13:     d_AB = fn(A, B, dim=32, n_pairs=500)
14:     d_BB = fn(B, B, dim=32, n_pairs=500)
15:     # for identical graphs we expect *almost* zero – allow tiny noise
16:     assert d_AA < d_AB
17:     assert d_BB < d_AB
18: @pytest.mark.parametrize("fn", [embedding_node2vec_ip_emd, embedding_prone_ip_emd])
19: def test_line_vs_er_positive(fn):
20:     d = fn(_line_graph(20), _er_graph(20, p=.3), dim=32, n_pairs=500)
21:     assert d > 0 and np.isfinite(d)

================
File: src/tests/metrics/test_metrics.py
================
 1: import numpy as np, scipy.sparse as sp
 2: from scipy.sparse import csr_array
 3: from metrics import (
 4:     shortest_path_distance,
 5:     degree_distance,
 6:     clustering_distance
 7: )
 8: ### Helper functions to create graphs
 9: def _line_graph(n=6) -> csr_array:
10:     rows = np.arange(n-1); cols = rows + 1
11:     A = sp.coo_matrix((np.ones(n-1), (rows, cols)), shape=(n, n))
12:     A = A + A.T
13:     A = csr_array(A, dtype=np.int8)
14:     return A
15: def _er_graph(n: int=10, p: float=0.1, *, seed: int=1) -> csr_array:
16:     """Undirected G(n,p) without self-loops, returned as CSR matrix."""
17:     rng = np.random.default_rng(seed)
18:     upper = rng.random((n, n)) < p                           # boolean mask
19:     upper = np.triu(upper, k=1)                              # keep strict upper
20:     adj = upper | upper.T                                    # symmetrise
21:     return csr_array(adj.astype(np.int8))
22: #### test functions
23: def test_shortest_path_identical_line():
24:     A = _line_graph()
25:     print(A.toarray())
26:     assert shortest_path_distance(A, A, n_samples=None) == 0.0
27: def test_degree_identical_line():
28:     A = _line_graph()
29:     assert degree_distance(A, A) == 0.0
30: def test_clustering_identical_line():
31:     A = _line_graph()
32:     assert clustering_distance(A, A) == 0.0
33: def test_shortest_path_different_line():
34:     A = _line_graph(n=20)
35:     B = _line_graph(n=200)
36:     assert shortest_path_distance(A, B, n_samples=100) != 0.0
37: def test_degree_different_line():
38:     A = _line_graph(n=20)
39:     A = _line_graph(n=200)
40:     assert degree_distance(A, A) == 0.0
41: def test_clustering_identical_er():
42:     A = _er_graph(n=100)
43:     assert clustering_distance(A, A) == 0.0
44: def test_shortest_path_identical_er():
45:     A = _er_graph(p=0.9)
46:     assert shortest_path_distance(A, A, n_samples=None) == 0.0
47: def test_shortest_path_different_er():
48:     A = _er_graph(n=20, p=0.9)
49:     B = _er_graph(n=200, p=0.1)
50:     assert shortest_path_distance(A, B, n_samples=100) != 0.0
51: def test_degree_different_er():
52:     A = _er_graph()
53:     assert degree_distance(A, A) == 0.0
54: def test_clustering_different_er():
55:     A = _er_graph()
56:     assert clustering_distance(A, A) == 0.0

================
File: src/tests/sbm/test_io.py
================
  1: # tests/test_io.py
  2: import json
  3: from pathlib import Path
  4: import numpy as np
  5: import scipy.sparse as sp
  6: from scipy.io import mmwrite
  7: import networkx as nx
  8: import pytest
  9: from sbm.io import SBMFit, SBMWriter, GraphLoader
 10: # ---------------------------------------------------------------------
 11: # helpers
 12: # ---------------------------------------------------------------------
 13: def _simple_adj(undirected: bool = True) -> sp.csr_array:
 14:     """
 15:     3-node graph:
 16:         0 — 1   and  (optionally) 1 → 2
 17:     """
 18:     rows, cols = [0, 1], [1, 0]            # 0–1 edge
 19:     if not undirected:
 20:         rows.append(1); cols.append(2)     # add 1→2 (makes it directed)
 21:     data = np.ones(len(rows), dtype=np.int8)
 22:     return sp.csr_array(sp.coo_matrix((data, (rows, cols)), shape=(3, 3)))
 23: def _assert_same_csr(a: sp.csr_array, b: sp.csr_array):
 24:     a.sort_indices()
 25:     b.sort_indices()
 26:     assert np.array_equal(a.data, b.data), f'Data arrays differ: {a.data} != {b.data}'
 27:     assert np.array_equal(a.indices, b.indices), f'Indices differ: {a.indices} != {b.indices}'
 28:     assert a.shape == b.shape, f'Shape differs: {a.shape} != {b.shape}'
 29: # ---------------------------------------------------------------------
 30: # 1. SBMWriter round-trip
 31: # ---------------------------------------------------------------------
 32: def test_sbmwriter_roundtrip(tmp_path: Path):
 33:     # --- build a tiny SBMFit ----------------------------------------
 34:     #adj = _simple_adj()
 35:     #blocks = {0: 0, 1: 0, 2: 1}
 36:     fit = SBMFit(
 37:         block_sizes   = [2, 1],
 38:         block_conn    = sp.csr_array([[1, .2],[.2, .1]]),
 39:         directed_graph= False,
 40:         neg_loglike   = -12.34,
 41:         metadata      = {"foo": "bar"},
 42:     )
 43:     # --- save & load ------------------------------------------------
 44:     SBMWriter.save(tmp_path, fit)
 45:     fit2 = SBMWriter.load(tmp_path)
 46:     # basic checks
 47:     assert fit2.block_sizes == [2, 1], f"Block sizes do not match: {fit2.block_sizes} != [2, 1]"
 48:     _assert_same_csr(fit.block_conn, fit2.block_conn)
 49:     assert fit2.neg_loglike == pytest.approx(fit.neg_loglike), "Negative log-likelihood does not match"
 50:     assert fit2.metadata["foo"] == "bar", "Metadata does not match"
 51: # ---------------------------------------------------------------------
 52: # 2. GraphLoader built-in formats
 53: # ---------------------------------------------------------------------
 54: @pytest.mark.parametrize("undirected", [True, False])
 55: def test_graphloader_npz(tmp_path: Path, undirected: bool):
 56:     adj = _simple_adj(undirected)
 57:     f = tmp_path / "g.npz"
 58:     sp.save_npz(f, adj)
 59:     g = GraphLoader.load(f)
 60:     _assert_same_csr(adj, g.adjacency)
 61:     assert g.directed == (not undirected)
 62: def test_graphloader_edges(tmp_path: Path):
 63:     # plain edge list (space-sep)
 64:     f = tmp_path / "toy.edges"
 65:     f.write_text("0 1\n1 2\n")  # unsymmetrised → directed
 66:     g = GraphLoader.load(f)
 67:     assert g.directed
 68:     assert g.num_nodes == 3
 69:     assert g.adjacency[1, 2] == 1
 70: def test_graphloader_mtx(tmp_path: Path):
 71:     adj = _simple_adj()
 72:     f = tmp_path / "toy.mtx"
 73:     mmwrite(str(f), adj)
 74:     g = GraphLoader.load(f)
 75:     _assert_same_csr(adj, g.adjacency)
 76:     assert not g.directed
 77: def test_graphloader_gml(tmp_path: Path):
 78:     # build with networkx
 79:     G = nx.Graph()
 80:     G.add_edge(0, 1); G.add_edge(1, 2)
 81:     f = tmp_path / "toy.gml"
 82:     nx.write_gml(G, f)
 83:     g = GraphLoader.load(f)
 84:     assert not g.directed
 85:     assert g.adjacency.nnz == 4      # undirected ⇒ 2 edges ×2
 86: # ---------------------------------------------------------------------
 87: # 3. Registry decorator sanity check
 88: # ---------------------------------------------------------------------
 89: def test_register_new_loader(tmp_path: Path):
 90:     # create a fake extension ".foo"
 91:     ext = ".foo"
 92:     @GraphLoader.register(ext)
 93:     def _load_foo(path: Path):
 94:         # loader that ignores content, returns 2-node edge
 95:         rows, cols = [0], [1]
 96:         adj = sp.coo_matrix((np.ones(1, int), (rows, cols)), shape=(2, 2)).tocsr()
 97:         return adj, True
 98:     # create dummy file and load
 99:     f = tmp_path / f"dummy{ext}"
100:     f.write_text("ignored")
101:     g = GraphLoader.load(f)
102:     assert g.directed
103:     assert g.adjacency[0, 1] == 1
104:     assert f.suffix.lower() in GraphLoader.registry

================
File: src/tests/sbm/test_sampling.py
================
  1: import numpy as np
  2: import scipy.sparse as sp
  3: import pytest
  4: from sbm.sampling import (
  5:     sample_adjacency_matrix,
  6:     sample_sbm_graph_from_fit,
  7: )
  8: from sbm.io import SBMFit
  9: from sbm.graph_data import GraphData
 10: @pytest.fixture(scope="module")
 11: def rng():
 12:     return np.random.default_rng(12345)
 13: # --------------------------------------------------------------------
 14: # helpers
 15: # --------------------------------------------------------------------
 16: def csr_edges_between(adj: sp.csr_array, idx_a, idx_b, directed:bool = False):
 17:     """number of non-zero entries with row in A and col in B"""
 18:     sub = adj[idx_a][:, idx_b] # type: ignore
 19:     if (idx_a == idx_b) and not directed:
 20:         # self-edges, count only upper triangle
 21:         return sub.count_nonzero() // 2 # type: ignore
 22:     if directed:
 23:         # directed, count all edges
 24:         print('')
 25:         print(sub.toarray().tolist())
 26:         print(adj.toarray().tolist())
 27:         print('')
 28:     return sub.sum() # type: ignore
 29: def complete_block_edges(n, directed):
 30:     return n * (n - 1) if directed else n * (n - 1) // 2
 31: # --------------------------------------------------------------------
 32: # 1. full connectivity should yield a complete bipartite/clique
 33: # --------------------------------------------------------------------
 34: @pytest.mark.parametrize("directed", [False, True])
 35: def test_full_connectivity(rng, directed):
 36:     n1, n2 = 3, 4
 37:     sizes = [n1, n2]
 38:     # maximum possible edges
 39:     B = 2
 40:     conn = sp.csr_array((B, B), dtype=int)
 41:     conn[0, 0] = complete_block_edges(n1, directed)
 42:     conn[1, 1] = complete_block_edges(n2, directed)
 43:     conn[0, 1] = conn[1, 0] = n1 * n2
 44:     adj = sample_adjacency_matrix(sizes, conn, directed=directed, rng=rng)
 45:     idx0 = slice(0, n1)
 46:     idx1 = slice(n1, n1 + n2)
 47:     # --- within-block ------------------------------------------------
 48:     assert csr_edges_between(adj, idx0, idx0, directed) == conn[0, 0], \
 49:         (
 50:             f"expected {conn[0, 0]} edges within block 0. Got {csr_edges_between(adj, idx0, idx0)}. "
 51:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
 52:         )
 53:     assert csr_edges_between(adj, idx1, idx1, directed) == conn[1, 1], \
 54:         (
 55:             f"expected {conn[1, 1]} edges within block 1"
 56:             f"sizes: {sizes}, conn: {conn}, directed: {directed}"
 57:         )
 58:     # --- between blocks ---------------------------------------------
 59:     expect = conn[0, 1]
 60:     assert csr_edges_between(adj, idx0, idx1, directed) == expect ,\
 61:         (
 62:             f"expected {expect} edges between blocks 0 and 1. Got {csr_edges_between(adj, idx0, idx1)}. "
 63:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
 64:         )
 65:     assert csr_edges_between(adj, idx1, idx0, directed) == expect, \
 66:         (
 67:             f"expected {expect} edges between blocks 1 and 0. Got {csr_edges_between(adj, idx1, idx0)}. "
 68:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
 69:         )
 70:     if directed:
 71:         # both directions filled
 72:         assert csr_edges_between(adj, idx1, idx0, directed) == expect, \
 73:                 f"expected {expect} edges between blocks 1 and 0. Got {csr_edges_between(adj, idx1, idx0)}. "
 74:     # --- no self-loops ----------------------------------------------
 75:     assert adj.diagonal().sum() == 0, \
 76:                 "expected no self-loops in the adjacency matrix"
 77: # --------------------------------------------------------------------
 78: # 2. zero connectivity must yield zero edges between blocks
 79: # --------------------------------------------------------------------
 80: def test_zero_connectivity(rng):
 81:     n1, n2 = 5, 6
 82:     sizes = [n1, n2]
 83:     conn = sp.csr_array([[10, 0],
 84:                          [0, 15]], dtype=int)
 85:     adj = sample_adjacency_matrix(sizes, conn, directed=False, rng=rng)
 86:     idx0 = slice(0, n1)
 87:     idx1 = slice(n1, n1 + n2)
 88:     assert csr_edges_between(adj, idx0, idx1) == 0
 89:     assert csr_edges_between(adj, idx1, idx0) == 0
 90: # --------------------------------------------------------------------
 91: # 3. large probabilistic block matches expected count ±3σ
 92: # --------------------------------------------------------------------
 93: def test_statistical_match(rng):
 94:     n1, n2 = 100, 200
 95:     sizes = [n1, n2]
 96:     p = 0.15
 97:     m = int(p * n1 * n2)
 98:     conn = sp.csr_array((2, 2), dtype=int)
 99:     conn[0, 1] = conn[1, 0] = m
100:     trials = 10
101:     errs = []
102:     for _ in range(trials):
103:         adj = sample_adjacency_matrix(sizes, conn, directed=False, rng=rng)
104:         idx0 = slice(0, n1)
105:         idx1 = slice(n1, n1 + n2)
106:         observed = csr_edges_between(adj, idx0, idx1)
107:         errs.append(observed - m)
108:     std = np.sqrt(n1 * n2 * p * (1 - p))
109:     assert max(map(abs, errs)) < 3 * std, \
110:         (
111:             f"expected observed edge counts to match {m} ± 3σ. Got {errs}. "
112:         )
113: # --------------------------------------------------------------------
114: # 4. directed vs undirected symmetry
115: # --------------------------------------------------------------------
116: def test_directed_flag(rng):
117:     sizes = [10, 10]
118:     B = 2
119:     conn = sp.csr_array((B, B), dtype=int)
120:     conn[0, 1] = conn[1, 0] = 10 * 10 / 2   # p = 0.5
121:     adj_d = sample_adjacency_matrix(sizes, conn, directed=True, rng=rng)
122:     assert (adj_d != adj_d.T).nnz > 0, \
123:         "expected directed graph to be asymmetric"
124:     adj_u = sample_adjacency_matrix(sizes, conn, directed=False, rng=rng)
125:     assert (adj_u != adj_u.T).nnz == 0
126: # --------------------------------------------------------------------
127: # 5. sampling via SBMFit wrapper
128: # --------------------------------------------------------------------
129: def test_sample_from_fit(rng):
130:     sizes = [2, 2]
131:     conn = sp.csr_array([[1, 2],
132:                          [2, 1]], dtype=int)
133:     fit = SBMFit(
134:         block_sizes    = sizes,
135:         block_conn     = conn,
136:         directed_graph = False,
137:         neg_loglike    = -1.0,
138:         metadata       = {},
139:     )
140:     g = sample_sbm_graph_from_fit(fit, rng)
141:     assert isinstance(g, GraphData)
142:     assert g.adjacency.shape == (4, 4)

================
File: env_backup.yml
================
  1: name: anon_sbm
  2: channels:
  3:   - conda-forge
  4:   - defaults
  5: dependencies:
  6:   - bzip2=1.0.8
  7:   - ca-certificates=2024.9.24
  8:   - libexpat=2.6.4
  9:   - libffi=3.4.4
 10:   - libmpdec=4.0.0
 11:   - libsqlite=3.47.0
 12:   - libzlib=1.3.1
 13:   - ncurses=6.5
 14:   - openssl=3.4.0
 15:   - pip=24.3.1
 16:   - python=3.13.0
 17:   - python_abi=3.13
 18:   - readline=8.2
 19:   - tk=8.6.13
 20:   - xz=5.4.6
 21:   - pip:
 22:     - absl-py==2.3.0
 23:     - anon-sbm==0.1.0
 24:     - anyio==4.6.2.post1
 25:     - appnope==0.1.4
 26:     - argon2-cffi==23.1.0
 27:     - argon2-cffi-bindings==21.2.0
 28:     - arrow==1.3.0
 29:     - asttokens==2.4.1
 30:     - async-lru==2.0.4
 31:     - attrs==24.2.0
 32:     - babel==2.16.0
 33:     - beautifulsoup4==4.12.3
 34:     - bleach==6.2.0
 35:     - certifi==2024.8.30
 36:     - cffi==1.17.1
 37:     - charset-normalizer==3.4.0
 38:     - comm==0.2.2
 39:     - contourpy==1.3.1
 40:     - cycler==0.12.1
 41:     - debugpy==1.8.9
 42:     - decorator==5.1.1
 43:     - defusedxml==0.7.1
 44:     - executing==2.1.0
 45:     - fastjsonschema==2.20.0
 46:     - fonttools==4.55.0
 47:     - fqdn==1.5.1
 48:     - h11==0.14.0
 49:     - httpcore==1.0.7
 50:     - httpx==0.27.2
 51:     - idna==3.10
 52:     - immutabledict==4.2.1
 53:     - iniconfig==2.0.0
 54:     - ipykernel==6.29.5
 55:     - ipython==8.29.0
 56:     - ipywidgets==8.1.5
 57:     - isoduration==20.11.0
 58:     - jedi==0.19.2
 59:     - jinja2==3.1.4
 60:     - joblib==1.5.1
 61:     - json5==0.9.28
 62:     - jsonpointer==3.0.0
 63:     - jsonschema==4.23.0
 64:     - jsonschema-specifications==2024.10.1
 65:     - jupyter==1.1.1
 66:     - jupyter-client==8.6.3
 67:     - jupyter-console==6.6.3
 68:     - jupyter-core==5.7.2
 69:     - jupyter-events==0.10.0
 70:     - jupyter-lsp==2.2.5
 71:     - jupyter-server==2.14.2
 72:     - jupyter-server-terminals==0.5.3
 73:     - jupyterlab==4.2.6
 74:     - jupyterlab-pygments==0.3.0
 75:     - jupyterlab-server==2.27.3
 76:     - jupyterlab-widgets==3.0.13
 77:     - k-means-constrained==0.7.3
 78:     - kiwisolver==1.4.7
 79:     - markupsafe==3.0.2
 80:     - matplotlib==3.9.2
 81:     - matplotlib-inline==0.1.7
 82:     - mistune==3.0.2
 83:     - nbclient==0.10.0
 84:     - nbconvert==7.16.4
 85:     - nbformat==5.10.4
 86:     - nest-asyncio==1.6.0
 87:     - networkx==3.4.2
 88:     - notebook==7.2.2
 89:     - notebook-shim==0.2.4
 90:     - numpy==1.26.4
 91:     - ortools==9.14.6206
 92:     - overrides==7.7.0
 93:     - packaging==24.2
 94:     - pandas==2.3.0
 95:     - pandocfilters==1.5.1
 96:     - parso==0.8.4
 97:     - pathlib==1.0.1
 98:     - pexpect==4.9.0
 99:     - pillow==11.0.0
100:     - platformdirs==4.3.6
101:     - pluggy==1.5.0
102:     - prometheus-client==0.21.0
103:     - prompt-toolkit==3.0.48
104:     - protobuf==6.31.1
105:     - psutil==6.1.0
106:     - ptyprocess==0.7.0
107:     - pure-eval==0.2.3
108:     - pycparser==2.22
109:     - pygments==2.18.0
110:     - pymetis==2025.1.1
111:     - pyparsing==3.2.0
112:     - pytest==8.3.4
113:     - python-dateutil==2.9.0.post0
114:     - python-json-logger==2.0.7
115:     - pytz==2025.2
116:     - pyyaml==6.0.2
117:     - pyzmq==26.2.0
118:     - referencing==0.35.1
119:     - requests==2.32.3
120:     - rfc3339-validator==0.1.4
121:     - rfc3986-validator==0.1.1
122:     - rpds-py==0.21.0
123:     - scikit-learn==1.7.0
124:     - scipy==1.14.1
125:     - send2trash==1.8.3
126:     - setuptools==75.6.0
127:     - six==1.16.0
128:     - sniffio==1.3.1
129:     - soupsieve==2.6
130:     - stack-data==0.6.3
131:     - terminado==0.18.1
132:     - threadpoolctl==3.6.0
133:     - tinycss2==1.4.0
134:     - tornado==6.4.2
135:     - tqdm==4.67.1
136:     - traitlets==5.14.3
137:     - types-python-dateutil==2.9.0.20241003
138:     - typing-extensions==4.14.0
139:     - tzdata==2025.2
140:     - uri-template==1.3.0
141:     - urllib3==2.2.3
142:     - wcwidth==0.2.13
143:     - webcolors==24.11.1
144:     - webencodings==0.5.1
145:     - websocket-client==1.8.0
146:     - widgetsnbextension==4.0.13
147: prefix: /opt/anaconda3/envs/anon_sbm

================
File: pyproject.toml
================
1: [build-system]
2: requires = ["setuptools", "wheel"]
3: build-backend = "setuptools.build_meta"

================
File: README.md
================
1: # anon_sbm

================
File: notebooks/block_assigner_comparison_01-07-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "03332c1a",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Notebook for comparing the quality of block-assignment strategies"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": 1,
 14:    "id": "ca236c42",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "from pathlib import Path\n",
 19:     "\n",
 20:     "import numpy as np\n",
 21:     "import pandas as pd\n",
 22:     "import scipy.sparse as sp\n",
 23:     "\n",
 24:     "from sbm.io import GraphLoader\n",
 25:     "from sbm.block_assigner import AssignerConstructor"
 26:    ]
 27:   },
 28:   {
 29:    "cell_type": "code",
 30:    "execution_count": 2,
 31:    "id": "75c16b11",
 32:    "metadata": {},
 33:    "outputs": [],
 34:    "source": [
 35:     "g = GraphLoader.load(\n",
 36:     "    Path(\"/Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist\"),\n",
 37:     "    force_undirected=True, # type: ignore\n",
 38:     "    )\n",
 39:     "#g = GraphLoader.load(\n",
 40:     "#    Path(\"/Users/lmmi/anon_sbm/data/processed/lastfm_asia.edgelist\"),\n",
 41:     "#    force_undirected=True, # type: ignore\n",
 42:     "#    )"
 43:    ]
 44:   },
 45:   {
 46:    "cell_type": "code",
 47:    "execution_count": 3,
 48:    "id": "e54ed4ac",
 49:    "metadata": {},
 50:    "outputs": [],
 51:    "source": [
 52:     "rng = np.random.default_rng(1) # type: ignore\n",
 53:     "k = 3"
 54:    ]
 55:   },
 56:   {
 57:    "cell_type": "code",
 58:    "execution_count": 4,
 59:    "id": "e8d0bf40",
 60:    "metadata": {},
 61:    "outputs": [],
 62:    "source": [
 63:     "assigner_const = AssignerConstructor(rng=rng)\n",
 64:     "uniform_assigner = assigner_const.create_assigner(\n",
 65:     "    graph_data=g,\n",
 66:     "    min_block_size=k, # type: ignore\n",
 67:     "    init_method=\"uniform\", # type: ignore\n",
 68:     "    )\n",
 69:     "prone_assigner = assigner_const.create_assigner(\n",
 70:     "    graph_data=g,\n",
 71:     "    min_block_size=k, # type: ignore\n",
 72:     "    init_method=\"prone_and_kmeans\", # type: ignore\n",
 73:     "    )\n",
 74:     "metis_assigner = assigner_const.create_assigner(\n",
 75:     "    graph_data=g,\n",
 76:     "    min_block_size=k, # type: ignore\n",
 77:     "    init_method=\"metis\", # type: ignore\n",
 78:     "    )\n",
 79:     "metis_ref_assigner = assigner_const.create_assigner(\n",
 80:     "    graph_data=g,\n",
 81:     "    min_block_size=k, # type: ignore\n",
 82:     "    init_method=\"metis_refine\", # type: ignore\n",
 83:     "    )"
 84:    ]
 85:   },
 86:   {
 87:    "cell_type": "code",
 88:    "execution_count": 10,
 89:    "id": "6030cfba",
 90:    "metadata": {},
 91:    "outputs": [
 92:     {
 93:      "name": "stdout",
 94:      "output_type": "stream",
 95:      "text": [
 96:       "[158, 83]\n",
 97:       "[158]\n"
 98:      ]
 99:     }
100:    ],
101:    "source": [
102:     "uniform_blocks = uniform_assigner.compute_assignment()\n",
103:     "#prone_blocks = prone_assigner.compute_assignment()\n",
104:     "metis_blocks = metis_assigner.compute_assignment()\n",
105:     "metis_ref_blocks = metis_ref_assigner.compute_assignment()"
106:    ]
107:   },
108:   {
109:    "cell_type": "code",
110:    "execution_count": 11,
111:    "id": "8b91f480",
112:    "metadata": {},
113:    "outputs": [
114:     {
115:      "name": "stdout",
116:      "output_type": "stream",
117:      "text": [
118:       "{3, 4}\n",
119:       "{2, 3, 4, 5}\n",
120:       "{3, 4}\n"
121:      ]
122:     }
123:    ],
124:    "source": [
125:     "print(set(uniform_blocks.block_sizes.values()))\n",
126:     "#print(set(prone_blocks.block_sizes.values()))\n",
127:     "print(set(metis_blocks.block_sizes.values()))\n",
128:     "print(set(metis_ref_blocks.block_sizes.values()))"
129:    ]
130:   },
131:   {
132:    "cell_type": "code",
133:    "execution_count": 12,
134:    "id": "399008f8",
135:    "metadata": {},
136:    "outputs": [
137:     {
138:      "name": "stdout",
139:      "output_type": "stream",
140:      "text": [
141:       "\n",
142:       "Small graph likelihood comparison:\n",
143:       "    Uniform assignment likelihood: 8261.40\n",
144:       "    Metis assignment likelihood: 4820.68\n",
145:       "    Metis-refine assignment likelihood: 4862.17\n",
146:       "\n"
147:      ]
148:     }
149:    ],
150:    "source": [
151:     "# compute likelihood of the assignments\n",
152:     "from sbm.likelihood import compute_global_bernoulli_ll_fast\n",
153:     "\n",
154:     "uniform_nll = -compute_global_bernoulli_ll_fast(uniform_blocks)\n",
155:     "#prone_ll = compute_global_bernoulli_ll_fast(prone_blocks)\n",
156:     "metis_nll = -compute_global_bernoulli_ll_fast(metis_blocks)\n",
157:     "metis_ref_nll = -compute_global_bernoulli_ll_fast(metis_ref_blocks)\n",
158:     "\n",
159:     "print(f\"\"\"\n",
160:     "Small graph likelihood comparison:\n",
161:     "    Uniform assignment likelihood: {uniform_nll:.2f}\n",
162:     "    Metis assignment likelihood: {metis_nll:.2f}\n",
163:     "    Metis-refine assignment likelihood: {metis_ref_nll:.2f}\n",
164:     "\"\"\")"
165:    ]
166:   },
167:   {
168:    "cell_type": "code",
169:    "execution_count": null,
170:    "id": "f3633444",
171:    "metadata": {},
172:    "outputs": [],
173:    "source": []
174:   },
175:   {
176:    "cell_type": "code",
177:    "execution_count": null,
178:    "id": "f2c3d8e0",
179:    "metadata": {},
180:    "outputs": [],
181:    "source": []
182:   }
183:  ],
184:  "metadata": {
185:   "kernelspec": {
186:    "display_name": "Python 3",
187:    "language": "python",
188:    "name": "python3"
189:   },
190:   "language_info": {
191:    "codemirror_mode": {
192:     "name": "ipython",
193:     "version": 3
194:    },
195:    "file_extension": ".py",
196:    "mimetype": "text/x-python",
197:    "name": "python",
198:    "nbconvert_exporter": "python",
199:    "pygments_lexer": "ipython3",
200:    "version": "3.12.11"
201:   }
202:  },
203:  "nbformat": 4,
204:  "nbformat_minor": 5
205: }

================
File: slurm_scripts/fit_sbm.sh
================
 1: #!/bin/sh
 2: ### General options
 3: #BSUB -q hpc
 4: #BSUB -J anon_sbm_fit
 5: #BSUB -n 1
 6: #BSUB -R "span[hosts=1]"
 7: #BSUB -R "rusage[mem=10GB]"
 8: #BSUB -M 20GB
 9: #BSUB -W 1:00
10: #BSUB -o slurm_outputs/anon_sbm_fit_%J.out
11: #BSUB -e slurm_outputs/anon_sbm_fit_%J.err
12: module purge
13: module load python3/3.12
14: source /zhome/c1/2/109045/anon_sbm_env/bin/activate
15: python3 src/pipelines/fit_sbm.py --fit_config /zhome/c1/2/109045/anon_sbm/configs/sbm_fit_block_size_experiments.yml

================
File: src/data_processing/process_all.py
================
 1: # src/data_processing/process_all.py
 2: """ 
 3: Script to run all processing steps of all datasets.
 4: """
 5: import subprocess
 6: import sys
 7: def run(cmd):
 8:     print(">>", " ".join(cmd))
 9:     subprocess.check_call(cmd)
10: datasets = [
11:     "data_processing.process_congress_twitter",
12:     "data_processing.process_email_eu",
13:     "data_processing.process_caltech",
14:     "data_processing.process_wiki_vote",
15:     "data_processing.process_enron_email",
16:     "data_processing.process_lastfm_asia",
17: ]
18: if __name__ == "__main__":
19:     python = sys.executable
20:     for dataset in datasets:
21:         run([python, "-m", dataset])

================
File: src/metrics/__init__.py
================
 1: from .shortest_path import shortest_path_distance, avg_path_length_difference
 2: from .degree import degree_distance
 3: from .clustering import clustering_distance, avg_clustering_difference
 4: from .spectral import eigen_val_distance, centrality_distance
 5: from .embedding import embedding_node2vec_ip_emd, embedding_prone_ip_emd
 6: from .community import infomap_codelength_difference, leiden_modularity_difference
 7: from .assortativity import assortativity_difference
 8: # registry maps a short name -> call-able
 9: REGISTRY = {
10:     "shortest_path": shortest_path_distance,
11:     "avg_path_length": avg_path_length_difference,
12:     "degree": degree_distance,
13:     "clustering": clustering_distance,
14:     "avg_clustering": avg_clustering_difference,
15:     "eigen_val": eigen_val_distance,
16:     "eigen_centrality": centrality_distance,
17:     "infomap": infomap_codelength_difference,
18:     "leiden": leiden_modularity_difference,
19:     "assortativity": assortativity_difference,
20:     "embedding_node2vec": embedding_node2vec_ip_emd,
21:     "embedding_prone": embedding_prone_ip_emd,
22: }

================
File: src/metrics/degree.py
================
 1: """ 
 2: Implementation of the degree distribution distance metric.
 3: This module computes the Earth-mover distance (1-D Wasserstein distance)
 4: between the degree distributions in two graphs represented by
 5: their adjacency matrices.
 6: """
 7: # metrics/degree.py
 8: from typing import Optional
 9: import numpy as np
10: from scipy.stats import wasserstein_distance #  1-D EMD
11: from scipy.sparse import csr_array
12: def degree_distance(
13:         emp_adj: csr_array,
14:         sur_adj: csr_array,
15:         directed: Optional[bool] = False,
16:         in_degree: Optional[bool] = False,
17:         out_degree: Optional[bool] = False,
18:         rng: np.random.Generator = np.random.default_rng(1)
19:     ) -> float:
20:     """ 
21:     Earth-mover (1-D Wasserstein) distance between the degree distributions
22:     of two graphs.
23:     Parameters
24:     ----------
25:     emp_adj, sur_adj : scipy.sparse.csr_matrix
26:         Adjacency of empirical and surrogate graphs (directed or undirected).
27:     directed : bool, optional
28:         If True, compute directed degree distribution.
29:         If False, compute undirected degree distribution.
30:     in_degree : bool, optional
31:         If True, compute in-degree distribution (for directed graphs).
32:         Ignored if `directed` is False.
33:     out_degree : bool, optional
34:         If True, compute out-degree distribution (for directed graphs).
35:         Ignored if `directed` is False.
36:     rng : np.random.Generator, optional
37:         Random number generator for sampling (default: np.random.default_rng(1)).
38:     Returns
39:     -------
40:     float
41:         Distance (lower = more similar).
42:     """
43:     if directed:
44:         raise NotImplementedError(
45:             "Directed degree distribution is not implemented yet."
46:         )
47:     else:
48:         if in_degree or out_degree:
49:             raise Warning(
50:                 "in_degree and out_degree are ignored for undirected graphs."
51:             )
52:         # Undirected degree distribution
53:         emp_degrees = np.asarray(emp_adj.sum(axis=0)).flatten()
54:         sur_degrees = np.asarray(sur_adj.sum(axis=0)).flatten()
55:         emp_dist = np.bincount(emp_degrees)
56:         sur_dist = np.bincount(sur_degrees)
57:         # Normalize distributions
58:         emp_dist = emp_dist / emp_dist.sum()
59:         sur_dist = sur_dist / sur_dist.sum()
60:         # Compute Earth-mover distance
61:         distance = wasserstein_distance(emp_dist, sur_dist)
62:         return distance

================
File: src/sbm/utils/pipeline_utils.py
================
  1: from typing import Dict, Union, TypedDict, List, Literal
  2: from pathlib import Path
  3: import numpy as np
  4: import scipy.sparse as sp
  5: def load_csr_npz(fn: Path):
  6:     with np.load(fn) as z:
  7:         return sp.csr_matrix(
  8:             (z["data"], z["indices"], z["indptr"]),
  9:             shape=z["shape"]
 10:         )
 11: InitMethodName = Literal["metis", "random", "ProneKMeans"]
 12: class DatasetSpec(TypedDict):
 13:     name: str
 14:     path: str
 15: class SBMConfig(TypedDict):
 16:     force_undirected: bool
 17:     min_block_size: int
 18:     n_iter: int
 19:     temperature: float
 20:     cooling_rate: float
 21:     init_method: InitMethodName
 22: class LoggingConfig(TypedDict):
 23:     logging_folder: str
 24:     log_every: int
 25: class FitConfig(TypedDict):
 26:     seed: int
 27:     sbm: SBMConfig
 28:     logging: LoggingConfig
 29:     datasets: List[DatasetSpec]
 30: class EvalConfig(TypedDict):
 31:     n_surrogates: int
 32:     overwrite: bool
 33:     metrics: List[str]
 34: def clean_filename(name: str) -> str:
 35:     """
 36:     Clean the name of all special characters and spaces, replacing them with underscores.
 37:     """
 38:     name = name.replace(":", "_")
 39:     name = name.replace(".", "_")
 40:     name = name.replace(",", "_")
 41:     return name
 42: def sbmfit_folderpath(
 43:     base_dir: Path,
 44:     sbm_config: SBMConfig,
 45:     data_spec: DatasetSpec,
 46: ) -> Path:
 47:     """
 48:     Generate the folderpath for storing a fitted SBM model based on the fit configuration.
 49:     Filename is created by unrolling the fit_config dictionary, using all fields and their values. 
 50:     :param name: Name of the dataset. 
 51:     """
 52:     folder_name = data_spec["name"] + "_" + "_".join(
 53:         f"{k}_{v}" for k, v in sorted(sbm_config.items())
 54:     )
 55:     folder_name = clean_filename(folder_name)
 56:     return base_dir / f"sbm_fit_{folder_name}"
 57: def surrogate_statistics_filename(
 58:     base_dir: Path,
 59:     eval_configs: EvalConfig,
 60:     sbm_config: SBMConfig,
 61:     data_spec: DatasetSpec,
 62: ) -> Path:
 63:     """
 64:     Generate the folfor surrogate statistics based on evaluation and fit configurations.
 65:     :param eval_configs: Evaluation configuration dictionary.
 66:     :param fit_config: Fit configuration dictionary.
 67:     :return: Path object representing the filename.
 68:     """
 69:     file_name = (
 70:         f"{data_spec['name']}_"
 71:         f"surrogates_{eval_configs['n_surrogates']}_"
 72:             #f"{'_'.join(eval_configs['metrics'])}_"
 73:         #f"{'_'.join(f'{k}_{v}' for k, v in sorted(sbm_config.items()))}"
 74:     )
 75:     file_name = clean_filename(file_name)
 76:     return base_dir / f"{file_name}.csv"
 77: def dataset_filepath(
 78:     base_dir: Path,
 79:     dataset_name: str,
 80: )-> Path:
 81:     """
 82:     Generate the filepath for a dataset based on its name.
 83:     :param base_dir: Base directory where datasets are stored.
 84:     :param dataset_name: Name of the dataset.
 85:     :return: Path object representing the dataset file path.
 86:     """
 87:     dataset_name = clean_filename(dataset_name)
 88:     return base_dir / f"{dataset_name}.npz"
 89: ##### Helper functions #####
 90: def fit_config_to_dicts(fit_config: FitConfig) -> List[dict[str, str]]:
 91:     """ 
 92:     Convert FitConfig to a list of DatasetSpec dictionaries.
 93:     One dictionary per dataset.
 94:     """
 95:     configs = [
 96:         {
 97:             "name": ds["name"],
 98:             "path": ds["path"],
 99:             **fit_config["sbm"],
100:         }
101:         for ds in fit_config["datasets"]
102:     ]
103:     for config in configs:
104:         if "seed" in config:
105:             config["seed"] = str(fit_config["seed"])
106:     return configs
107: def eval_config_to_dict(eval_config: EvalConfig) -> dict[str, str]:
108:     """
109:     Convert EvalConfig to a dictionary.
110:     """
111:     return {
112:         "n_surrogates": str(eval_config["n_surrogates"]),
113:         "metrics": "_".join(
114:                 eval_config["metrics"]    
115:             )
116:     }

================
File: src/sbm/edge_delta.py
================
  1: """
  2: Classes to build and hold changes in edge counts between blocks in a Stochastic Block Model (SBM).
  3: """
  4: from typing import DefaultDict, Tuple, List, Literal, Tuple, Iterator, Iterable, Literal
  5: from collections import defaultdict, Counter
  6: import numpy as np
  7: from numba import jit
  8: EdgeDeltas = Literal["PythonEdgeDelta", "NumpyEdgeDelta"]
  9: #### Pure python class for edge deltas #######
 10: class EdgeDelta: # edge-count changes between blocks
 11:     def __init__(self, n_blocks: int):
 12:         self._deltas: DefaultDict[Tuple[int, int], int] = defaultdict(int)
 13:     def _increment(self, count: int, block_i: int, block_j: int,
 14:      ) -> None:
 15:         """
 16:         Increment the edge count delta for a pair of blocks.
 17:         :param count: The change in edge count.
 18:         :param block_i: The first block index.
 19:         :param block_j: The second block index.
 20:         :return: Updated edge count delta.
 21:         """
 22:         if block_i < block_j:
 23:             self._deltas[(block_i, block_j)] = count
 24:         else:
 25:             self._deltas[(block_j, block_i)] = count
 26:     def __getitem__(self, pair: Tuple[int, int]) -> int:
 27:         """
 28:         Get the edge count delta for a pair of blocks.
 29:         :param pair: A tuple containing the block indices (i, j).
 30:         :return: The edge count delta for the pair.
 31:         """
 32:         if pair[0] < pair[1]:
 33:             return self._deltas.get(pair, 0)
 34:         else:
 35:             return self._deltas.get((pair[1], pair[0]), 0)
 36:     def __len__(self) -> int:
 37:         """
 38:         Return the number of non-zero edge count deltas.
 39:         :return: The number of non-zero edge count deltas.
 40:         """
 41:         return len([v for v in self._deltas.values() if v != 0])
 42:     def items(self) -> Iterator[Tuple[Tuple[int, int], int]]:
 43:         """
 44:         Yield tuple ((i, j), delta_e) for all stored pairs.
 45:         :return: An iterator over tuples of (block_i, block_j, delta_e).
 46:         """
 47:         for (i, j), delta_e in self._deltas.items():
 48:             yield (i, j), delta_e
 49:     def increment(self,
 50:                   counts: Iterable[int],
 51:                   blocks_i: Iterable[int],
 52:                   blocks_j: Iterable[int],
 53:      ) -> None:
 54:         """
 55:         Increment the edge counts deltas for a list of block pairs.
 56:         :param counts: List of changes in edge counts.
 57:         :param blocks_i: List of first block indices.
 58:         :param blocks_j: List of second block indices.
 59:         """
 60:         for count, block_i, block_j in zip(counts, blocks_i, blocks_j):
 61:             self._increment(count, block_i, block_j)
 62: ##### NumPy class for edge deltas ######
 63: class NumpyEdgeDelta(EdgeDelta):
 64:     """Sparse, symmetric (i <= j) container for edge‑count deltas.
 65:     Overwrites the pure‑Python :py:class:`EdgeDelta` class
 66:     Internally stores three *contiguous* one‑dimensional NumPy arrays
 67:     (`rows`, `cols`, `data`) in **COO** fashion as well as a Python
 68:     ``dict`` that maps the linearised pair key ``i * n_blocks + j`` to the
 69:     corresponding position in the arrays.  Only the *active* prefix
 70:     (``self.size``) of the arrays is considered valid – this makes the
 71:     structure friendly to Numba‐JIT’d consumers that expect fixed‑size
 72:     buffers.
 73:     The class focuses on *fast incremental updates* (``O(1)`` expected)
 74:     and cheap vector export; memory usage is proportional to the number
 75:     of *non‑zero* block pairs actually visited by the MCMC chain.
 76:     """
 77:     __slots__ = ("n_blocks", "rows", "cols", "data", "size", "_key2idx")
 78:     def __init__(self,
 79:                  n_blocks: int,
 80:                  initial_capacity: int = 64
 81:     ):
 82:         self.n_blocks: int = int(n_blocks)
 83:         cap = max(1, initial_capacity)
 84:         self.rows: np.ndarray = np.empty(cap, dtype=np.int32)
 85:         self.cols: np.ndarray = np.empty(cap, dtype=np.int32)
 86:         self.data: np.ndarray = np.zeros(cap, dtype=np.int32)
 87:         self.size: int = 0
 88:         # auxiliary map for *O(1)* lookup – not accessed inside JIT code
 89:         self._key2idx: dict[int, int] = {}
 90:     ### function for printing the object
 91:     def __repr__(self) -> str:
 92:         """Return a string representation of the NumpyEdgeDelta object."""
 93:         return (f"NumpyEdgeDelta(n_blocks={self.n_blocks}, "
 94:                 f"size={self.size}, "
 95:                 f"rows={self.rows[:self.size]}, "
 96:                 f"cols={self.cols[:self.size]}, "
 97:                 f"data={self.data[:self.size]})")
 98:     # ------------------------------------------------------------------
 99:     # Private helpers
100:     # ------------------------------------------------------------------
101:     def _encode(self, i: int, j: int) -> int:
102:         """Encode an ordered pair (i ≤ j) into a unique scalar."""
103:         return i * self.n_blocks + j
104:     def _ensure_capacity(self):
105:         if self.size == len(self.rows):
106:             # double in‑place (amortised O(1))
107:             new_cap = len(self.rows) * 2
108:             self.rows = np.resize(self.rows, new_cap)
109:             self.cols = np.resize(self.cols, new_cap)
110:             self.data = np.resize(self.data, new_cap)
111:     def _increment(self, count: int, block_i: int, block_j: int):
112:         """Add *value* to entry (i, j) (symmetric pair)."""
113:         if block_i > block_j:
114:             block_i, block_j = block_j, block_i
115:         key = self._encode(block_i, block_j)
116:         idx = self._key2idx.get(key)
117:         if idx is None:
118:             self._ensure_capacity()
119:             idx = self.size
120:             self.size += 1
121:             self.rows[idx] = block_i
122:             self.cols[idx] = block_j
123:             self.data[idx] = count
124:             self._key2idx[key] = idx
125:         else:
126:             self.data[idx] += count
127:     # ------------------------------------------------------------------
128:     # Public API
129:     # ------------------------------------------------------------------
130:     def __getitem__(self, pair: Tuple[int, int]) -> int:
131:         i, j = pair
132:         if i > j:
133:             i, j = j, i
134:         idx = self._key2idx.get(self._encode(i, j))
135:         return 0 if idx is None else int(self.data[idx])
136:     def __len__(self) -> int:
137:         """Return the number of non-zero and *active* pairs."""
138:         #return self.size
139:         active_pairs = self.data[:self.size]
140:         print(f"Active pairs: {active_pairs}")
141:         return active_pairs[active_pairs != 0].shape[0]
142:     def __setitem__(self, pair: Tuple[int, int], value: int):
143:         i, j = pair
144:         current = self[pair]
145:         self._increment(i, j, value - current)
146:     def items(self) -> Iterator[Tuple[Tuple[int, int], int]]:
147:         """Yield triples ``(i, j, delta_e)`` for all stored pairs."""
148:         for k in range(self.size):
149:             yield (int(self.rows[k]), int(self.cols[k])), int(self.data[k])
150:     def to_coo(self) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
151:         """Return the *active* COO view (no copying)."""
152:         return (self.rows[:self.size], self.cols[:self.size], self.data[:self.size])
153:     def increment(self,
154:             counts: Iterable[int],
155:             blocks_i: Iterable[int],
156:             blocks_j: Iterable[int],
157:      ) -> None:
158:         """Vectorised equivalent of ``increment`` for ``NumpyEdgeDelta``.
159:         Parameters
160:         ----------
161:         counts : 1‑D ``int`` array
162:             Changes in edge counts (positive or negative).
163:         blocks_i, blocks_j : 1‑D ``int`` arrays
164:             Block indices *parallel* to ``counts``.
165:         Notes
166:         -----
167:         The function works fully in **NumPy** space – no Python loops – by
168:         linearising the symmetric pair ``(i, j)`` into a *key* and then
169:         accumulating duplicate keys with :pyfunc:`numpy.add.at`.
170:         """
171:         # ------------------------------------------------------------------
172:         # Ensure ndarray inputs (copy=False promotes views)
173:         # ------------------------------------------------------------------
174:         assert isinstance(counts, (list, np.ndarray)) and \
175:                 isinstance(blocks_i, (list, np.ndarray)) and \
176:                 isinstance(blocks_j, (list, np.ndarray)), \
177:             "Counts and block indices must be list or ndarray."
178:         counts = np.asarray(counts, dtype=np.int32)
179:         blocks_i = np.asarray(blocks_i, dtype=np.int32)
180:         blocks_j = np.asarray(blocks_j, dtype=np.int32)
181:         # ------------------------------------------------------------------
182:         # Normalise the pair ordering so that i ≤ j
183:         # ------------------------------------------------------------------
184:         swap_mask = blocks_i > blocks_j
185:         if swap_mask.any():
186:             blocks_i, blocks_j = blocks_i.copy(), blocks_j.copy()  # avoid aliasing
187:             blocks_i[swap_mask], blocks_j[swap_mask] = blocks_j[swap_mask], blocks_i[swap_mask]
188:         # ------------------------------------------------------------------
189:         # Encode pairs → scalar keys and reduce duplicates in *one* pass
190:         # ------------------------------------------------------------------
191:         n_blocks = self.n_blocks
192:         keys = blocks_i.astype(np.int64) * n_blocks + blocks_j
193:         # ``np.unique`` already sorts – good for cache locality
194:         uniq_keys, inverse = np.unique(keys, return_inverse=True)
195:         reduced = np.zeros_like(uniq_keys, dtype=np.int32)
196:         np.add.at(reduced, inverse, counts)
197:         # ------------------------------------------------------------------
198:         # Decode unique keys and perform bulk update via the fast method
199:         # ------------------------------------------------------------------
200:         rows = (uniq_keys // n_blocks).astype(np.int32)
201:         cols = (uniq_keys %  n_blocks).astype(np.int32)
202:         for r, c, dv in zip(rows, cols, reduced):
203:             if dv != 0:
204:                 self._increment(block_i=int(r), block_j=int(c), count=int(dv))

================
File: src/sbm/sampling.py
================
  1: """ 
  2: Functions for sampling graph from SBM model
  3: """
  4: # sbm/sampling.py
  5: from typing import List, Optional
  6: import numpy as np
  7: from scipy.sparse import csr_array, coo_matrix
  8: from sbm.graph_data import GraphData
  9: from sbm.io import SBMFit
 10: def sample_adjacency_matrix(
 11:     block_sizes: List[int],
 12:     block_connectivity: csr_array,
 13:     rng: np.random.Generator,
 14:     directed: bool = False,
 15: ) -> csr_array:
 16:     """
 17:     Draw a random graph from the *profile* Bernoulli SBM specified by
 18:     `block_edge_counts` (edge counts m_rs) and `block_sizes`.
 19:     :param block_sizes: Sizes of the blocks.
 20:     :param block_connectivity: Sparse matrix of edge counts m_rs between blocks.
 21:     :param directed: Whether the graph is directed or undirected.
 22:     :param rng: Random number generator for reproducibility.
 23:     :return: Sparse adjacency matrix of the sampled graph.
 24:     """
 25:     block_sizes = list(map(int, block_sizes))
 26:     B = len(block_sizes)
 27:     N = sum(block_sizes)
 28:     # cumulative offsets → map local idx → global idx
 29:     offsets = np.cumsum([0] + block_sizes)
 30:     rows: list[int] = []
 31:     cols: list[int] = []
 32:     # ------------------------------------------------------------------
 33:     for r in range(B):
 34:         n_r = block_sizes[r]
 35:         off_r = offsets[r]
 36:         # -- diagonal block -------------------------------------------
 37:         m_rr = int(block_connectivity[r, r]) # type: ignore
 38:         if m_rr:
 39:             if directed:
 40:                 n_poss = n_r * (n_r - 1)
 41:                 p = m_rr / n_poss
 42:                 mask = (rng.random((n_r, n_r)) < p).astype(int)
 43:                 mask[np.diag_indices(n_r)] = 0
 44:                 rr, cc = np.nonzero(mask)
 45:                 rows.extend(off_r + rr)
 46:                 cols.extend(off_r + cc)
 47:             else:
 48:                 n_poss = n_r * (n_r - 1) // 2
 49:                 p = m_rr / n_poss
 50:                 triu_mask = rng.random((n_r, n_r)) < p
 51:                 tri_r, tri_c = np.triu_indices(n_r, k=1)
 52:                 sel = triu_mask[tri_r, tri_c]
 53:                 rr = tri_r[sel]; cc = tri_c[sel]
 54:                 rows.extend(off_r + rr)
 55:                 cols.extend(off_r + cc)
 56:                 rows.extend(off_r + cc)
 57:                 cols.extend(off_r + rr)
 58:         # -- off-diagonal blocks --------------------------------------
 59:         s_iter = range(B) if directed else range(r + 1, B)
 60:         for s in s_iter:
 61:             if s == r:
 62:                 continue
 63:             m_rs = int(block_connectivity[r, s]) # type: ignore
 64:             if m_rs == 0:
 65:                 continue
 66:             n_s = block_sizes[s]
 67:             off_s = offsets[s]
 68:             n_poss = n_r * n_s
 69:             p = m_rs / n_poss
 70:             mask = rng.random((n_r, n_s)) < p
 71:             rr, cc = np.nonzero(mask)
 72:             rows.extend(off_r + rr)
 73:             cols.extend(off_s + cc)
 74:             if not directed:
 75:                 # mirror block
 76:                 rows.extend(off_s + cc)
 77:                 cols.extend(off_r + rr)
 78:     data = np.ones(len(rows), dtype=np.int8)
 79:     adj = coo_matrix((data, (rows, cols)), shape=(N, N))
 80:     # ensure no duplicate edge
 81:     adj.sum_duplicates() 
 82:     adj.data.fill(1)
 83:     # convert to csr format
 84:     adj = csr_array(adj)
 85:     adj.sort_indices()
 86:     return adj
 87: def sample_sbm_graph(
 88:             block_sizes: List[int],
 89:             block_connectivity: csr_array,
 90:             directed:bool,
 91:             rng: np.random.Generator,
 92:             metadata: Optional[dict] = None
 93:     )->GraphData:
 94:     """
 95:     Sample a graph from a Stochastic Block Model (SBM) given block sizes and connectivity.
 96:     :param block_sizes: List of sizes for each block.
 97:     :param block_connectivity: Sparse matrix representing connectivity between blocks.
 98:     :param directed: Whether the graph is directed or undirected.
 99:     :param rng: Random number generator for reproducibility.
100:     :param metadata: Optional metadata to include in the graph data.
101:     :return: GraphData object containing the sampled graph.
102:     """
103:     if metadata is None:
104:         metadata = {}
105:     # Validate inputs
106:     if not isinstance(block_sizes, list) or not all(isinstance(size, int) for size in block_sizes):
107:         raise ValueError("block_sizes must be a list of integers.")
108:     if not isinstance(block_connectivity, csr_array):
109:         raise ValueError("block_connectivity must be a scipy.sparse.csr_array.")
110:     if len(block_sizes) != block_connectivity.shape[0] or len(block_sizes) != block_connectivity.shape[1]: #type: ignore
111:         raise ValueError("block_sizes length must match the dimensions of block_connectivity.")
112:     if not isinstance(directed, bool):
113:         raise ValueError("directed must be a boolean value.")
114:     if not isinstance(rng, np.random.Generator):
115:         raise ValueError("rng must be a numpy random Generator instance.")    
116:     adj = sample_adjacency_matrix(
117:         block_sizes=block_sizes,
118:         block_connectivity=block_connectivity,
119:         directed=directed,
120:         rng=rng
121:     )
122:     return GraphData(adjacency_matrix=adj, directed=directed)
123: def sample_sbm_graph_from_fit(sbm_fit: SBMFit, rng: np.random.Generator) -> GraphData:
124:     """
125:     Sample a graph from a Stochastic Block Model (SBM) fit.
126:     :param sbm_fit: SBMFit object containing block sizes and connectivity.
127:     :param rng: Random number generator for reproducibility.
128:     :return: GraphData object containing the sampled graph.
129:     """
130:     return sample_sbm_graph(
131:         block_sizes=sbm_fit.block_sizes,
132:         block_connectivity=sbm_fit.block_conn,
133:         directed=sbm_fit.directed_graph,
134:         rng=rng,
135:         metadata=sbm_fit.metadata
136:     )

================
File: .gitignore
================
 1: # --------------------------------------------------------------------
 2: #  Python byte-code / build artefacts
 3: # --------------------------------------------------------------------
 4: __pycache__/
 5: *.py[cod]
 6: *.pyo
 7: *.so
 8: *.dylib
 9: *.egg-info/
10: build/
11: dist/
12: 
13: # --------------------------------------------------------------------
14: #  Virtual-envs
15: # --------------------------------------------------------------------
16: .venv/
17: .env/
18: .mamba/
19: *.conda_env/
20: 
21: # --------------------------------------------------------------------
22: #  Data & model artefacts  (generated by pipeline)
23: # --------------------------------------------------------------------
24: data/
25: models/
26: logs/
27: reports/
28: figures/
29: results/
30: 
31: # --------------------------------------------------------------------
32: #  Large numpy / scipy files anywhere but src/tests
33: # --------------------------------------------------------------------
34: *.npz
35: *.npy
36: *.pkl
37: *.h5
38: *.parquet
39: 
40: # --------------------------------------------------------------------
41: #  Jupyter checkpoints
42: # --------------------------------------------------------------------
43: .ipynb_checkpoints/
44: 
45: # --------------------------------------------------------------------
46: #  IDE / OS metadata
47: # --------------------------------------------------------------------
48: .idea/
49: .vscode/
50: *.swp
51: .DS_Store
52: Thumbs.db
53: 
54: # --------------------------------------------------------------------
55: #  Misc
56: # --------------------------------------------------------------------
57: *.bak
58: *.tmp
59: repomix-output.txt
60: *.lprof

================
File: tmp_test.py
================
 1: import numpy as np
 2: import scipy.sparse as sp
 3: import line_profiler
 4: from sbm.io import SBMFit
 5: from sbm.noisy_fit import create_sbm_noise
 6: EPS, DELTA, ALPHA = 1.0, 1e-6, 0.999
 7: RNG = np.random.default_rng(0)
 8: @line_profiler.profile
 9: def _make_sbm(block_sizes, P):
10:     """
11:     Create an SBMFit with integer edge counts according to prob-matrix P.
12:     P must be square len(block_sizes) × len(block_sizes), symmetric.
13:     """
14:     k_vec = np.array(block_sizes, int)
15:     B = len(k_vec)
16:     data, rows, cols = [], [], []
17:     for r in range(B):
18:         for s in range(r, B):
19:             N = k_vec[r] * k_vec[s] if r != s else k_vec[r] * (k_vec[r] - 1) // 2
20:             m = int(round(P[r, s] * N))
21:             if m > 0:
22:                 rows.append(r); cols.append(s); data.append(m)
23:     M = sp.csr_array((data, (rows, cols)), shape=(B, B))
24:     M = M + M.T - sp.diags(M.diagonal())
25:     return SBMFit(
26:         block_sizes=list(block_sizes),
27:         block_conn=M,
28:         directed_graph=False,
29:         neg_loglike=-1.0,
30:         metadata={},
31:     )
32: def test_sample_integrity():
33:     P = np.array([[0.8, 0.3],
34:                   [0.3, 0.05]])
35:     sbm   = _make_sbm([3, 4], P)
36:     print('check')
37:     noise = create_sbm_noise(sbm, EPS, DELTA, ALPHA,
38:                              noise_type="heterogeneous_gaussian")
39:     print('check 2')
40:     sbm_noisy = noise.sample_sbm_fit(RNG)
41:     print('check 3')
42: def test_big_blocks_memory():
43:     B = 100
44:     k = 3
45:     sizes = [k] * B
46:     P = np.full((B, B), 0.1)
47:     np.fill_diagonal(P, 0.2)
48:     sbm = _make_sbm(sizes, P)          # builds sparse counts
49:     nz = create_sbm_noise(sbm, 1.0, 1e-6, 0.999,
50:                           noise_type="heterogeneous_gaussian")
51: if __name__ == "__main__":
52:     test_sample_integrity()

================
File: notebooks/move_type_comparisons_30-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "code",
  5:    "execution_count": 1,
  6:    "id": "0c56f619",
  7:    "metadata": {},
  8:    "outputs": [],
  9:    "source": [
 10:     "# Notebook for comparing move-types and their resulting likelihood trajectories"
 11:    ]
 12:   },
 13:   {
 14:    "cell_type": "code",
 15:    "execution_count": 2,
 16:    "id": "ca236c42",
 17:    "metadata": {},
 18:    "outputs": [],
 19:    "source": [
 20:     "from pathlib import Path\n",
 21:     "\n",
 22:     "import numpy as np\n",
 23:     "import pandas as pd\n",
 24:     "import scipy.sparse as sp\n",
 25:     "\n",
 26:     "from sbm.io import GraphLoader\n",
 27:     "from sbm.model import SBMModel\n",
 28:     "\n",
 29:     "from sbm.utils.pipeline_utils import (\n",
 30:     "    sbmfit_folderpath,\n",
 31:     "    FitConfig,\n",
 32:     ")"
 33:    ]
 34:   },
 35:   {
 36:    "cell_type": "code",
 37:    "execution_count": 3,
 38:    "id": "75c16b11",
 39:    "metadata": {},
 40:    "outputs": [],
 41:    "source": [
 42:     "g = GraphLoader.load(\n",
 43:     "    Path(\"/Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist\"),\n",
 44:     "    force_undirected=True, # type: ignore\n",
 45:     "    )"
 46:    ]
 47:   },
 48:   {
 49:    "cell_type": "code",
 50:    "execution_count": 4,
 51:    "id": "e54ed4ac",
 52:    "metadata": {},
 53:    "outputs": [],
 54:    "source": [
 55:     "rng = np.random.default_rng(1) # type: ignore"
 56:    ]
 57:   },
 58:   {
 59:    "cell_type": "code",
 60:    "execution_count": 5,
 61:    "id": "e8d0bf40",
 62:    "metadata": {},
 63:    "outputs": [],
 64:    "source": [
 65:     "from sbm.block_assigner import AssignerConstructor\n",
 66:     "\n",
 67:     "assigner_const = AssignerConstructor(rng=rng)\n",
 68:     "assigner = assigner_const.create_assigner(\n",
 69:     "    graph_data=g,\n",
 70:     "    min_block_size=5, # type: ignore\n",
 71:     "    init_method=\"metis_refine\", # type: ignore\n",
 72:     "    )"
 73:    ]
 74:   },
 75:   {
 76:    "cell_type": "code",
 77:    "execution_count": 6,
 78:    "id": "ecbbb1c7",
 79:    "metadata": {},
 80:    "outputs": [],
 81:    "source": [
 82:     "min_block_size = 5\n",
 83:     "cooling_rate = 0.9999\n",
 84:     "max_blocks = None\n",
 85:     "patience  = int(1e3)\n",
 86:     "return_nll = True"
 87:    ]
 88:   },
 89:   {
 90:    "cell_type": "code",
 91:    "execution_count": 7,
 92:    "id": "51e49a44",
 93:    "metadata": {},
 94:    "outputs": [
 95:     {
 96:      "name": "stdout",
 97:      "output_type": "stream",
 98:      "text": [
 99:       "\n",
100:       "\n",
101:       "Failed to import TensorFlow. Please note that TensorFlow is not installed by default when you install TensorFlow Probability. This is so that users can decide whether to install the GPU-enabled TensorFlow package. To use TensorFlow Probability, please install the most recent version of TensorFlow, by following instructions at https://tensorflow.org/install.\n",
102:       "\n",
103:       "\n"
104:      ]
105:     },
106:     {
107:      "ename": "ModuleNotFoundError",
108:      "evalue": "No module named 'tensorflow'",
109:      "output_type": "error",
110:      "traceback": [
111:       "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
112:       "\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)",
113:       "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[7]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m initial_blocks = assigner.compute_assignment()\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m uniform_swap_model = \u001b[43mSBMModel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m    \u001b[49m\u001b[43minitial_blocks\u001b[49m\u001b[43m=\u001b[49m\u001b[43minitial_blocks\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrng\u001b[49m\u001b[43m=\u001b[49m\u001b[43mrng\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      5\u001b[39m \u001b[43m    \u001b[49m\u001b[43mchange_freq\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;66;43;03m# probabilities of trying each move type\u001b[39;49;00m\n\u001b[32m      6\u001b[39m \u001b[43m        \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43muniform_swap\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[32;43m1\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      7\u001b[39m \u001b[43m    \u001b[49m\u001b[43m}\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      8\u001b[39m \u001b[43m)\u001b[49m\n\u001b[32m     10\u001b[39m uniform_nll = uniform_swap_model.fit(\n\u001b[32m     11\u001b[39m     min_block_size=min_block_size,\n\u001b[32m     12\u001b[39m     cooling_rate=cooling_rate,\n\u001b[32m   (...)\u001b[39m\u001b[32m     15\u001b[39m     return_nll=\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[32m     16\u001b[39m )\n\u001b[32m     17\u001b[39m block_data = uniform_swap_model.block_data\n",
114:       "\u001b[36mFile \u001b[39m\u001b[32m~/anon_sbm/src/sbm/model.py:77\u001b[39m, in \u001b[36mSBMModel.__init__\u001b[39m\u001b[34m(self, initial_blocks, rng, likelihood_type, logger, change_freq)\u001b[39m\n\u001b[32m     46\u001b[39m \u001b[38;5;28mself\u001b[39m.move_executor = NodeMover(\n\u001b[32m     47\u001b[39m     block_data=\u001b[38;5;28mself\u001b[39m.block_data,\n\u001b[32m     48\u001b[39m     )\n\u001b[32m     50\u001b[39m change_proposer = {\n\u001b[32m     51\u001b[39m     \u001b[33m\"\u001b[39m\u001b[33muniform_swap\u001b[39m\u001b[33m\"\u001b[39m: NodeSwapProposer(\n\u001b[32m     52\u001b[39m                 block_data=\u001b[38;5;28mself\u001b[39m.block_data,\n\u001b[32m   (...)\u001b[39m\u001b[32m     75\u001b[39m             ),\n\u001b[32m     76\u001b[39m }\n\u001b[32m---> \u001b[39m\u001b[32m77\u001b[39m \u001b[38;5;28mself\u001b[39m.mcmc_algorithm = \u001b[43mMCMCAlgorithm\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m     78\u001b[39m \u001b[43m    \u001b[49m\u001b[43mblock_data\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mblock_data\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     79\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlikelihood_calculator\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mlikelihood_calculator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     80\u001b[39m \u001b[43m    \u001b[49m\u001b[43mchange_proposer\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mchange_proposer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;66;43;03m# type: ignore\u001b[39;49;00m\n\u001b[32m     81\u001b[39m \u001b[43m    \u001b[49m\u001b[43mchange_freq\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mchange_freq\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;66;43;03m# type: ignore\u001b[39;49;00m\n\u001b[32m     82\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrng\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mrng\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     83\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlogger\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlogger\u001b[49m\n\u001b[32m     84\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
115:       "\u001b[36mFile \u001b[39m\u001b[32m~/anon_sbm/src/sbm/mcmc.py:54\u001b[39m, in \u001b[36mMCMCAlgorithm.__init__\u001b[39m\u001b[34m(self, block_data, likelihood_calculator, change_proposer, rng, logger, monitor, diag_lag, diag_checkpoints, change_freq)\u001b[39m\n\u001b[32m     52\u001b[39m \u001b[38;5;28mself\u001b[39m._monitor = monitor\n\u001b[32m     53\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m monitor:\n\u001b[32m---> \u001b[39m\u001b[32m54\u001b[39m     \u001b[38;5;28mself\u001b[39m._diag= \u001b[43mOnlineDiagnostics\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmax_lag\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdiag_lag\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     55\u001b[39m     \u001b[38;5;28mself\u001b[39m._diag_checkpoints = diag_checkpoints\n\u001b[32m     56\u001b[39m     \u001b[38;5;28mself\u001b[39m._off_diag = \u001b[38;5;28mself\u001b[39m._select_off_pairs(max_panel=diag_checkpoints)\n",
116:       "\u001b[36mFile \u001b[39m\u001b[32m~/anon_sbm/src/sbm/mcmc_diagnostics.py:38\u001b[39m, in \u001b[36mOnlineDiagnostics.__init__\u001b[39m\u001b[34m(self, max_lag)\u001b[39m\n\u001b[32m     36\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, max_lag: \u001b[38;5;28mint\u001b[39m = \u001b[32m100\u001b[39m) -> \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     37\u001b[39m     \u001b[38;5;66;03m# --- R̂ and ESS reducers ----------------------------------------------\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m38\u001b[39m     \u001b[38;5;28mself\u001b[39m._rhat_red = \u001b[43mtfp\u001b[49m\u001b[43m.\u001b[49m\u001b[43mexperimental\u001b[49m\u001b[43m.\u001b[49m\u001b[43mmcmc\u001b[49m.PotentialScaleReductionReducer(\n\u001b[32m     39\u001b[39m         independent_chain_ndims=\u001b[32m1\u001b[39m          \u001b[38;5;66;03m# <- 1 statistic axis\u001b[39;00m\n\u001b[32m     40\u001b[39m     )\n\u001b[32m     41\u001b[39m     \u001b[38;5;28mself\u001b[39m._ess_red  = tfp.experimental.mcmc.CovarianceReducer(\n\u001b[32m     42\u001b[39m         max_lags=max_lag,                  \u001b[38;5;66;03m# Geyer truncation window\u001b[39;00m\n\u001b[32m     43\u001b[39m         independent_chain_ndims=\u001b[32m1\u001b[39m\n\u001b[32m     44\u001b[39m     )\n",
117:       "\u001b[36mFile \u001b[39m\u001b[32m/opt/homebrew/Caskroom/miniforge/base/envs/anon_sbm_notebook_arm/lib/python3.12/site-packages/tensorflow_probability/python/internal/lazy_loader.py:56\u001b[39m, in \u001b[36mLazyLoader.__getattr__\u001b[39m\u001b[34m(self, item)\u001b[39m\n\u001b[32m     55\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m__getattr__\u001b[39m(\u001b[38;5;28mself\u001b[39m, item):\n\u001b[32m---> \u001b[39m\u001b[32m56\u001b[39m   module = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_load\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     57\u001b[39m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(module, item)\n",
118:       "\u001b[36mFile \u001b[39m\u001b[32m/opt/homebrew/Caskroom/miniforge/base/envs/anon_sbm_notebook_arm/lib/python3.12/site-packages/tensorflow_probability/python/internal/lazy_loader.py:40\u001b[39m, in \u001b[36mLazyLoader._load\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m     38\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"Load the module and insert it into the parent's globals.\"\"\"\u001b[39;00m\n\u001b[32m     39\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(\u001b[38;5;28mself\u001b[39m._on_first_access):\n\u001b[32m---> \u001b[39m\u001b[32m40\u001b[39m   \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_on_first_access\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     41\u001b[39m   \u001b[38;5;28mself\u001b[39m._on_first_access = \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m     42\u001b[39m \u001b[38;5;66;03m# Import the target module and insert it into the parent's namespace\u001b[39;00m\n",
119:       "\u001b[36mFile \u001b[39m\u001b[32m/opt/homebrew/Caskroom/miniforge/base/envs/anon_sbm_notebook_arm/lib/python3.12/site-packages/tensorflow_probability/python/__init__.py:38\u001b[39m, in \u001b[36m_validate_tf_environment\u001b[39m\u001b[34m(package)\u001b[39m\n\u001b[32m     27\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"Check TF version and (depending on package) warn about TensorFloat32.\u001b[39;00m\n\u001b[32m     28\u001b[39m \n\u001b[32m     29\u001b[39m \u001b[33;03mArgs:\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m     35\u001b[39m \u001b[33;03m    inadequate.\u001b[39;00m\n\u001b[32m     36\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m     37\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m---> \u001b[39m\u001b[32m38\u001b[39m   \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mtensorflow\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mtf\u001b[39;00m\n\u001b[32m     39\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mImportError\u001b[39;00m, \u001b[38;5;167;01mModuleNotFoundError\u001b[39;00m):\n\u001b[32m     40\u001b[39m   \u001b[38;5;66;03m# Print more informative error message, then reraise.\u001b[39;00m\n\u001b[32m     41\u001b[39m   \u001b[38;5;28mprint\u001b[39m(\u001b[33m'\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33mFailed to import TensorFlow. Please note that TensorFlow is not \u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     42\u001b[39m         \u001b[33m'\u001b[39m\u001b[33minstalled by default when you install TensorFlow Probability. This \u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     43\u001b[39m         \u001b[33m'\u001b[39m\u001b[33mis so that users can decide whether to install the GPU-enabled \u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     44\u001b[39m         \u001b[33m'\u001b[39m\u001b[33mTensorFlow package. To use TensorFlow Probability, please install \u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     45\u001b[39m         \u001b[33m'\u001b[39m\u001b[33mthe most recent version of TensorFlow, by following instructions at \u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     46\u001b[39m         \u001b[33m'\u001b[39m\u001b[33mhttps://tensorflow.org/install.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m'\u001b[39m)\n",
120:       "\u001b[31mModuleNotFoundError\u001b[39m: No module named 'tensorflow'"
121:      ]
122:     }
123:    ],
124:    "source": [
125:     "initial_blocks = assigner.compute_assignment()\n",
126:     "uniform_swap_model = SBMModel(\n",
127:     "    initial_blocks=initial_blocks,\n",
128:     "    rng=rng,\n",
129:     "    change_freq = { # probabilities of trying each move type\n",
130:     "        \"uniform_swap\": 1,\n",
131:     "    },\n",
132:     ")\n",
133:     "\n",
134:     "uniform_nll = uniform_swap_model.fit(\n",
135:     "    min_block_size=min_block_size,\n",
136:     "    cooling_rate=cooling_rate,\n",
137:     "    max_blocks=max_blocks,\n",
138:     "    patience=10**3,\n",
139:     "    return_nll=True,\n",
140:     ")\n",
141:     "block_data = uniform_swap_model.block_data"
142:    ]
143:   },
144:   {
145:    "cell_type": "code",
146:    "execution_count": null,
147:    "id": "b50abed4",
148:    "metadata": {},
149:    "outputs": [
150:     {
151:      "name": "stdout",
152:      "output_type": "stream",
153:      "text": [
154:       "Stopping early after 28371 iterations due to patience limit.\n"
155:      ]
156:     }
157:    ],
158:    "source": [
159:     "initial_blocks = assigner.compute_assignment()\n",
160:     "mix_swap_model = SBMModel(\n",
161:     "    initial_blocks=initial_blocks,\n",
162:     "    rng=rng,\n",
163:     "    change_freq = { # probabilities of trying each move type\n",
164:     "        #\"uniform_swap\": 0.5,\n",
165:     "        \"edge_based_swap\": 1,\n",
166:     "    },\n",
167:     ")\n",
168:     "\n",
169:     "mix_nll = mix_swap_model.fit(\n",
170:     "    min_block_size=min_block_size,\n",
171:     "    cooling_rate=cooling_rate,\n",
172:     "    max_blocks=max_blocks,\n",
173:     "    patience=10**3,\n",
174:     "    return_nll=True,\n",
175:     ")"
176:    ]
177:   },
178:   {
179:    "cell_type": "code",
180:    "execution_count": null,
181:    "id": "10298ee8",
182:    "metadata": {},
183:    "outputs": [
184:     {
185:      "data": {
186:       "image/png": "",
187:       "text/plain": [
188:        "<Figure size 800x600 with 1 Axes>"
189:       ]
190:      },
191:      "metadata": {},
192:      "output_type": "display_data"
193:     }
194:    ],
195:    "source": [
196:     "# comparing initial methods\n",
197:     "import matplotlib.pyplot as plt\n",
198:     "fig, ax = plt.subplots(figsize=(8,6))\n",
199:     "\n",
200:     "ax.plot(np.arange(len(uniform_nll)),uniform_nll, label=\"Uniform Swap\", color=\"salmon\")# type: ignore\n",
201:     "\n",
202:     "ax.plot(np.arange(len(mix_nll)), mix_nll, label=\"Edge-biased swap\", color=\"slategrey\") # type: ignore\n",
203:     "\n",
204:     "ax.set_xlabel(\"Iteration\")\n",
205:     "ax.set_ylabel(\"Log Likelihood\")\n",
206:     "\n",
207:     "ax.legend()\n",
208:     "plt.show(fig)"
209:    ]
210:   },
211:   {
212:    "cell_type": "code",
213:    "execution_count": null,
214:    "id": "73af6cbf",
215:    "metadata": {},
216:    "outputs": [],
217:    "source": [
218:     "uniform_swap_model = SBMModel(\n",
219:     "    initial_blocks=block_data,\n",
220:     "    rng=rng,\n",
221:     "    change_freq = { # probabilities of trying each move type\n",
222:     "        \"uniform_swap\": 1.0,\n",
223:     "    },\n",
224:     ")\n",
225:     "\n",
226:     "edge_swap_model = SBMModel(\n",
227:     "    initial_blocks=block_data,\n",
228:     "    rng=rng,\n",
229:     "    change_freq = { # probabilities of trying each move type\n",
230:     "    \"edge_based_swap\": 1.0,\n",
231:     "    },\n",
232:     ")\n",
233:     "triad_swap_model = SBMModel(\n",
234:     "    initial_blocks=block_data,\n",
235:     "    rng=rng,\n",
236:     "    change_freq = { # probabilities of trying each move type\n",
237:     "    \"triadic_swap\": 1.0,\n",
238:     "    },\n",
239:     ")\n",
240:     "cross_swap_model = SBMModel(\n",
241:     "    initial_blocks=block_data,\n",
242:     "    rng=rng,\n",
243:     "    change_freq = { # probabilities of trying each move type\n",
244:     "    \"cross_triangle\": 1.0,\n",
245:     "    },\n",
246:     ")\n",
247:     "mix_swap_model = SBMModel(\n",
248:     "    initial_blocks=block_data,\n",
249:     "    rng=rng,\n",
250:     "    change_freq = {\n",
251:     "    \"edge_based_swap\": 0.6,\n",
252:     "    \"triadic_swap\": 0.2,\n",
253:     "    \"twin_leaf\": 0.15,\n",
254:     "    \"uniform_swap\": 0.05\n",
255:     "    },\n",
256:     ")"
257:    ]
258:   },
259:   {
260:    "cell_type": "code",
261:    "execution_count": null,
262:    "id": "574ec66f",
263:    "metadata": {},
264:    "outputs": [
265:     {
266:      "name": "stdout",
267:      "output_type": "stream",
268:      "text": [
269:       "Stopping early after 6552 iterations due to patience limit.\n"
270:      ]
271:     }
272:    ],
273:    "source": [
274:     "uniform_nll = uniform_swap_model.fit(\n",
275:     "    min_block_size=min_block_size,\n",
276:     "    cooling_rate=cooling_rate,\n",
277:     "    max_blocks=max_blocks,\n",
278:     "    patience=patience,\n",
279:     "    return_nll=return_nll,\n",
280:     ")"
281:    ]
282:   },
283:   {
284:    "cell_type": "code",
285:    "execution_count": null,
286:    "id": "76f33e97",
287:    "metadata": {},
288:    "outputs": [
289:     {
290:      "name": "stdout",
291:      "output_type": "stream",
292:      "text": [
293:       "Stopping early after 11427 iterations due to patience limit.\n"
294:      ]
295:     }
296:    ],
297:    "source": [
298:     "edge_nll = edge_swap_model.fit(\n",
299:     "    min_block_size=min_block_size,\n",
300:     "    cooling_rate=cooling_rate,\n",
301:     "    max_blocks=max_blocks,\n",
302:     "    patience=patience,\n",
303:     "    return_nll=return_nll,\n",
304:     ")"
305:    ]
306:   },
307:   {
308:    "cell_type": "code",
309:    "execution_count": null,
310:    "id": "96b956a2",
311:    "metadata": {},
312:    "outputs": [
313:     {
314:      "name": "stdout",
315:      "output_type": "stream",
316:      "text": [
317:       "Stopping early after 5153 iterations due to patience limit.\n"
318:      ]
319:     }
320:    ],
321:    "source": [
322:     "triad_nll = triad_swap_model.fit(\n",
323:     "    min_block_size=min_block_size,\n",
324:     "    cooling_rate=cooling_rate,\n",
325:     "    max_blocks=max_blocks,\n",
326:     "    patience=patience,\n",
327:     "    return_nll=return_nll,\n",
328:     ")"
329:    ]
330:   },
331:   {
332:    "cell_type": "code",
333:    "execution_count": null,
334:    "id": "d5a89795",
335:    "metadata": {},
336:    "outputs": [
337:     {
338:      "name": "stdout",
339:      "output_type": "stream",
340:      "text": [
341:       "Stopping early after 1000 iterations due to patience limit.\n"
342:      ]
343:     }
344:    ],
345:    "source": [
346:     "mix_nll = mix_swap_model.fit(\n",
347:     "    min_block_size=min_block_size,\n",
348:     "    cooling_rate=cooling_rate,\n",
349:     "    max_blocks=max_blocks,\n",
350:     "    patience=patience,\n",
351:     "    return_nll=return_nll,\n",
352:     ")"
353:    ]
354:   },
355:   {
356:    "cell_type": "code",
357:    "execution_count": null,
358:    "id": "c9ffcc17",
359:    "metadata": {},
360:    "outputs": [],
361:    "source": [
362:     "rng.normal(0, 1, size=1000).A1 # to make sure rng is not empty\n",
363:     "oo\n",
364:     "o"
365:    ]
366:   },
367:   {
368:    "cell_type": "code",
369:    "execution_count": null,
370:    "id": "6dc70577",
371:    "metadata": {},
372:    "outputs": [
373:     {
374:      "data": {
375:       "image/png": "",
376:       "text/plain": [
377:        "<Figure size 800x600 with 1 Axes>"
378:       ]
379:      },
380:      "metadata": {},
381:      "output_type": "display_data"
382:     }
383:    ],
384:    "source": [
385:     "import matplotlib.pyplot as plt\n",
386:     "fig, ax = plt.subplots(figsize=(8,6))\n",
387:     "\n",
388:     "ax.plot(np.arange(len(uniform_nll)),uniform_nll, label=\"Uniform Swap\", color=\"salmon\")# type: ignore\n",
389:     "\n",
390:     "ax.plot(np.arange(len(edge_nll)), edge_nll, label=\"Edge Swap\", color=\"teal\")# type: ignore\n",
391:     "\n",
392:     "ax.plot(np.arange(len(triad_nll)), triad_nll, label=\"Triadic Swap\", color=\"black\") # type: ignore\n",
393:     "\n",
394:     "ax.plot(np.arange(len(cross_nll)), cross_nll, label=\"Cross Triangle\", color=\"slategrey\") # type: ignore\n",
395:     "\n",
396:     "ax.set_xlabel(\"Iteration\")\n",
397:     "ax.set_ylabel(\"Log Likelihood\")\n",
398:     "\n",
399:     "ax.legend()\n",
400:     "plt.show(fig)"
401:    ]
402:   },
403:   {
404:    "cell_type": "code",
405:    "execution_count": null,
406:    "id": "fc1d104a",
407:    "metadata": {},
408:    "outputs": [],
409:    "source": []
410:   }
411:  ],
412:  "metadata": {
413:   "kernelspec": {
414:    "display_name": "anon_sbm_notebook_arm",
415:    "language": "python",
416:    "name": "python3"
417:   },
418:   "language_info": {
419:    "codemirror_mode": {
420:     "name": "ipython",
421:     "version": 3
422:    },
423:    "file_extension": ".py",
424:    "mimetype": "text/x-python",
425:    "name": "python",
426:    "nbconvert_exporter": "python",
427:    "pygments_lexer": "ipython3",
428:    "version": "3.12.11"
429:   }
430:  },
431:  "nbformat": 4,
432:  "nbformat_minor": 5
433: }

================
File: notebooks/sbm_block_sizes_26-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "09dbb184",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Investigate SBM block sizes\n",
  9:     "We are attempting to learn SBM representations with a min-block size constraint.\n",
 10:     "\n",
 11:     "Optimally, we would like all blocks to have minimum size (gives smallest expected reconstruction error).\n",
 12:     "\n",
 13:     "The current implementation (Metis asigner) creates initial blocks, and their sizes never change. However, these initial blocks are not all minimum block size.\n",
 14:     "\n",
 15:     "Here we plot the actual block-size distributions and compare with pre-specified min-block-size."
 16:    ]
 17:   },
 18:   {
 19:    "cell_type": "code",
 20:    "execution_count": 1,
 21:    "id": "7097892b",
 22:    "metadata": {},
 23:    "outputs": [],
 24:    "source": [
 25:     "from pathlib import Path\n",
 26:     "import numpy as np\n",
 27:     "import pandas as pd\n",
 28:     "import matplotlib.pyplot as plt"
 29:    ]
 30:   },
 31:   {
 32:    "cell_type": "code",
 33:    "execution_count": 2,
 34:    "id": "8cb75b7b",
 35:    "metadata": {},
 36:    "outputs": [],
 37:    "source": [
 38:     "def get_min_block_size(string):\n",
 39:     "    # find index of substring 'min_block_size'\n",
 40:     "    index = string.find('min_block_size')\n",
 41:     "\n",
 42:     "    tail_string = string[index + len('min_block_size_'):]\n",
 43:     "    block_size = tail_string.split(\"_\")[0]\n",
 44:     "\n",
 45:     "    return int(block_size)"
 46:    ]
 47:   },
 48:   {
 49:    "cell_type": "code",
 50:    "execution_count": 4,
 51:    "id": "968e6b67",
 52:    "metadata": {},
 53:    "outputs": [
 54:     {
 55:      "name": "stdout",
 56:      "output_type": "stream",
 57:      "text": [
 58:       "Loading fit from /Users/lmmi/anon_sbm/data/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_max_n_iter_10000_min_block_size_3_patience_1000_temperature_1_0\n"
 59:      ]
 60:     },
 61:     {
 62:      "ename": "FileNotFoundError",
 63:      "evalue": "[Errno 2] No such file or directory: '/Users/lmmi/anon_sbm/data/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_max_n_iter_10000_min_block_size_3_patience_1000_temperature_1_0/block_sizes.json'",
 64:      "output_type": "error",
 65:      "traceback": [
 66:       "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
 67:       "\u001b[31mFileNotFoundError\u001b[39m                         Traceback (most recent call last)",
 68:       "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 21\u001b[39m\n\u001b[32m     19\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mLoading fit from \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfit_folder_path\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m     20\u001b[39m min_block_size = get_min_block_size(\u001b[38;5;28mstr\u001b[39m(fit_folder_path))\n\u001b[32m---> \u001b[39m\u001b[32m21\u001b[39m sbm_fit = \u001b[43mSBMWriter\u001b[49m\u001b[43m.\u001b[49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfit_folder_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msilence\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[32m     23\u001b[39m min_block_sizes.append([min_block_size] * \u001b[38;5;28mlen\u001b[39m(sbm_fit.block_sizes))\n\u001b[32m     24\u001b[39m block_sizes.append(sbm_fit.block_sizes)\n",
 69:       "\u001b[36mFile \u001b[39m\u001b[32m~/anon_sbm/src/sbm/io.py:51\u001b[39m, in \u001b[36mSBMWriter.load\u001b[39m\u001b[34m(path, silence)\u001b[39m\n\u001b[32m     48\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m silence:\n\u001b[32m     49\u001b[39m     \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mLoading SBM fit from \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m---> \u001b[39m\u001b[32m51\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m \u001b[49m\u001b[43m/\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mblock_sizes.json\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mr\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m sizes_file:\n\u001b[32m     52\u001b[39m     block_sizes = json.load(sizes_file)\n\u001b[32m     53\u001b[39m block_sizes = [\u001b[38;5;28mint\u001b[39m(size) \u001b[38;5;28;01mfor\u001b[39;00m size \u001b[38;5;129;01min\u001b[39;00m block_sizes]\n",
 70:       "\u001b[31mFileNotFoundError\u001b[39m: [Errno 2] No such file or directory: '/Users/lmmi/anon_sbm/data/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_max_n_iter_10000_min_block_size_3_patience_1000_temperature_1_0/block_sizes.json'"
 71:      ]
 72:     }
 73:    ],
 74:    "source": [
 75:     "import yaml\n",
 76:     "from sbm.utils.pipeline_utils import sbmfit_folderpath\n",
 77:     "from sbm.io import SBMWriter\n",
 78:     "\n",
 79:     "fit_config = yaml.safe_load(Path(\"/Users/lmmi/anon_sbm/configs/sbm_fit_block_size_experiments.yml\").read_text())\n",
 80:     "data_config = fit_config[\"datasets\"] # type: ignore\n",
 81:     "\n",
 82:     "min_block_sizes = []\n",
 83:     "block_sizes = []\n",
 84:     "for sbm_config in fit_config[\"sbm\"]:\n",
 85:     "    for ds in data_config:\n",
 86:     "\n",
 87:     "        # load fitted model\n",
 88:     "        fit_folder_path = sbmfit_folderpath(\n",
 89:     "            base_dir=Path(\"/Users/lmmi/anon_sbm/data/sbm_fits\"),\n",
 90:     "            sbm_config=sbm_config,# type: ignore\n",
 91:     "            data_spec=ds,\n",
 92:     "        )\n",
 93:     "        print(f\"Loading fit from {fit_folder_path}\")\n",
 94:     "        min_block_size = get_min_block_size(str(fit_folder_path))\n",
 95:     "        sbm_fit = SBMWriter.load(fit_folder_path, silence=True)\n",
 96:     "\n",
 97:     "        min_block_sizes.append([min_block_size] * len(sbm_fit.block_sizes))\n",
 98:     "        block_sizes.append(sbm_fit.block_sizes)\n"
 99:    ]
100:   },
101:   {
102:    "cell_type": "code",
103:    "execution_count": 35,
104:    "id": "7d83487f",
105:    "metadata": {},
106:    "outputs": [],
107:    "source": [
108:     "# flatten the lists\n",
109:     "min_block_sizes = np.array([ item for sublist in min_block_sizes for item in sublist ])\n",
110:     "block_sizes = np.array([ item for sublist in block_sizes for item in sublist ])"
111:    ]
112:   },
113:   {
114:    "cell_type": "code",
115:    "execution_count": 36,
116:    "id": "545352fa",
117:    "metadata": {},
118:    "outputs": [
119:     {
120:      "name": "stderr",
121:      "output_type": "stream",
122:      "text": [
123:       "/var/folders/y6/j9fbqcvx6lb5l99614n30y4c0000gn/T/ipykernel_92149/2968653449.py:7: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
124:       "  fig.show()\n"
125:      ]
126:     },
127:     {
128:      "data": {
129:       "image/png": "",
130:       "text/plain": [
131:        "<Figure size 1000x600 with 1 Axes>"
132:       ]
133:      },
134:      "metadata": {},
135:      "output_type": "display_data"
136:     }
137:    ],
138:    "source": [
139:     "fig, ax = plt.subplots(figsize=(10, 6))\n",
140:     "\n",
141:     "ax.plot(min_block_sizes, block_sizes, marker='o', linestyle='-', color='b')\n",
142:     "ax.set_xlabel(\"Minimum Block Size\")\n",
143:     "ax.set_ylabel(\"Block Sizes\")\n",
144:     "\n",
145:     "fig.show()\n"
146:    ]
147:   },
148:   {
149:    "cell_type": "code",
150:    "execution_count": 49,
151:    "id": "879ee57b",
152:    "metadata": {},
153:    "outputs": [
154:     {
155:      "data": {
156:       "text/plain": [
157:        "<matplotlib.legend.Legend at 0x11ffcd6d0>"
158:       ]
159:      },
160:      "execution_count": 49,
161:      "metadata": {},
162:      "output_type": "execute_result"
163:     },
164:     {
165:      "data": {
166:       "image/png": "",
167:       "text/plain": [
168:        "<Figure size 800x500 with 1 Axes>"
169:       ]
170:      },
171:      "metadata": {},
172:      "output_type": "display_data"
173:     }
174:    ],
175:    "source": [
176:     "fig, ax = plt.subplots(figsize=(8, 5))\n",
177:     "\n",
178:     "values, counts  = np.unique(min_block_sizes - block_sizes, return_counts=True)\n",
179:     "\n",
180:     "ax.plot(values, counts/counts.sum(), marker='o', linestyle='-', color='salmon')\n",
181:     "\n",
182:     "ax.fill_betweenx(y=[0, 1], x1=min(values), x2=0, color='#dddddd', alpha=0.5, label='Block size > min block size')\n",
183:     "\n",
184:     "fig.legend(fontsize=12)\n",
185:     "\n",
186:     "\n"
187:    ]
188:   },
189:   {
190:    "cell_type": "code",
191:    "execution_count": null,
192:    "id": "b8a60bad",
193:    "metadata": {},
194:    "outputs": [],
195:    "source": []
196:   },
197:   {
198:    "cell_type": "code",
199:    "execution_count": null,
200:    "id": "ec731210",
201:    "metadata": {},
202:    "outputs": [],
203:    "source": []
204:   },
205:   {
206:    "cell_type": "code",
207:    "execution_count": null,
208:    "id": "8198ec2d",
209:    "metadata": {},
210:    "outputs": [],
211:    "source": []
212:   },
213:   {
214:    "cell_type": "code",
215:    "execution_count": 1,
216:    "id": "fbbae561",
217:    "metadata": {},
218:    "outputs": [],
219:    "source": [
220:     "import numpy as np"
221:    ]
222:   },
223:   {
224:    "cell_type": "code",
225:    "execution_count": 2,
226:    "id": "995a8d86",
227:    "metadata": {},
228:    "outputs": [],
229:    "source": [
230:     "def fun(B, delta=0.05, Delta=10**3):\n",
231:     "    return np.log((B+B**2)/delta)*Delta"
232:    ]
233:   },
234:   {
235:    "cell_type": "code",
236:    "execution_count": null,
237:    "id": "17749985",
238:    "metadata": {},
239:    "outputs": [
240:     {
241:      "data": {
242:       "text/plain": [
243:        "np.float64(14615.015756511137)"
244:       ]
245:      },
246:      "execution_count": 3,
247:      "metadata": {},
248:      "output_type": "execute_result"
249:     }
250:    ],
251:    "source": [
252:     "fun()"
253:    ]
254:   },
255:   {
256:    "cell_type": "code",
257:    "execution_count": 4,
258:    "id": "e6fc7922",
259:    "metadata": {},
260:    "outputs": [
261:     {
262:      "data": {
263:       "text/plain": [
264:        "333"
265:       ]
266:      },
267:      "execution_count": 4,
268:      "metadata": {},
269:      "output_type": "execute_result"
270:     }
271:    ],
272:    "source": [
273:     "1000//3"
274:    ]
275:   },
276:   {
277:    "cell_type": "code",
278:    "execution_count": null,
279:    "id": "509dda70",
280:    "metadata": {},
281:    "outputs": [],
282:    "source": []
283:   }
284:  ],
285:  "metadata": {
286:   "kernelspec": {
287:    "display_name": "anon_sbm_notebook",
288:    "language": "python",
289:    "name": "python3"
290:   },
291:   "language_info": {
292:    "codemirror_mode": {
293:     "name": "ipython",
294:     "version": 3
295:    },
296:    "file_extension": ".py",
297:    "mimetype": "text/x-python",
298:    "name": "python",
299:    "nbconvert_exporter": "python",
300:    "pygments_lexer": "ipython3",
301:    "version": "3.13.5"
302:   }
303:  },
304:  "nbformat": 4,
305:  "nbformat_minor": 5
306: }

================
File: src/metrics/clustering.py
================
 1: """ 
 2: Implementation of the clustering coefficient distance metric.
 3: This module computes the absolute difference in the clustering coefficients
 4: between two graphs represented by their adjacency matrices.
 5: """
 6: # metrics/clustering.py
 7: from typing import Optional
 8: import numpy as np
 9: import networkx as nx
10: from scipy.sparse import csr_array
11: ###############################################################################
12: ### Clustering coefficient distributional distance ----------------------------
13: ###############################################################################
14: def clustering_distance(
15:         emp_adj: csr_array,
16:         sur_adj: csr_array,
17:         directed: Optional[bool] = False,
18:         rng: np.random.Generator = np.random.default_rng(1)
19:     ) -> float:
20:     """ 
21:     Compute absolute 
22:     Parameters
23:     ----------
24:     emp_adj, sur_adj : scipy.sparse.csr_matrix
25:         Adjacency of empirical and surrogate graphs (directed or undirected).
26:     directed : bool, optional
27:         If True, compute directed degree distribution.
28:         If False, compute undirected degree distribution.
29:     rng : np.random.Generator, optional
30:         Random number generator for sampling (default: np.random.default_rng(1)).
31:     Returns
32:     -------
33:     float
34:         Distance (lower = more similar).
35:     """
36:     if directed:
37:         raise NotImplementedError(
38:             "Directed clustering coefficient is not implemented yet."
39:         )
40:     else:
41:         # Undirected clustering coefficient
42:         emp_graph = nx.from_scipy_sparse_matrix(emp_adj)
43:         sur_graph = nx.from_scipy_sparse_matrix(sur_adj)
44:         emp_clustering = nx.average_clustering(emp_graph)
45:         sur_clustering = nx.average_clustering(sur_graph)
46:         return abs(emp_clustering - sur_clustering)
47: ###############################################################################
48: # Average clustering coefficient difference -------------------------------
49: ###############################################################################
50: def avg_clustering_difference(
51:     emp_adj: csr_array,
52:     sur_adj: csr_array,
53:     *,
54:     rng: np.random.Generator = np.random.default_rng(1),
55: ) -> float:
56:     """Absolute difference in *average* clustering coefficient.
57:     (The existing *clustering_distance* compares the *distribution*; this
58:     variant is the scalar average.)
59:     """
60:     emp_C = nx.average_clustering(nx.from_scipy_sparse_matrix(emp_adj))
61:     sur_C = nx.average_clustering(nx.from_scipy_sparse_matrix(sur_adj))
62:     return abs(emp_C - sur_C)

================
File: src/pipelines/evaluate_surrogates.py
================
 1: """
 2:     Generate surrogate SBM graphs and evaluate them against empirical data.
 3: """
 4: import argparse
 5: import yaml
 6: import csv
 7: from pathlib import Path
 8: import numpy as np
 9: from itertools import product
10: from multiprocessing import Pool, cpu_count
11: from metrics import REGISTRY
12: from sbm.io import SBMWriter
13: from sbm.sampling import sample_sbm_graph_from_fit
14: from sbm.io import GraphLoader
15: from sbm.utils.pipeline_utils import (
16:     sbmfit_folderpath,
17:     surrogate_statistics_filename,
18:     FitConfig,
19:     EvalConfig,
20: )
21: #######################
22: ### Configuration Types 
23: #######################
24: def _generate_and_evaluate(sbm_config, ds, eval_config, rng):
25:     # Load empirical graph
26:     g = GraphLoader.load(
27:             Path(ds["path"]),
28:             force_undirected=sbm_config["force_undirected"], # type: ignore
29:         )
30:     emp = g.adjacency
31:     # load fitted model
32:     fit_folder_path = sbmfit_folderpath(
33:         base_dir=Path("results/sbm_fits"),
34:         sbm_config=sbm_config,# type: ignore
35:         data_spec=ds,
36:     )
37:     # load the sbm fit
38:     sbm_fit = SBMWriter.load(fit_folder_path)
39:     # check if metrics have been cached earlier
40:     out = surrogate_statistics_filename(
41:         base_dir=Path("results/surrogate_statistics"),
42:         eval_configs=eval_config,
43:         sbm_config=sbm_config,# type: ignore
44:         data_spec=ds,
45:     )
46:     out.parent.mkdir(exist_ok=True)
47:     if out.exists() and not eval_config["overwrite"]:
48:         return
49:     # Generate surrogates and campare metrics
50:     results = []
51:     for i in range(eval_config["n_surrogates"]):
52:         surr = sample_sbm_graph_from_fit(
53:             sbm_fit=sbm_fit,
54:             rng=rng,
55:         )
56:         surr = surr.adjacency
57:         row = {"dataset": ds["name"], "surrogate": f'surr_{i}'}
58:         for m in eval_config["metrics"]:
59:             row[m] = REGISTRY[m](emp, surr)
60:         results.append(row)
61:     with out.open("w", newline="") as f:
62:         w = csv.DictWriter(f, fieldnames=results[0].keys())
63:         w.writeheader(); w.writerows(results)
64: ############################################
65: ### main function
66: ############################################
67: def main(fit_config: str, eval_config: str, parallel:bool): # type: ignore
68:     fit_config: FitConfig = yaml.safe_load(Path(fit_config).read_text())
69:     rng = np.random.default_rng(fit_config["seed"])
70:     data_config = fit_config["datasets"] # type: ignore
71:     eval_config: EvalConfig = yaml.safe_load(Path(eval_config).read_text())
72:     # Prepare arguments for the worker function
73:     args = [
74:         (sbm_config, ds, eval_config, rng)
75:         for sbm_config, ds in product(fit_config["sbm"], data_config)
76:     ][::-1]
77:     if parallel:
78:         # Create a pool of workers
79:         n_workers = max(1, cpu_count() - 1)  # Leave one core free
80:         with Pool(n_workers) as pool:
81:             # Execute the worker function in parallel
82:             pool.starmap(_generate_and_evaluate, args)
83:     else:
84:         for sbm_config, ds in product(fit_config["sbm"], data_config):
85:             _generate_and_evaluate(sbm_config, ds, eval_config, rng)
86: if __name__ == "__main__":
87:     p = argparse.ArgumentParser()
88:     p.add_argument("--fit_config", type=str, help="Path to the configuration file.")
89:     p.add_argument("--eval_config", type=str, help="Path to the configuration file.")
90:     p.add_argument("--parallel", action="store_true", help="Run in parallel leaving one core free.")
91:     args = p.parse_args()
92:     main(
93:         fit_config=args.fit_config,
94:         eval_config=args.eval_config,
95:         parallel=args.parallel,
96:     )

================
File: src/pipelines/run_all.py
================
 1: """ 
 2: Script to run fitting, generation, and evaluation pipelines in sequence.
 3: """
 4: import subprocess
 5: import sys
 6: def run(cmd):
 7:     print(">>", " ".join(cmd))
 8:     subprocess.check_call(cmd)
 9: CFG_FIT = "configs/sbm_fit_block_size_experiments.yml"
10: CFG_EVAL = "configs/surrogate_eval.yml"
11: if __name__ == "__main__":
12:     python = sys.executable
13:     run([
14:         python, "-m",
15:         "pipelines.fit_sbm",
16:         "--fit_config", CFG_FIT
17:     ])
18:     run([
19:         python, "-m",
20:         "pipelines.evaluate_surrogates",
21:         "--fit_config", CFG_FIT,
22:         "--eval_config", CFG_EVAL,
23:     ])

================
File: src/sbm/utils/util.py
================
 1: import numpy as np
 2: from pathlib import Path
 3: import networkx as nx
 4: from scipy.sparse.csgraph import connected_components
 5: from scipy.sparse import csr_array
 6: def set_random_seed(seed: int):
 7:     return np.random.default_rng(seed)
 8: def restrict_to_lcc(adj: csr_array, directed:bool) -> csr_array:
 9:     """ 
10:     resricts adjacency matrix to the largest connected component (LCC).
11:     """
12:     if directed:
13:         n_components, labels = connected_components(adj, directed=True)
14:     else:
15:         n_components, labels = connected_components(adj, directed=False)
16:     if n_components == 1:
17:         return adj
18:     largest_component = np.argmax(np.bincount(labels))
19:     mask = labels == largest_component
20:     adj_lcc = csr_array(adj[mask][:, mask]) # type: ignore
21:     return adj_lcc
22: def _nx_graph(adj: csr_array, *, directed: bool = False) -> nx.Graph:
23:     """Convert *adj* to a NetworkX (di)graph, restricted to its LCC."""
24:     adj_lcc = restrict_to_lcc(adj, directed)
25:     return (
26:         nx.from_scipy_sparse_matrix(adj_lcc, create_using=nx.DiGraph() if directed else nx.Graph())
27:     )

================
File: src/sbm/graph_data.py
================
 1: from scipy.sparse import csr_array
 2: import networkx as nx
 3: class GraphData:
 4:     def __init__(self, adjacency_matrix: csr_array, directed=False):
 5:         if not isinstance(adjacency_matrix, csr_array):
 6:             raise ValueError("Adjacency matrix must be a scipy.sparse.csr_array")
 7:         self.adjacency = adjacency_matrix.astype(int)
 8:         self.directed: bool= directed
 9:         self.num_nodes = self.adjacency.shape[0] # type: ignore
10:         if directed:
11:             self.total_edges = int(self.adjacency.sum())
12:         else:
13:             self.total_edges = int(self.adjacency.sum() / 2)  # For undirected graphs
14:         def __len__(self):
15:             return self.num_nodes
16: def gd_from_networkx(G: nx.Graph) -> GraphData:
17:     """
18:     Create a GraphData instance from a NetworkX graph.
19:     """
20:     if not hasattr(G, 'adjacency'):
21:         raise ValueError("The provided graph must have an adjacency matrix.")
22:     # for new version of networkx
23:     #adj = nx.to_scipy_sparse_matrix(G)
24:     # for old version of networkx
25:     adj = nx.to_scipy_sparse_matrix(G)
26:     adj = csr_array(adj)
27:     return GraphData(adj, directed=G.is_directed())

================
File: src/sbm/node_mover.py
================
 1: from typing import List, Tuple
 2: import scipy.sparse as sp
 3: import numpy as np
 4: from sbm.block_data import BlockData, _BlockDataUpdater
 5: from line_profiler import profile
 6: from sbm.block_change_proposers import (
 7:     ProposedValidChanges,
 8:     EdgeDelta,
 9: )
10: class NodeMover:
11:     """
12:     Class to move nodes between block assignment in the Stochastic Block Model (SBM).
13:     When performing a change, it updates the block sizes, connectivity matrix,
14:     block indices, and inverse block indices accordingly.
15:     All changes are performed in-place on the BlockData object by the _BlockDataUpdater.
16:     """
17:     def __init__(self, block_data: BlockData):
18:         self.block_data_updater = _BlockDataUpdater(block_data)
19:     def perform_change(self,
20:             proposed_changes: ProposedValidChanges,
21:             delta_e: EdgeDelta,
22:             ):
23:         """ 
24:         Change the block assignments of nodes according to the proposed change.
25:         Update:
26:         - block sizes
27:         - block connectivity matrix (edge counts between blocks)
28:         - block indices (node to block assignment)
29:         - inverse block indices (nodes in each block)
30:         Rely on increment_edge_count from BlockData to update edge counts.
31:         :param change: A list of tuples where each tuple contains a node and their new block.
32:         """
33:         (node_i, new_block_i), (node_j, new_block_j) = proposed_changes
34:         # update the block assignments, sizes, and memberships
35:         self.block_data_updater._move_node_to_block(node_i, new_block_i)
36:         self.block_data_updater._move_node_to_block(node_j, new_block_j)
37:         # update the edge counts between the blocks
38:         for (r, s), e_delta in delta_e.items():
39:             self.block_data_updater._increment_edge_count(r, s, e_delta)

================
File: requirements.txt
================
 1: pytest
 2: numpy==1.26.4
 3: scipy==1.12.0
 4: networkx
 5: metis
 6: ortools
 7: tqdm
 8: pyyaml
 9: nodevectors
10: scikit-learn
11: k-means-constrained
12: line_profiler
13: infomap
14: leidenalg
15: python-igraph
16: protobuf==5.29.5
17: tensorflow=2.19
18: ortools==9.8.3296

================
File: setup.cfg
================
 1: [metadata]
 2: name = anon-sbm
 3: version = 0.1.0
 4: author = Lasse Mohr
 5: author_email = lmmi@dtu.dk
 6: description = Package for SBM with minimum group-size constraints
 7: long_description = file: README.md
 8: long_description_content_type = text/markdown
 9: classifiers =
10:     Programming Language :: Python :: 3
11:     License :: OSI Approved :: MIT License
12:     Operating System :: OS Independent
13: 
14: [options]
15: package_dir =
16:     =src
17: packages = find:
18: python_requires = >=3.12.0
19: install_requires =
20:     numpy
21:     scipy
22:     networkx
23:     metis
24:     k-means-constrained
25:     nodevectors
26:     tqdm
27:     scikit-learn
28:     pytest
29:     line_profiler
30: 
31: [options.packages.find]
32: where = src

================
File: configs/sbm_fit_block_size_experiments.yml
================
 1: # -------------------------------------------------------------------
 2: #  Global defaults
 3: # -------------------------------------------------------------------
 4: seed: 42
 5: # -------------------------------------------------------------------
 6: #  Configuration for the SBM models fitting as list of dicts
 7: # Each item needs:
 8: #    min_block_size: minimum size of the blocks
 9: #    n_iter: number of iterations for the fitting
10: #    temperature: initial temperature for the simulated annealing
11: #    cooling_rate: cooling rate for the simulated annealing
12: #    force_undirected: whether to treat the graph as undirected
13: # -------------------------------------------------------------------
14: sbm:
15:   - min_block_size: 3
16:     cooling_rate: 0.9999
17:     force_undirected: true
18:     init_method: "metis"
19:   - min_block_size: 6
20:     cooling_rate: 0.9999
21:     force_undirected: true
22:     init_method: "metis"
23:   - min_block_size: 12
24:     cooling_rate: 0.9999
25:     force_undirected: true
26:     init_method: "metis"
27:   - min_block_size: 25
28:     cooling_rate: 0.9999
29:     force_undirected: true
30:     init_method: "metis"
31: # -------------------------------------------------------------------
32: #  Configuration for the logging
33: #  - logging_folder: folder to save the logs
34: #  - overwirte: set true to ignore cached results
35: #  - log_every: how often to log the results (in number of iterations)
36: # -------------------------------------------------------------------
37: logging:
38:   - logging_folder: "./logs/"
39:     overwrite: true           # set true to ignore cached results
40:     log_every: 1_000
41: # -------------------------------------------------------------------
42: #  List of empirical graphs to process
43: #  Each item needs:
44: #    name : label used for output folder (models/sbm/<name>/)
45: #    path : relative or absolute path to the processed graph file
46: # -------------------------------------------------------------------
47: datasets:
48: # small datasets (< 1000 nodes)
49:   - name: congress_twitter
50:     path: data/processed/congress_twitter.edgelist # undirected GML
51:   - name: caltech_fb 
52:     path: data/processed/caltech_fb.edgelist # undirected GML
53:   - name: eu_email
54:     path: data/processed/eu_email.edgelist # undirected GML
55: # medium datasets (1000 - 10_000 nodes):
56:   - name: lastfm_asia
57:     path: data/processed/lastfm_asia.edgelist # undirected GML
58:   - name: wiki_vote
59:     path: data/processed/wiki_vote.edgelist # undirected GML
60: # large datasets (10_000-100_000 nodes):
61:   - name: enron_email 
62:     path: data/processed/enron_email.edgelist # undirected GML

================
File: configs/surrogate_eval.yml
================
 1: # ---------------------------------------------------------------
 2: n_surrogates: 20 # graphs to sample per dataset
 3: overwrite: false # set true to ignore cached results
 4: # which similarity metrics to compute
 5: metrics:
 6:   - shortest_path
 7:   - avg_path_length
 8:   - degree
 9:   - clustering
10:   - avg_clustering
11:   - eigen_val 
12:   - eigen_centrality
13:   - infomap
14:   - leiden
15:   - assortativity
16:   - embedding_node2vec
17:   - embedding_prone

================
File: notebooks/surrogate_accuracy_26-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "2b29dd78",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Notebook for investigating network accuracy of surrogates"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "markdown",
 13:    "id": "57bdcafc",
 14:    "metadata": {},
 15:    "source": []
 16:   },
 17:   {
 18:    "cell_type": "code",
 19:    "execution_count": 1,
 20:    "id": "dfb246da",
 21:    "metadata": {},
 22:    "outputs": [],
 23:    "source": [
 24:     "import numpy as np\n",
 25:     "import pandas as pd\n",
 26:     "import matplotlib.pyplot as plt"
 27:    ]
 28:   },
 29:   {
 30:    "cell_type": "code",
 31:    "execution_count": 2,
 32:    "id": "fc84799c",
 33:    "metadata": {},
 34:    "outputs": [],
 35:    "source": [
 36:     "import sys\n",
 37:     "from pathlib import Path\n",
 38:     "\n",
 39:     "### Load all surrogate statistics\n",
 40:     "folder_path = Path('/Users/lmmi/anon_sbm/results/surrogate_statistics')\n",
 41:     "\n",
 42:     "# find all log files in the logs directory\n",
 43:     "stat_files = list(folder_path.glob(\"*.csv\"))"
 44:    ]
 45:   },
 46:   {
 47:    "cell_type": "code",
 48:    "execution_count": 6,
 49:    "id": "707ac12e",
 50:    "metadata": {},
 51:    "outputs": [
 52:     {
 53:      "data": {
 54:       "text/plain": [
 55:        "38"
 56:       ]
 57:      },
 58:      "execution_count": 6,
 59:      "metadata": {},
 60:      "output_type": "execute_result"
 61:     }
 62:    ],
 63:    "source": [
 64:     "len(stat_files)"
 65:    ]
 66:   },
 67:   {
 68:    "cell_type": "code",
 69:    "execution_count": 8,
 70:    "id": "b09387bc",
 71:    "metadata": {},
 72:    "outputs": [],
 73:    "source": [
 74:     "# drop all files with 'patience' in the name[\n",
 75:     "stat_files = [f for f in stat_files if 'patience' not in f.name]"
 76:    ]
 77:   },
 78:   {
 79:    "cell_type": "code",
 80:    "execution_count": 14,
 81:    "id": "8ee87d6c",
 82:    "metadata": {},
 83:    "outputs": [],
 84:    "source": [
 85:     "def determine_block_size(stat_file):\n",
 86:     "    \"\"\"\n",
 87:     "    Determine min_block_size from the filename.\n",
 88:     "\n",
 89:     "    min_block_size is encoded in filename as *min_block_size_{min_block_size}*.csv\n",
 90:     "    \"\"\"\n",
 91:     "\n",
 92:     "    # drop .csv extension\n",
 93:     "    if stat_file.name.endswith('.csv'):\n",
 94:     "        stat_file = stat_file.with_suffix('')\n",
 95:     "\n",
 96:     "    # find location of substring 'min_block_size_'\n",
 97:     "    index = stat_file.name.find('min_block_size_')\n",
 98:     "\n",
 99:     "    tail = stat_file.name[index + len('min_block_size_'):]\n",
100:     "    size = tail.split('_')[0]\n",
101:     "\n",
102:     "    # check if size is a digit\n",
103:     "    if not size.isdigit():\n",
104:     "        return None\n",
105:     "    return int(size)"
106:    ]
107:   },
108:   {
109:    "cell_type": "code",
110:    "execution_count": 15,
111:    "id": "f5f8ac7e",
112:    "metadata": {},
113:    "outputs": [],
114:    "source": [
115:     "df_list = []\n",
116:     "\n",
117:     "for stat_file in stat_files:\n",
118:     "    df = pd.read_csv(stat_file)\n",
119:     "    block_size = determine_block_size(stat_file)\n",
120:     "    if block_size is None:\n",
121:     "        continue\n",
122:     "    df[\"block_size\"] = block_size\n",
123:     "    df['surrogate'] = [int(surrogate_str.split(\"_\")[1]) for surrogate_str in df['surrogate']]\n",
124:     "\n",
125:     "    df_list.append(df)\n",
126:     "\n",
127:     "df = pd.concat(df_list, ignore_index=True)"
128:    ]
129:   },
130:   {
131:    "cell_type": "code",
132:    "execution_count": null,
133:    "id": "782cc864",
134:    "metadata": {},
135:    "outputs": [],
136:    "source": []
137:   },
138:   {
139:    "cell_type": "code",
140:    "execution_count": 16,
141:    "id": "0ddc127e",
142:    "metadata": {},
143:    "outputs": [],
144:    "source": [
145:     "marker_styles = {\n",
146:     "    \"congress_twitter\": \"o\",\n",
147:     "    \"caltech_fb\": \"s\",\n",
148:     "    \"eu_email\": \"D\",\n",
149:     "    \"lastfm_asia\": \"x\",\n",
150:     "    \"wiki_vote\": \"+\",\n",
151:     "    \"enron_email\": \"+\",\n",
152:     "}\n",
153:     "\n",
154:     "# load nice colormaps\n",
155:     "from matplotlib import colormaps as cm\n",
156:     "\n",
157:     "cmap = cm.get_cmap(\"tab10\")\n",
158:     "\n",
159:     "colors = {\n",
160:     "    \"congress_twitter\": \"teal\",\n",
161:     "    \"caltech_fb\": \"salmon\",\n",
162:     "    \"eu_email\": \"black\",\n",
163:     "    \"lastfm_asia\": cmap(0),\n",
164:     "    \"wiki_vote\": cmap(0.5),\n",
165:     "    \"enron_email\": cmap(1),\n",
166:     "}"
167:    ]
168:   },
169:   {
170:    "cell_type": "code",
171:    "execution_count": 17,
172:    "id": "0281f1f1",
173:    "metadata": {},
174:    "outputs": [
175:     {
176:      "data": {
177:       "text/html": [
178:        "<div>\n",
179:        "<style scoped>\n",
180:        "    .dataframe tbody tr th:only-of-type {\n",
181:        "        vertical-align: middle;\n",
182:        "    }\n",
183:        "\n",
184:        "    .dataframe tbody tr th {\n",
185:        "        vertical-align: top;\n",
186:        "    }\n",
187:        "\n",
188:        "    .dataframe thead th {\n",
189:        "        text-align: right;\n",
190:        "    }\n",
191:        "</style>\n",
192:        "<table border=\"1\" class=\"dataframe\">\n",
193:        "  <thead>\n",
194:        "    <tr style=\"text-align: right;\">\n",
195:        "      <th></th>\n",
196:        "      <th>dataset</th>\n",
197:        "      <th>surrogate</th>\n",
198:        "      <th>shortest_path</th>\n",
199:        "      <th>degree</th>\n",
200:        "      <th>clustering</th>\n",
201:        "      <th>block_size</th>\n",
202:        "      <th>avg_path_length</th>\n",
203:        "      <th>avg_clustering</th>\n",
204:        "      <th>spectral</th>\n",
205:        "      <th>infomap</th>\n",
206:        "      <th>leiden</th>\n",
207:        "      <th>assortativity</th>\n",
208:        "      <th>embedding_node2vec</th>\n",
209:        "      <th>embedding_prone</th>\n",
210:        "    </tr>\n",
211:        "  </thead>\n",
212:        "  <tbody>\n",
213:        "    <tr>\n",
214:        "      <th>0</th>\n",
215:        "      <td>lastfm_asia</td>\n",
216:        "      <td>0</td>\n",
217:        "      <td>0.2392</td>\n",
218:        "      <td>0.003980</td>\n",
219:        "      <td>0.068181</td>\n",
220:        "      <td>6</td>\n",
221:        "      <td>NaN</td>\n",
222:        "      <td>NaN</td>\n",
223:        "      <td>NaN</td>\n",
224:        "      <td>NaN</td>\n",
225:        "      <td>NaN</td>\n",
226:        "      <td>NaN</td>\n",
227:        "      <td>NaN</td>\n",
228:        "      <td>NaN</td>\n",
229:        "    </tr>\n",
230:        "    <tr>\n",
231:        "      <th>1</th>\n",
232:        "      <td>lastfm_asia</td>\n",
233:        "      <td>1</td>\n",
234:        "      <td>0.2306</td>\n",
235:        "      <td>0.004052</td>\n",
236:        "      <td>0.069189</td>\n",
237:        "      <td>6</td>\n",
238:        "      <td>NaN</td>\n",
239:        "      <td>NaN</td>\n",
240:        "      <td>NaN</td>\n",
241:        "      <td>NaN</td>\n",
242:        "      <td>NaN</td>\n",
243:        "      <td>NaN</td>\n",
244:        "      <td>NaN</td>\n",
245:        "      <td>NaN</td>\n",
246:        "    </tr>\n",
247:        "    <tr>\n",
248:        "      <th>2</th>\n",
249:        "      <td>lastfm_asia</td>\n",
250:        "      <td>2</td>\n",
251:        "      <td>0.1723</td>\n",
252:        "      <td>0.004388</td>\n",
253:        "      <td>0.068788</td>\n",
254:        "      <td>6</td>\n",
255:        "      <td>NaN</td>\n",
256:        "      <td>NaN</td>\n",
257:        "      <td>NaN</td>\n",
258:        "      <td>NaN</td>\n",
259:        "      <td>NaN</td>\n",
260:        "      <td>NaN</td>\n",
261:        "      <td>NaN</td>\n",
262:        "      <td>NaN</td>\n",
263:        "    </tr>\n",
264:        "    <tr>\n",
265:        "      <th>3</th>\n",
266:        "      <td>lastfm_asia</td>\n",
267:        "      <td>3</td>\n",
268:        "      <td>0.1872</td>\n",
269:        "      <td>0.004476</td>\n",
270:        "      <td>0.073102</td>\n",
271:        "      <td>6</td>\n",
272:        "      <td>NaN</td>\n",
273:        "      <td>NaN</td>\n",
274:        "      <td>NaN</td>\n",
275:        "      <td>NaN</td>\n",
276:        "      <td>NaN</td>\n",
277:        "      <td>NaN</td>\n",
278:        "      <td>NaN</td>\n",
279:        "      <td>NaN</td>\n",
280:        "    </tr>\n",
281:        "    <tr>\n",
282:        "      <th>4</th>\n",
283:        "      <td>lastfm_asia</td>\n",
284:        "      <td>4</td>\n",
285:        "      <td>0.2375</td>\n",
286:        "      <td>0.004593</td>\n",
287:        "      <td>0.069663</td>\n",
288:        "      <td>6</td>\n",
289:        "      <td>NaN</td>\n",
290:        "      <td>NaN</td>\n",
291:        "      <td>NaN</td>\n",
292:        "      <td>NaN</td>\n",
293:        "      <td>NaN</td>\n",
294:        "      <td>NaN</td>\n",
295:        "      <td>NaN</td>\n",
296:        "      <td>NaN</td>\n",
297:        "    </tr>\n",
298:        "    <tr>\n",
299:        "      <th>...</th>\n",
300:        "      <td>...</td>\n",
301:        "      <td>...</td>\n",
302:        "      <td>...</td>\n",
303:        "      <td>...</td>\n",
304:        "      <td>...</td>\n",
305:        "      <td>...</td>\n",
306:        "      <td>...</td>\n",
307:        "      <td>...</td>\n",
308:        "      <td>...</td>\n",
309:        "      <td>...</td>\n",
310:        "      <td>...</td>\n",
311:        "      <td>...</td>\n",
312:        "      <td>...</td>\n",
313:        "      <td>...</td>\n",
314:        "    </tr>\n",
315:        "    <tr>\n",
316:        "      <th>495</th>\n",
317:        "      <td>congress_twitter</td>\n",
318:        "      <td>15</td>\n",
319:        "      <td>0.0226</td>\n",
320:        "      <td>0.004695</td>\n",
321:        "      <td>0.073769</td>\n",
322:        "      <td>25</td>\n",
323:        "      <td>NaN</td>\n",
324:        "      <td>NaN</td>\n",
325:        "      <td>NaN</td>\n",
326:        "      <td>NaN</td>\n",
327:        "      <td>NaN</td>\n",
328:        "      <td>NaN</td>\n",
329:        "      <td>NaN</td>\n",
330:        "      <td>NaN</td>\n",
331:        "    </tr>\n",
332:        "    <tr>\n",
333:        "      <th>496</th>\n",
334:        "      <td>congress_twitter</td>\n",
335:        "      <td>16</td>\n",
336:        "      <td>0.0254</td>\n",
337:        "      <td>0.004873</td>\n",
338:        "      <td>0.079693</td>\n",
339:        "      <td>25</td>\n",
340:        "      <td>NaN</td>\n",
341:        "      <td>NaN</td>\n",
342:        "      <td>NaN</td>\n",
343:        "      <td>NaN</td>\n",
344:        "      <td>NaN</td>\n",
345:        "      <td>NaN</td>\n",
346:        "      <td>NaN</td>\n",
347:        "      <td>NaN</td>\n",
348:        "    </tr>\n",
349:        "    <tr>\n",
350:        "      <th>497</th>\n",
351:        "      <td>congress_twitter</td>\n",
352:        "      <td>17</td>\n",
353:        "      <td>0.0363</td>\n",
354:        "      <td>0.004783</td>\n",
355:        "      <td>0.071975</td>\n",
356:        "      <td>25</td>\n",
357:        "      <td>NaN</td>\n",
358:        "      <td>NaN</td>\n",
359:        "      <td>NaN</td>\n",
360:        "      <td>NaN</td>\n",
361:        "      <td>NaN</td>\n",
362:        "      <td>NaN</td>\n",
363:        "      <td>NaN</td>\n",
364:        "      <td>NaN</td>\n",
365:        "    </tr>\n",
366:        "    <tr>\n",
367:        "      <th>498</th>\n",
368:        "      <td>congress_twitter</td>\n",
369:        "      <td>18</td>\n",
370:        "      <td>0.0335</td>\n",
371:        "      <td>0.003752</td>\n",
372:        "      <td>0.073450</td>\n",
373:        "      <td>25</td>\n",
374:        "      <td>NaN</td>\n",
375:        "      <td>NaN</td>\n",
376:        "      <td>NaN</td>\n",
377:        "      <td>NaN</td>\n",
378:        "      <td>NaN</td>\n",
379:        "      <td>NaN</td>\n",
380:        "      <td>NaN</td>\n",
381:        "      <td>NaN</td>\n",
382:        "    </tr>\n",
383:        "    <tr>\n",
384:        "      <th>499</th>\n",
385:        "      <td>congress_twitter</td>\n",
386:        "      <td>19</td>\n",
387:        "      <td>0.0303</td>\n",
388:        "      <td>0.004358</td>\n",
389:        "      <td>0.074571</td>\n",
390:        "      <td>25</td>\n",
391:        "      <td>NaN</td>\n",
392:        "      <td>NaN</td>\n",
393:        "      <td>NaN</td>\n",
394:        "      <td>NaN</td>\n",
395:        "      <td>NaN</td>\n",
396:        "      <td>NaN</td>\n",
397:        "      <td>NaN</td>\n",
398:        "      <td>NaN</td>\n",
399:        "    </tr>\n",
400:        "  </tbody>\n",
401:        "</table>\n",
402:        "<p>500 rows × 14 columns</p>\n",
403:        "</div>"
404:       ],
405:       "text/plain": [
406:        "              dataset  surrogate  shortest_path    degree  clustering  \\\n",
407:        "0         lastfm_asia          0         0.2392  0.003980    0.068181   \n",
408:        "1         lastfm_asia          1         0.2306  0.004052    0.069189   \n",
409:        "2         lastfm_asia          2         0.1723  0.004388    0.068788   \n",
410:        "3         lastfm_asia          3         0.1872  0.004476    0.073102   \n",
411:        "4         lastfm_asia          4         0.2375  0.004593    0.069663   \n",
412:        "..                ...        ...            ...       ...         ...   \n",
413:        "495  congress_twitter         15         0.0226  0.004695    0.073769   \n",
414:        "496  congress_twitter         16         0.0254  0.004873    0.079693   \n",
415:        "497  congress_twitter         17         0.0363  0.004783    0.071975   \n",
416:        "498  congress_twitter         18         0.0335  0.003752    0.073450   \n",
417:        "499  congress_twitter         19         0.0303  0.004358    0.074571   \n",
418:        "\n",
419:        "     block_size  avg_path_length  avg_clustering  spectral  infomap  leiden  \\\n",
420:        "0             6              NaN             NaN       NaN      NaN     NaN   \n",
421:        "1             6              NaN             NaN       NaN      NaN     NaN   \n",
422:        "2             6              NaN             NaN       NaN      NaN     NaN   \n",
423:        "3             6              NaN             NaN       NaN      NaN     NaN   \n",
424:        "4             6              NaN             NaN       NaN      NaN     NaN   \n",
425:        "..          ...              ...             ...       ...      ...     ...   \n",
426:        "495          25              NaN             NaN       NaN      NaN     NaN   \n",
427:        "496          25              NaN             NaN       NaN      NaN     NaN   \n",
428:        "497          25              NaN             NaN       NaN      NaN     NaN   \n",
429:        "498          25              NaN             NaN       NaN      NaN     NaN   \n",
430:        "499          25              NaN             NaN       NaN      NaN     NaN   \n",
431:        "\n",
432:        "     assortativity  embedding_node2vec  embedding_prone  \n",
433:        "0              NaN                 NaN              NaN  \n",
434:        "1              NaN                 NaN              NaN  \n",
435:        "2              NaN                 NaN              NaN  \n",
436:        "3              NaN                 NaN              NaN  \n",
437:        "4              NaN                 NaN              NaN  \n",
438:        "..             ...                 ...              ...  \n",
439:        "495            NaN                 NaN              NaN  \n",
440:        "496            NaN                 NaN              NaN  \n",
441:        "497            NaN                 NaN              NaN  \n",
442:        "498            NaN                 NaN              NaN  \n",
443:        "499            NaN                 NaN              NaN  \n",
444:        "\n",
445:        "[500 rows x 14 columns]"
446:       ]
447:      },
448:      "execution_count": 17,
449:      "metadata": {},
450:      "output_type": "execute_result"
451:     }
452:    ],
453:    "source": [
454:     "df"
455:    ]
456:   },
457:   {
458:    "cell_type": "code",
459:    "execution_count": 12,
460:    "id": "57a9d87f",
461:    "metadata": {},
462:    "outputs": [
463:     {
464:      "data": {
465:       "image/png": "",
466:       "text/plain": [
467:        "<Figure size 1000x300 with 3 Axes>"
468:       ]
469:      },
470:      "metadata": {},
471:      "output_type": "display_data"
472:     }
473:    ],
474:    "source": [
475:     "### Visualize reconstruction error across block sizes and datasets\n",
476:     "fig, ax = plt.subplots(\n",
477:     "    figsize=(10, 3),\n",
478:     "    ncols = 3,\n",
479:     "    sharex=True,\n",
480:     "    sharey=False,\n",
481:     "    # set spacing between subplots\n",
482:     "    gridspec_kw={'wspace': 0.7}\n",
483:     "    )\n",
484:     "\n",
485:     "for group in df.groupby(['block_size', 'dataset']):\n",
486:     "    block_size, dataset = group[0]\n",
487:     "    group_data = group[1]\n",
488:     "\n",
489:     "    marker = marker_styles[dataset]\n",
490:     "    color = colors[dataset]\n",
491:     "\n",
492:     "    # plot the shortest-path reconstruction error for each surrogate\n",
493:     "    path_errors = group_data['shortest_path'].mean()\n",
494:     "    ax[0].plot(\n",
495:     "        [block_size],\n",
496:     "        [path_errors],\n",
497:     "        label=f\"{dataset}\",\n",
498:     "        marker=marker,\n",
499:     "        linewidth=0,\n",
500:     "        color=color\n",
501:     "    )\n",
502:     "\n",
503:     "    # plot the degree-dist reconstruction error for each surrogate\n",
504:     "    degree_errors = group_data['degree'].mean()\n",
505:     "    ax[1].plot(\n",
506:     "        [block_size],\n",
507:     "        [degree_errors],\n",
508:     "        marker=marker,\n",
509:     "        linewidth=0,\n",
510:     "        color=color\n",
511:     "    )\n",
512:     "\n",
513:     "    clustering_errors = group_data['clustering'].mean()\n",
514:     "    ax[2].plot(\n",
515:     "        [block_size],\n",
516:     "        [clustering_errors],\n",
517:     "        marker=marker,\n",
518:     "        linewidth=0,\n",
519:     "        color=color\n",
520:     "    )\n",
521:     "        \n",
522:     "ax[0].set_ylabel('Shortest-path distribution error', fontsize=12)\n",
523:     "ax[1].set_ylabel('Degree distribution error', fontsize=12)\n",
524:     "ax[2].set_ylabel('Clustering distribution error', fontsize=12)\n",
525:     "\n",
526:     "xticks = df['block_size'].unique()[::3]\n",
527:     "for axis in ax:\n",
528:     "    axis.set_xscale('log')\n",
529:     "    axis.set_xticks(xticks)\n",
530:     "    axis.set_xticklabels(xticks, fontsize=12)\n",
531:     "    axis.spines[['top', 'right']].set_visible(False)\n",
532:     "    axis.set_xlabel('Block size', fontsize=12)\n",
533:     "\n",
534:     "    axis.set_xlabel('Block Size')\n",
535:     "\n",
536:     "\n",
537:     "### Construct legend from single axis\n",
538:     "handles, labels = ax[0].get_legend_handles_labels()\n",
539:     "legend_set = set(zip(labels, handles))\n",
540:     "\n",
541:     "by_label = dict(legend_set)\n",
542:     "ax[0].legend(\n",
543:     "    by_label.values(),\n",
544:     "    by_label.keys(),\n",
545:     "    loc='lower left',\n",
546:     "    bbox_to_anchor=(0, -1),\n",
547:     "    fontsize=10,\n",
548:     "    )\n",
549:     "\n",
550:     "plt.show(fig)"
551:    ]
552:   },
553:   {
554:    "cell_type": "code",
555:    "execution_count": 13,
556:    "id": "1f49754b",
557:    "metadata": {},
558:    "outputs": [],
559:    "source": [
560:     "import numpy as np\n",
561:     "\n",
562:     "rng = np.random.default_rng(42)"
563:    ]
564:   },
565:   {
566:    "cell_type": "code",
567:    "execution_count": 14,
568:    "id": "c965ecb3",
569:    "metadata": {},
570:    "outputs": [],
571:    "source": [
572:     "import scipy.sparse as sp\n",
573:     "\n",
574:     "a = sp.random(100, 100, density=0.1, format='csr', random_state=rng)"
575:    ]
576:   },
577:   {
578:    "cell_type": "code",
579:    "execution_count": 15,
580:    "id": "dac2e459",
581:    "metadata": {},
582:    "outputs": [
583:     {
584:      "data": {
585:       "text/plain": [
586:        "array([[0.        , 0.        , 0.        , ..., 0.        , 0.        ,\n",
587:        "        0.        ],\n",
588:        "       [0.        , 0.        , 0.        , ..., 0.        , 0.        ,\n",
589:        "        0.        ],\n",
590:        "       [0.48176355, 0.75232891, 0.        , ..., 0.        , 0.        ,\n",
591:        "        0.86413683],\n",
592:        "       ...,\n",
593:        "       [0.        , 0.        , 0.        , ..., 0.        , 0.        ,\n",
594:        "        0.        ],\n",
595:        "       [0.        , 0.42176606, 0.        , ..., 0.        , 0.        ,\n",
596:        "        0.        ],\n",
597:        "       [0.        , 0.        , 0.        , ..., 0.        , 0.        ,\n",
598:        "        0.        ]])"
599:       ]
600:      },
601:      "execution_count": 15,
602:      "metadata": {},
603:      "output_type": "execute_result"
604:     }
605:    ],
606:    "source": [
607:     "a.toarray()"
608:    ]
609:   },
610:   {
611:    "cell_type": "code",
612:    "execution_count": 16,
613:    "id": "3aa9b937",
614:    "metadata": {},
615:    "outputs": [
616:     {
617:      "data": {
618:       "text/plain": [
619:        "<1x100 sparse matrix of type '<class 'numpy.float64'>'\n",
620:        "\twith 8 stored elements in Compressed Sparse Row format>"
621:       ]
622:      },
623:      "execution_count": 16,
624:      "metadata": {},
625:      "output_type": "execute_result"
626:     }
627:    ],
628:    "source": [
629:     "# flatten the \n",
630:     "a[0, :]"
631:    ]
632:   },
633:   {
634:    "cell_type": "code",
635:    "execution_count": 1,
636:    "id": "5eed144f",
637:    "metadata": {},
638:    "outputs": [],
639:    "source": [
640:     "from sbm.noisy_fit import HeterogeneousGaussNoise, NaiveDegreeGaussNoise, create_sbm_noise\n",
641:     "from sbm.io import SBMWriter\n",
642:     "from pathlib import Path\n",
643:     "import numpy as np"
644:    ]
645:   },
646:   {
647:    "cell_type": "code",
648:    "execution_count": 2,
649:    "id": "8354f69a",
650:    "metadata": {},
651:    "outputs": [
652:     {
653:      "name": "stdout",
654:      "output_type": "stream",
655:      "text": [
656:       "Loading SBM fit from /Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_caltech_fb_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_min_block_size_12_n_iter_100000_temperature_1_0\n"
657:      ]
658:     }
659:    ],
660:    "source": [
661:     "sbm = SBMWriter.load(\n",
662:     "    Path(\"/Users/lmmi/anon_sbm/results/sbm_fits/sbm_fit_caltech_fb_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_min_block_size_12_n_iter_100000_temperature_1_0\")\n",
663:     ")"
664:    ]
665:   },
666:   {
667:    "cell_type": "code",
668:    "execution_count": 4,
669:    "id": "2a0f1cea",
670:    "metadata": {},
671:    "outputs": [
672:     {
673:      "ename": "ValueError",
674:      "evalue": "index pointer size (2081) should be (65)",
675:      "output_type": "error",
676:      "traceback": [
677:       "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
678:       "\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)",
679:       "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m rng = np.random.default_rng(\u001b[32m0\u001b[39m)\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m noiser = \u001b[43mcreate_sbm_noise\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m    \u001b[49m\u001b[43msbm\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43meps\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m1.0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdelta\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m1e-6\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m0.999\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m    \u001b[49m\u001b[43mnoise_type\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mheterogeneous_gaussian\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\n\u001b[32m      5\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m      7\u001b[39m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(noiser, NaiveDegreeGaussNoise)\n\u001b[32m      8\u001b[39m \u001b[38;5;28mprint\u001b[39m(noiser.sigma_n_scalar, noiser.sigma_e_scalar)\n",
680:       "\u001b[36mFile \u001b[39m\u001b[32m~/anon_sbm/src/sbm/noisy_fit.py:346\u001b[39m, in \u001b[36mcreate_sbm_noise\u001b[39m\u001b[34m(sbm, eps, delta, alpha, clip_p, weight_clip, noise_type)\u001b[39m\n\u001b[32m    343\u001b[39m sigma_e_data = (np.sqrt(c_e_val * data_w_e) * S_sum) / R \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[32m    345\u001b[39m \u001b[38;5;66;03m# build sparse σ matrix upper tri\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m346\u001b[39m sigma_e = \u001b[43msp\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcsr_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43m(\u001b[49m\u001b[43msigma_e_data\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    347\u001b[39m \u001b[43m                        \u001b[49m\u001b[43mnp\u001b[49m\u001b[43m.\u001b[49m\u001b[43marray\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata_sigma_idx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    348\u001b[39m \u001b[43m                        \u001b[49m\u001b[43mnp\u001b[49m\u001b[43m.\u001b[49m\u001b[43marange\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdata_sigma_idx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[43m+\u001b[49m\u001b[43m \u001b[49m\u001b[32;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    349\u001b[39m \u001b[43m                       \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m=\u001b[49m\u001b[43m(\u001b[49m\u001b[43mB\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mB\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    350\u001b[39m sigma_e = sigma_e + sigma_e.T - sp.diags(sigma_e.diagonal())\n\u001b[32m    352\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m noise_type == \u001b[33m\"\u001b[39m\u001b[33mheterogeneous_gaussian\u001b[39m\u001b[33m\"\u001b[39m:\n",
681:       "\u001b[36mFile \u001b[39m\u001b[32m/opt/homebrew/Caskroom/miniforge/base/envs/anon_sbm_notebook_arm/lib/python3.12/site-packages/scipy/sparse/_compressed.py:107\u001b[39m, in \u001b[36m_cs_matrix.__init__\u001b[39m\u001b[34m(self, arg1, shape, dtype, copy)\u001b[39m\n\u001b[32m    104\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m dtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    105\u001b[39m     \u001b[38;5;28mself\u001b[39m.data = \u001b[38;5;28mself\u001b[39m.data.astype(dtype, copy=\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[32m--> \u001b[39m\u001b[32m107\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcheck_format\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfull_check\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
682:       "\u001b[36mFile \u001b[39m\u001b[32m/opt/homebrew/Caskroom/miniforge/base/envs/anon_sbm_notebook_arm/lib/python3.12/site-packages/scipy/sparse/_compressed.py:168\u001b[39m, in \u001b[36m_cs_matrix.check_format\u001b[39m\u001b[34m(self, full_check)\u001b[39m\n\u001b[32m    166\u001b[39m \u001b[38;5;66;03m# check index pointer\u001b[39;00m\n\u001b[32m    167\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m (\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m.indptr) != major_dim + \u001b[32m1\u001b[39m):\n\u001b[32m--> \u001b[39m\u001b[32m168\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mindex pointer size (\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[33m) should be (\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[33m)\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    169\u001b[39m                      \u001b[33m\"\u001b[39m\u001b[33m\"\u001b[39m.format(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m.indptr), major_dim + \u001b[32m1\u001b[39m))\n\u001b[32m    170\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m (\u001b[38;5;28mself\u001b[39m.indptr[\u001b[32m0\u001b[39m] != \u001b[32m0\u001b[39m):\n\u001b[32m    171\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mindex pointer should start with 0\u001b[39m\u001b[33m\"\u001b[39m)\n",
683:       "\u001b[31mValueError\u001b[39m: index pointer size (2081) should be (65)"
684:      ]
685:     }
686:    ],
687:    "source": [
688:     "rng = np.random.default_rng(0)\n",
689:     "noiser = create_sbm_noise(\n",
690:     "    sbm, eps=1.0, delta=1e-6, alpha=0.999,\n",
691:     "    noise_type=\"heterogeneous_gaussian\"\n",
692:     "    )\n",
693:     "\n",
694:     "assert isinstance(noiser, NaiveDegreeGaussNoise)\n",
695:     "print(noiser.sigma_n_scalar, noiser.sigma_e_scalar)\n",
696:     "noisy_fit = noiser.sample_sbm_fit(rng)\n"
697:    ]
698:   },
699:   {
700:    "cell_type": "code",
701:    "execution_count": null,
702:    "id": "114a6e02",
703:    "metadata": {},
704:    "outputs": [],
705:    "source": []
706:   }
707:  ],
708:  "metadata": {
709:   "kernelspec": {
710:    "display_name": "anon_sbm_notebook_arm",
711:    "language": "python",
712:    "name": "python3"
713:   },
714:   "language_info": {
715:    "codemirror_mode": {
716:     "name": "ipython",
717:     "version": 3
718:    },
719:    "file_extension": ".py",
720:    "mimetype": "text/x-python",
721:    "name": "python",
722:    "nbconvert_exporter": "python",
723:    "pygments_lexer": "ipython3",
724:    "version": "3.12.11"
725:   }
726:  },
727:  "nbformat": 4,
728:  "nbformat_minor": 5
729: }

================
File: src/metrics/shortest_path.py
================
  1: """ 
  2: Metrics functions to compare the shortest-path properties of two graphs.
  3: """
  4: # metrics/shortest_path.py
  5: from typing import Optional
  6: import numpy as np
  7: import networkx as nx
  8: from scipy.stats import wasserstein_distance #  1-D EMD
  9: from scipy.sparse import csr_array
 10: from sbm.utils.util import restrict_to_lcc, _nx_graph
 11: import networkx as nx
 12: from typing import  Hashable, List, Union
 13: ### Aliases  --------------------------------------------------------
 14: Number = Union[int, float]
 15: ### Helpers ---------------------------------------------------------
 16: def _average_path_length(
 17:     G: nx.Graph,
 18:     *,
 19:     n_samples: Optional[int],
 20:     rng: np.random.Generator,
 21: ) -> float:
 22:     """Return ⟨d⟩ ≡ mean shortest‑path length in *G*.
 23:     If *n_samples* is None or the graph is small (≤ 2000 nodes), the exact
 24:     average is computed. Otherwise *n_samples* node pairs are sampled.
 25:     """
 26:     n = G.number_of_nodes()
 27:     if n <= 1:
 28:         return 0.0
 29:     if n_samples is None or n <= 2000:
 30:         return nx.average_shortest_path_length(G)
 31:     # --- sample pairs ---------------------------------------------------------
 32:     nodes = list(G)
 33:     path_lens: List[int] = []
 34:     for _ in range(int(n_samples)):
 35:         u, v = rng.choice(nodes, size=2, replace=False)
 36:         try:
 37:             path_lens.append(nx.shortest_path_length(G, u, v))
 38:         except nx.NetworkXNoPath:
 39:             # Ignore unreachable pairs → corresponds to infinite distance.
 40:             pass
 41:     return float(np.mean(path_lens)) if path_lens else np.inf
 42: def all_unique_shortest_distances(
 43:     G: nx.Graph,
 44:     weight: str | None = None,
 45:     cutoff: Number | None = None,
 46:     directed: bool = False,
 47: ) -> List[Number]:
 48:     """
 49:     Return a list containing the length of every unique shortest path in *G*.
 50:     Parameters
 51:     ----------
 52:     G : networkx.Graph
 53:         The input graph (directed or undirected, weighted or unweighted).
 54:     weight : str or None, default=None
 55:         Edge-attribute key to use as weight.  ``None`` ⇒ treat edges as unit-weight.
 56:     cutoff : int | float | None, default=None
 57:         Ignore paths longer than *cutoff* (same semantics as NetworkX).
 58:     Returns
 59:     -------
 60:     distances : list[Number]
 61:         One entry per unordered, connected node pair.  
 62:         Unreachable pairs are silently skipped.
 63:     """
 64:     # 1.  Choose the correct all-pairs iterator
 65:     if weight is None:
 66:         # Unweighted ⇢ multi-source breadth-first search
 67:         iterator = nx.all_pairs_shortest_path_length(G, cutoff=cutoff)  # :contentReference[oaicite:0]{index=0}
 68:     else:
 69:         # Weighted ⇢ repeated Dijkstra
 70:         iterator = nx.all_pairs_dijkstra_path_length(G, cutoff=cutoff, weight=weight)  # :contentReference[oaicite:1]{index=1}
 71:     # 2.  Collect unique unordered pairs
 72:     seen: set[frozenset[Hashable]] = set()
 73:     distances: List[Number] = []
 74:     for u, length_dict in iterator:
 75:         for v, d in length_dict.items():
 76:             if u == v:                       # skip self-loops (distance 0)
 77:                 continue
 78:             pair = frozenset((u, v))         # unordered representation
 79:             if pair in seen:                 # already counted via (v, u)
 80:                 continue
 81:             seen.add(pair)
 82:             distances.append(d)
 83:     return distances
 84: ###############################################################################
 85: ### --- Metrics --------------------------------------------------------
 86: ###############################################################################
 87: def shortest_path_distance(
 88:         emp_adj: csr_array,
 89:         sur_adj: csr_array,
 90:         n_samples: Optional[int]=10_000,
 91:         rng:np.random.Generator = np.random.default_rng(1)
 92:     ) -> float:
 93:     """
 94:     Earth-mover (1-D Wasserstein) distance between the distributions
 95:     of all-pairs shortest-path lengths.
 96:     Parameters
 97:     ----------
 98:     emp_adj, sur_adj : scipy.sparse.csr_matrix
 99:         Adjacency of empirical and surrogate graphs (undirected).
100:     n_samples : int, optional
101:         Number of samples to use for the distributions.
102:         If None, all pairs are used.
103:     Returns
104:     -------
105:     float
106:         Distance (lower = more similar).
107:     """
108:     emp_adj = restrict_to_lcc(emp_adj, directed=False)
109:     sur_adj = restrict_to_lcc(sur_adj, directed=False)
110:     emp_graph_size = emp_adj.shape[0] # type: ignore
111:     sur_graph_size = sur_adj.shape[0] # type: ignore
112:     if n_samples is None:
113:         # Use all pairs if n_samples is None, generated using networkx (returns iterator)
114:         x = all_unique_shortest_distances(
115:             nx.from_scipy_sparse_matrix(emp_adj),
116:             weight=None,
117:             cutoff=None
118:         )
119:         y = all_unique_shortest_distances(
120:             nx.from_scipy_sparse_matrix(sur_adj),
121:             weight=None,
122:             cutoff=None
123:         )
124:     else:
125:         n_samples_emp = int(min(
126:             n_samples,
127:             emp_graph_size * (emp_graph_size - 1) // 2,
128:         ))
129:         n_samples_sur = int(min(
130:             n_samples,
131:             sur_graph_size * (sur_graph_size - 1) // 2,
132:         ))
133:         emp_pair_part_1 = rng.choice(emp_graph_size, size=n_samples_emp, replace=True)
134:         emp_pair_part_2 = rng.choice(emp_graph_size-1, size=n_samples_emp, replace=True)
135:         emp_pair_part_2[emp_pair_part_2 >= emp_pair_part_1] += 1
136:         emp_pairs = np.column_stack((emp_pair_part_1, emp_pair_part_2))
137:         sur_pair_part_1 = rng.choice(sur_graph_size, size=n_samples_sur, replace=True)
138:         sur_pair_part_2 = rng.choice(sur_graph_size-1, size=n_samples_sur, replace=True)
139:         sur_pair_part_2[sur_pair_part_2 >= sur_pair_part_1] += 1
140:         sur_pairs = np.column_stack((sur_pair_part_1, sur_pair_part_2))
141:         def sample_shortest_paths(adj, pairs):
142:             G = nx.from_scipy_sparse_matrix(adj)
143:             path_lengths = []
144:             for pair in pairs:
145:                 try:
146:                     length = nx.shortest_path_length(G, source=pair[0], target=pair[1])
147:                     path_lengths.append(length)
148:                 except nx.exception.NodeNotFound:
149:                     raise Warning(
150:                         f"Node {pair[0]} or {pair[1]} not found in the graph."
151:                     )
152:             return path_lengths
153:         x = sample_shortest_paths(emp_adj, emp_pairs)
154:         y = sample_shortest_paths(sur_adj, sur_pairs)
155:     return wasserstein_distance(x, y)
156: ###############################################################################
157: # Average path‑length difference -------------------------------------------
158: ###############################################################################
159: def avg_path_length_difference(
160:     emp_adj: csr_array,
161:     sur_adj: csr_array,
162:     *,
163:     n_samples: Optional[int] = 10_000,
164:     rng: np.random.Generator = np.random.default_rng(1),
165:     restrict_to_lcc: bool = True,
166: ) -> float:
167:     """Absolute difference of average shortest‑path lengths.
168:     Parameters
169:     ----------
170:     n_samples : int | None
171:         If *None*, compute the exact average; otherwise sample this many
172:         (unordered) node pairs.
173:     """
174:     G_emp = _nx_graph(emp_adj, directed=False)
175:     G_sur = _nx_graph(sur_adj, directed=False)
176:     if restrict_to_lcc:
177:         G_emp = G_emp.subgraph(max(nx.connected_components(G_emp), key=len))
178:         G_sur = G_sur.subgraph(max(nx.connected_components(G_sur), key=len))
179:     d_emp = _average_path_length(G_emp, n_samples=n_samples, rng=rng)
180:     d_sur = _average_path_length(G_sur, n_samples=n_samples, rng=rng)
181:     return abs(d_emp - d_sur)

================
File: src/sbm/block_change_proposers.py
================
  1: from typing import List, Optional, Tuple, DefaultDict, Literal
  2: from collections import defaultdict, Counter
  3: import numpy as np
  4: from sbm.block_data import BlockData
  5: from sbm.edge_delta import EdgeDelta, NumpyEdgeDelta
  6: ### Aliases 
  7: CombinationDelta= DefaultDict[Tuple[int, int], int] # changes in possible pairs between blocks
  8: ProposedValidChanges = List[Tuple[int, int]]  # list of proposed node-block pairs
  9: ChangeProposerName = Literal["uniform_swap", "edge_based_swap", "triadic_swap"]
 10: ChangeProposers = Literal["NodeSwapProposer", "EdgeBasedSwapProposer", "TriadicSwapProposer"]
 11: ### ChangeProposer classes for proposing block changes in the SBM
 12: # These classes handle the logic of proposing valid changes to the block assignments
 13: # and computing the resulting edge deltas for the block connectivity matrix.
 14: class ChangeProposer:
 15:     """ 
 16:     Class to propose block-assignment changes for the MCMC algorithm.
 17:     Handles min block size constraints. All functions return None
 18:     if a  and ensures valid moves.
 19:     Proposers shoudl always change block-id to block-adjacency idx before
 20:     computing deltas.
 21:     """
 22:     def __init__(self,
 23:                  block_data: BlockData,
 24:                  rng: np.random.Generator=np.random.default_rng(1),
 25:                  use_numpy: bool = False,
 26:                  ):
 27:         self.block_data = block_data
 28:         self.rng = rng
 29:         self.min_block_size = 1
 30:         self.use_numpy = use_numpy
 31:         # Direct CSR pointers for O(1) edge sampling
 32:         self._indptr = self.block_data.graph_data.adjacency.indptr
 33:         self._indices = self.block_data.graph_data.adjacency.indices
 34:     def propose_change(self,
 35:         changes: Optional[ProposedValidChanges] = None,
 36:         )-> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
 37:         raise NotImplementedError("This method should be overridden by subclasses.")
 38:     def _compute_delta_edge_counts(self, proposed_changes: ProposedValidChanges) -> EdgeDelta:
 39:         """
 40:         Compute the edge deltas for the proposed change.
 41:         :param change: Proposed change as a list of (node, target_block) tuples.
 42:         :return: EdgeDelta containing the changes in edge counts between blocks.
 43:         """
 44:         raise NotImplementedError("This method should be overridden by subclasses.")
 45:     # -----------------------------------------------------------------------------
 46:     def _compute_edge_counts_between_node_and_blocks(self,
 47:                                                node: int,
 48:                                                ) -> Counter[int]:
 49:         """
 50:         Compute the number of edges between a node and each affected block.
 51:         :param node: The node to move.
 52:         :param affected_blocks: The blocks affected by the move.
 53:         :return: A dictionary mapping block IDs to edge counts with the node.
 54:         k_i: Counter[int]: number of edges between node and each affected block.
 55:         returns a Counter object where keys are block IDs and values are edge counts.
 56:         """
 57:         if self.block_data.directed:
 58:             raise NotImplementedError("Directed graphs are not supported yet.")
 59:         else:
 60:             #neighbors = self.block_data.graph_data.adjacency[:, [node]].indices  # type: ignore
 61:             neighbors = self.block_data.graph_data.adjacency[[node], :].indices  # type: ignore
 62:             blocks_among_neighbors = [
 63:                 self.block_data.block_indices[
 64:                     self.block_data.blocks[neighbor]
 65:                 ] for neighbor in neighbors
 66:             ]
 67:             k_i = Counter(blocks_among_neighbors)
 68:             return k_i
 69: class NodeSwapProposer(ChangeProposer):
 70:     def propose_change(self,
 71:         changes: Optional[ProposedValidChanges] = None,
 72:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
 73:         """
 74:         Propose swapping two nodes between different blocks.
 75:         :return: Tuple of (node1, node2) or None if no valid swap.
 76:         """
 77:         if changes is not None:
 78:             if len(changes) != 2:
 79:                 raise ValueError("NodeSwapProposer requires exactly two nodes to swap.")
 80:             proposed_changes = changes
 81:         else:
 82:             # Select two different blocks
 83:             block1, block2 = self.rng.choice(
 84:                 self.block_data.block_connectivity.shape[0],
 85:                 #list(self.block_data.block_sizes.keys()),
 86:                 size=2,
 87:                 replace=False
 88:             )
 89:             # Select one node from each block
 90:             # Note: changing to list is inefficient for large blocks.
 91:             # However, having memberships being lists allow for fast 
 92:             # membership updates.
 93:             # Change if large blocks are common.
 94:             node1 = self.rng.choice(
 95:                 list(self.block_data.block_members[block1])
 96:             )
 97:             node2 = self.rng.choice(
 98:                 list(self.block_data.block_members[block2])
 99:             )
100:             proposed_changes :ProposedValidChanges = [(node1, block2), (node2, block1)]
101:         delta_e: EdgeDelta = self._compute_delta_edge_counts(
102:                 proposed_changes=proposed_changes,
103:                 use_numpy=self.use_numpy,
104:             )
105:         delta_n: CombinationDelta = defaultdict(int)
106:         return proposed_changes, delta_e, delta_n
107:     def _compute_delta_edge_counts(self,
108:             proposed_changes: ProposedValidChanges,
109:             use_numpy: bool = False,
110:         )-> EdgeDelta:
111:         """
112:         Compute the changes in edge counts between blocks due to swapping
113:         node i and node j.
114:         :param i: The index of the first node being swapped.
115:         :param j: The index of the second node being swapped.
116:         :param k_i: The edges between the moving node and its neighbor blocks.
117:         :param source_block: The block from which the node is moved.
118:         :param target_block: The block to which the node is moved.
119:         :return: A Counter mapping block pairs to changes in edge counts.
120:         """
121:         if self.block_data.directed:
122:             raise NotImplementedError("Directed graphs are not supported yet.")
123:         (i, old_block_j), (j, old_block_i) = proposed_changes
124:         if use_numpy:
125:             delta_e = NumpyEdgeDelta(
126:                 n_blocks=len(self.block_data.block_sizes)
127:             )
128:         else:
129:             delta_e = EdgeDelta(
130:                 n_blocks=len(self.block_data.block_sizes)
131:             )
132:         # compute the edge counts for the blocks of i and j
133:         # on block-adjacency idx level
134:         k_i = self._compute_edge_counts_between_node_and_blocks(i)
135:         k_j = self._compute_edge_counts_between_node_and_blocks(j)
136:         affected_blocks = set(k_i.keys()) | set(k_j.keys())
137:         # new implementation with combined increment function
138:         neighbor_blocks = affected_blocks - {old_block_i, old_block_j}
139:         # build increment lists for neighbor blocks
140:         counts = [
141:             -k_i[t] + k_j[t] for t in neighbor_blocks
142:         ] + [
143:             -k_j[t] + k_i[t] for t in neighbor_blocks
144:         ]
145:         blocks_i = [old_block_i] * len(neighbor_blocks) + [old_block_j] * len(neighbor_blocks)
146:         block_j = list(neighbor_blocks) + list(neighbor_blocks)
147:         delta_e.increment(
148:             counts = counts,
149:             blocks_i = blocks_i,
150:             blocks_j = block_j,
151:         ) 
152:         # Add the changes for the old blocks of i and j
153:         has_edge_ij = bool(self.block_data.graph_data.adjacency[i, j])
154:         delta_e.increment(
155:             counts=[
156:                 k_i[old_block_i] - k_i[old_block_j] + k_j[old_block_j] - k_j[old_block_i] + 2 * has_edge_ij,
157:                 k_j[old_block_i] - k_i[old_block_i] - has_edge_ij,
158:                 k_i[old_block_j] - k_j[old_block_j] - has_edge_ij
159:             ],
160:             blocks_i=[old_block_i, old_block_i, old_block_j],
161:             blocks_j=[old_block_j, old_block_i, old_block_j]
162:         )
163:         return delta_e
164: # -----------------------------------------------------------------------------
165: #  Edge‑based swap proposer
166: # -----------------------------------------------------------------------------
167: class EdgeBasedSwapProposer(NodeSwapProposer):
168:     """A Peixoto‑style *edge‑conditioned* two‑vertex swap.
169:     1. Pick a **cross‑block edge** ``(i,j)`` uniformly at random.
170:     2. Swap the block labels of its end‑points.
171:     The proposal is *symmetric* (uniform over edges), so the Metropolis–
172:     Hastings acceptance probability is simply ``min(1, exp(Δℓ/T))``.
173:     """
174:     def __init__(
175:         self,
176:         block_data,
177:         rng: np.random.Generator = np.random.default_rng(1),
178:         use_numpy: bool = True,
179:         max_trials: int = 128,
180:     ) -> None:
181:         super().__init__(block_data=block_data, rng=rng, use_numpy=use_numpy)
182:         self.max_trials = max_trials
183:         # Direct CSR pointers for O(1) edge sampling
184:         self._indptr = self.block_data.graph_data.adjacency.indptr
185:         self._indices = self.block_data.graph_data.adjacency.indices
186:     # ------------------------------------------------------------------
187:     def propose_change(
188:         self,
189:         changes: Optional[ProposedValidChanges] = None,
190:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
191:         if changes is not None:
192:             return super().propose_change(changes=changes)
193:         n = self.block_data.graph_data.num_nodes  # type: ignore[attr-defined]
194:         blocks = self.block_data.blocks
195:         for _ in range(self.max_trials):
196:             i = int(self.rng.integers(n))
197:             # get i's neighbor index-range (adj is csr format)
198:             istart, iend = self._indptr[i], self._indptr[i + 1]
199:             if iend == istart:
200:                 continue  # isolated vertex
201:             # pick a random neighbor j
202:             j = int(self.rng.choice(self._indices[istart:iend]))
203:             bi, bj = blocks[i], blocks[j]
204:             if bi == bj:
205:                 continue  # need a cross‑block edge
206:             proposed_changes: ProposedValidChanges = [(i, bj), (j, bi)]
207:             break
208:         else:  # all trials failed – fall back to uniform swap
209:             return super().propose_change(changes=None)
210:         delta_e = self._compute_delta_edge_counts(
211:             proposed_changes=proposed_changes,
212:             use_numpy=self.use_numpy,
213:         )
214:         delta_n: CombinationDelta = defaultdict(int)  # block sizes unchanged
215:         return proposed_changes, delta_e, delta_n
216: # -----------------------------------------------------------------------------
217: #  Triadic informed swap   (new implementation)
218: # -----------------------------------------------------------------------------
219: class TriadicSwapProposer(NodeSwapProposer):
220:     """A *three‑vertex* informed swap.
221:     Strategy
222:     --------
223:     1. Pick a random vertex ``i`` (block *A*).
224:     2. Choose a random neighbour ``j`` with ``block(j) = B \neq A``.
225:     3. Search in block *B* for a vertex ``l \ne j`` that has **at least one**
226:        neighbour in block *A*.
227:     4. Swap the block labels of ``i`` and ``l``.
228:     Swapping these two vertices reduces the expected number of *cross* edges by
229:     converting:
230:     * all edges from ``i`` into *B* to *internal*, and
231:     * all edges from `l``` into *A* to *internal*,
232:     while typically adding fewer new cross edges because ``i`` and ``j'`` were
233:     originally “boundary” vertices.
234:     The proposal distribution is still *symmetric* because every triad is
235:     selected with the same probability in either direction, so the usual MH
236:     acceptance rule applies.
237:     """
238:     def __init__(
239:         self,
240:         block_data,
241:         rng: np.random.Generator = np.random.default_rng(1),
242:         use_numpy: bool = False,
243:         max_trials: int = 128,
244:         candidate_trials: int = 64,
245:     ) -> None:
246:         super().__init__(block_data=block_data, rng=rng, use_numpy=use_numpy)
247:         self.max_trials = max_trials            # attempts to find (i,j)
248:         self.candidate_trials = candidate_trials  # attempts to find j′ per (i,j)
249:         self._indptr = self.block_data.graph_data.adjacency.indptr
250:         self._indices = self.block_data.graph_data.adjacency.indices
251:     # ------------------------------------------------------------------
252:     def propose_change(
253:         self,
254:         changes: Optional[ProposedValidChanges] = None,
255:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
256:         # Explicit‑changes path used in unit tests
257:         if changes is not None:
258:             return super().propose_change(changes=changes)
259:         n = self.block_data.graph_data.num_nodes  # type: ignore[attr-defined]
260:         blocks = self.block_data.blocks
261:         for _ in range(self.max_trials):
262:             # ---- step 1: pick i ------------------------------------------------
263:             i = int(self.rng.integers(n))
264:             # find i's neighbour index-range (adj is csr format)
265:             istart, iend = self._indptr[i], self._indptr[i + 1]
266:             if iend == istart:
267:                 continue  # isolated – try another
268:             # ---- step 2: pick neighbour j in a *different* block --------------
269:             neighs_i = self._indices[istart:iend]
270:             j = int(self.rng.choice(neighs_i))
271:             a, b = blocks[i], blocks[j]
272:             if a == b:
273:                 continue  # need a cross edge i‑j
274:             # ---- step 3: find j′ in block b that touches block a --------------
275:             block_b_members = self.block_data.block_members[b]
276:             # change to list and randomlize order
277:             block_b_members = list(block_b_members)
278:             self.rng.shuffle(block_b_members)
279:             for l in block_b_members[:self.candidate_trials]:
280:                 if l in (i, j):
281:                     continue
282:                 # find neighbors of l in block a
283:                 lstart, lend = self._indptr[l], self._indptr[l + 1]
284:                 l_neighbors = self._indices[lstart:lend]
285:                 l_neighbor_in_block_a = any(
286:                     blocks[neighbor] == a for neighbor in l_neighbors
287:                 )
288:                 if not l_neighbor_in_block_a:
289:                     continue  # l must touch block a
290:                 proposed_changes: ProposedValidChanges = [(i, b), (l, a)]
291:                 delta_e = self._compute_delta_edge_counts(
292:                     proposed_changes=proposed_changes,
293:                     use_numpy=self.use_numpy,
294:                 )
295:                 delta_n: CombinationDelta = defaultdict(int)
296:                 return proposed_changes, delta_e, delta_n
297:             # could not find j′ – back to outer loop
298:             continue
299:         # ---- fallback --------------------------------------------------------
300:         # If every attempt failed (e.g. almost perfect partition), fall back to
301:         # a plain uniform swap to keep the chain ergodic.
302:         return super().propose_change(changes=None)
303: # -----------------------------------------------------------------------------#
304: #  Cross-triangle (cross-wedge) swap proposer                                   #
305: # -----------------------------------------------------------------------------#
306: class CrossTriangleSwapProposer(NodeSwapProposer):
307:     """
308:     Swap the *odd* vertex of an open cross-wedge.
309:     1. Draw a **cross edge** (i,j) uniformly at random.
310:     2. Pick a random neighbour k of j such that block(k) == block(i) (i.e. an
311:        *open wedge* i-j-k with i,k in the same block, j outside that block).
312:     3. Swap the block labels of *i* and *j*.
313:     When i-k are **not directly connected**, the move converts two cross edges
314:     (i,j) and (j,k) into one cross edge (i,j) and one *internal* edge (j,k),
315:     giving a positive Δ log-likelihood in expectation.  Proposal is symmetric.
316:     """
317:     def __init__(
318:         self,
319:         block_data: BlockData,
320:         rng: np.random.Generator = np.random.default_rng(1),
321:         use_numpy: bool = True,
322:         max_trials: int = 256,
323:         neighbour_trials: int = 8,
324:     ) -> None:
325:         super().__init__(block_data=block_data, rng=rng, use_numpy=use_numpy)
326:         self.max_trials = max_trials
327:         self.neighbour_trials = neighbour_trials
328:         self._indptr = self.block_data.graph_data.adjacency.indptr
329:         self._indices = self.block_data.graph_data.adjacency.indices
330:     # ------------------------------------------------------------------
331:     def propose_change(
332:         self,
333:         changes: Optional[ProposedValidChanges] = None,
334:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
335:         if changes is not None:                     # path for unit tests
336:             return super().propose_change(changes)
337:         n = self.block_data.graph_data.num_nodes    # type: ignore[attr-defined]
338:         blocks = self.block_data.blocks
339:         for _ in range(self.max_trials):
340:             # ---- pick a random edge -----------------------------------------
341:             i = int(self.rng.integers(n))
342:             istart, iend = self._indptr[i], self._indptr[i + 1]
343:             if istart == iend:
344:                 continue                            # i is isolated
345:             j = int(self.rng.choice(self._indices[istart:iend]))
346:             bi, bj = blocks[i], blocks[j]
347:             if bi == bj:
348:                 continue                            # need a cross edge
349:             # ---- search a neighbour k of j inside block bi ------------------
350:             jstart, jend = self._indptr[j], self._indptr[j + 1]
351:             nbrs_j = self._indices[jstart:jend]
352:             if len(nbrs_j) == 0:
353:                 continue
354:             # sample up to neighbour_trials neighbours
355:             cand = self.rng.choice(
356:                 nbrs_j,
357:                 size=min(self.neighbour_trials, len(nbrs_j)),
358:                 replace=False,
359:             )
360:             k = next((int(v) for v in cand if blocks[v] == bi and v != i), None)
361:             if k is None:
362:                 continue                            # wedge not found
363:             # ---- valid cross-wedge: swap i and j ----------------------------
364:             proposed_changes: ProposedValidChanges = [(i, bj), (j, bi)]
365:             delta_e = self._compute_delta_edge_counts(
366:                 proposed_changes=proposed_changes,
367:                 use_numpy=self.use_numpy,
368:             )
369:             delta_n: CombinationDelta = defaultdict(int)
370:             return proposed_changes, delta_e, delta_n
371:         # fallback to uniform swap
372:         return super().propose_change(changes=None)
373: # -----------------------------------------------------------------------------#
374: #  Twin-leaf swap proposer                                                     #
375: # -----------------------------------------------------------------------------#
376: class TwinLeafSwapProposer(NodeSwapProposer):
377:     """
378:     Swap two *leaves* whose neighbours lie in each other’s blocks.
379:     1. Pick a random **leaf** i (deg=1) whose neighbour u is in block B != block(i).
380:     2. Inside block B, look for another leaf k (deg=1, k≠i) whose sole neighbour
381:        v lies in block A = block(i).
382:     3. Swap the labels of i and k.
383:     This move removes two cross edges and introduces *zero* new ones, because
384:     leaves have no other connections.  Works great on heavy-tailed networks.
385:     """
386:     def __init__(
387:         self,
388:         block_data: BlockData,
389:         rng: np.random.Generator = np.random.default_rng(1),
390:         use_numpy: bool = True,
391:         max_trials: int = 256,
392:         partner_trials: int = 32,
393:     ) -> None:
394:         super().__init__(block_data=block_data, rng=rng, use_numpy=use_numpy)
395:         self.max_trials = max_trials
396:         self.partner_trials = partner_trials
397:         self._indptr = self.block_data.graph_data.adjacency.indptr
398:         self._indices = self.block_data.graph_data.adjacency.indices
399:     # ------------------------------------------------------------------
400:     def _is_leaf(self, v: int) -> bool:
401:         return (self._indptr[v + 1] - self._indptr[v]) == 1
402:     # ------------------------------------------------------------------
403:     def propose_change(
404:         self,
405:         changes: Optional[ProposedValidChanges] = None,
406:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
407:         if changes is not None:
408:             return super().propose_change(changes)
409:         n = self.block_data.graph_data.num_nodes    # type: ignore[attr-defined]
410:         blocks = self.block_data.blocks
411:         for _ in range(self.max_trials):
412:             # ---- step 1: choose a random leaf i -----------------------------
413:             i = int(self.rng.integers(n))
414:             if not self._is_leaf(i):
415:                 continue
416:             # unique neighbour of i
417:             u = int(self._indices[self._indptr[i]])
418:             a, b = blocks[i], blocks[u]
419:             if a == b:
420:                 continue                            # internal leaf – ignore
421:             # ---- step 2: search leaf partner k in block b -------------------
422:             block_b_members = list(self.block_data.block_members[b])
423:             if len(block_b_members) <= 1:
424:                 continue
425:             self.rng.shuffle(block_b_members)
426:             trials = 0
427:             for k in block_b_members:
428:                 if trials >= self.partner_trials:
429:                     break
430:                 trials += 1
431:                 if k == i or (not self._is_leaf(k)):
432:                     continue
433:                 v = int(self._indices[self._indptr[k]])
434:                 if blocks[v] != a:                  # neighbour must lie in block a
435:                     continue
436:                 # ---- valid twin leaves found: swap i,k ----------------------
437:                 proposed_changes: ProposedValidChanges = [(i, b), (k, a)]
438:                 delta_e = self._compute_delta_edge_counts(
439:                     proposed_changes=proposed_changes,
440:                     use_numpy=self.use_numpy,
441:                 )
442:                 delta_n: CombinationDelta = defaultdict(int)
443:                 return proposed_changes, delta_e, delta_n
444:             # partner not found – try another i
445:             continue
446:         # fallback
447:         return super().propose_change(changes=None)

================
File: src/sbm/io.py
================
  1: from typing import Dict, Callable, Iterable, Tuple, Optional
  2: from pathlib import Path
  3: from dataclasses import dataclass
  4: import json
  5: import gzip
  6: import numpy as np
  7: from scipy.sparse import csr_array, csr_array, load_npz, coo_matrix
  8: from scipy.io import mmread
  9: import networkx as nx                                # light dep
 10: import numpy as np
 11: from scipy.sparse import load_npz, save_npz
 12: from scipy.sparse import csr_array
 13: from sbm.graph_data import GraphData
 14: # src/sbm/io.py
 15: @dataclass
 16: class SBMFit:
 17:     block_sizes: list[int]
 18:     block_conn: csr_array
 19:     directed_graph: bool # if undirected, only upper triangle is stored
 20:     neg_loglike: float
 21:     metadata: dict
 22: class SBMWriter:
 23:     @staticmethod
 24:     def save(path: Path, fit: SBMFit) -> None:
 25:         """ save SBM fit to file """
 26:         path.mkdir(parents=True, exist_ok=True)
 27:         clean_sizes  = [int(s) for s in fit.block_sizes]
 28:         (path / "block_sizes.json").write_text(json.dumps(clean_sizes))
 29:         # save sparce block connectivity matrix using scipy
 30:         with open(path / "block_connectivity.npz", 'wb') as file:
 31:             save_npz(file, fit.block_conn, compressed=True)
 32:         (path / "directed_graph.txt").write_text(str(fit.directed_graph))
 33:         (path / "neg_loglike.txt").write_text(str(fit.neg_loglike))
 34:         with open(path / "metadata.json", 'w') as f:
 35:             json.dump(fit.metadata, f)
 36:     @staticmethod
 37:     def load(path: Path, silence:bool=False) -> SBMFit:
 38:         if not silence:
 39:             print(f"Loading SBM fit from {path}")
 40:         with open(path / "block_sizes.json", 'r') as sizes_file:
 41:             block_sizes = json.load(sizes_file)
 42:         block_sizes = [int(size) for size in block_sizes]
 43:         with open(path / "block_connectivity.npz", 'rb') as conn_file:
 44:             block_conn = load_npz(conn_file)
 45:         directed_graph = path / "directed_graph.txt"
 46:         directed_graph = (path / "directed_graph.txt").read_text().strip().lower() == 'true'
 47:         neg_loglike = float((path / "neg_loglike.txt").read_text().strip())
 48:         with open(path / "metadata.json", 'r') as f:
 49:             metadata = json.load(f)
 50:         return SBMFit(
 51:             #blocks=blocks,
 52:             block_sizes=block_sizes,
 53:             block_conn=csr_array(block_conn),
 54:             directed_graph=directed_graph,
 55:             neg_loglike=neg_loglike,
 56:             metadata=metadata
 57:         )
 58: # ---------------------------------------------------------------------
 59: #  GraphLoader
 60: # ---------------------------------------------------------------------
 61: class GraphLoader:
 62:     """
 63:     Factory that maps a file *extension* to a loader function and returns
 64:     a `GraphData` object (CSR adjacency + directed flag).
 65:     Register new loaders with the `@GraphLoader.register('.ext')`
 66:     decorator.
 67:     """
 68:     # maps extension (lower-case, incl. leading dot) -> callable
 69:     registry: Dict[str, Callable[[Path], Tuple[csr_array, bool]]] = {}
 70:     # ----------------------- decorator -------------------------------
 71:     @classmethod
 72:     def register(cls, *exts: str):
 73:         """
 74:         Use as::
 75:             @GraphLoader.register('.gml', '.graphml')
 76:             def _load_graphml(path): ...
 77:         """
 78:         def decorator(fn: Callable[[Path], Tuple[csr_array, bool]]):
 79:             for ext in exts:
 80:                 cls.registry[ext.lower()] = fn
 81:             return fn
 82:         return decorator
 83:     # ----------------------- public API ------------------------------
 84:     @staticmethod
 85:     def load(
 86:         path: Path,
 87:         *,
 88:         directed: Optional[bool] = None,
 89:         force_undirected: Optional[bool] = None
 90:     ) -> GraphData:
 91:         """Load graph at *path* and return GraphData."""
 92:         ext = path.suffix.lower()
 93:         if ext not in GraphLoader.registry:
 94:             raise ValueError(
 95:                 f"GraphLoader: no loader registered for extension '{ext}'."
 96:             )
 97:         adj, is_directed = GraphLoader.registry[ext](path)
 98:         # allow caller to override detection
 99:         if directed is not None:
100:             is_directed = bool(directed)
101:         # if caller wants undirected, symmetrise the adjacency matrix
102:         if force_undirected:
103:             if is_directed:
104:                 adj = adj.maximum(adj.T)
105:             is_directed = False
106:         adj = csr_array(adj, dtype=np.int8)  # ensure type is int8
107:         return GraphData(adjacency_matrix=adj, directed=is_directed)
108:     # ---------------- default loaders -------------------------------
109: # 1. compressed / plain .npz containing a CSR adjacency ----------------
110: @GraphLoader.register(".npz")
111: def _load_npz(path: Path) -> Tuple[csr_array, bool]:
112:     adj = load_npz(path)
113:     directed = _is_directed(adj)
114:     return adj.tocsr(), directed
115: # 2. Matrix Market -----------------------------------------------------
116: @GraphLoader.register(".mtx")
117: def _load_mtx(path: Path) -> Tuple[csr_array, bool]:
118:     adj = mmread(str(path))
119:     adj = csr_array(adj, dtype=np.int8)
120:     directed = _is_directed(adj)
121:     return adj, directed
122: # 3. Plain edge list (.edges, .edgelist, .txt, optional .gz) -----------
123: @GraphLoader.register(".edges", ".edgelist", ".txt", ".gz")
124: def _load_edgelist(path: Path) -> Tuple[csr_array, bool]:
125:     opener = gzip.open if path.suffix == ".gz" else open
126:     rows, cols = [], []
127:     if not path.exists():
128:         raise FileNotFoundError(f"GraphLoader: file {path} does not exist.")
129:     with opener(path, "rt") as f:
130:         for line in f:
131:             if not line.strip() or line.startswith("#"):
132:                 continue
133:             u, v = map(int, line.split()[:2])
134:             rows.append(u)
135:             cols.append(v)
136:     n = max(rows + cols) + 1
137:     data = np.ones(len(rows), dtype=np.int8)
138:     adj = coo_matrix((data, (rows, cols)), shape=(n, n)).tocsr()
139:     directed = _is_directed(adj)
140:     if not directed:            # symmetrise if undirected
141:         adj = adj.maximum(adj.T)
142:     adj = csr_array(adj, dtype=np.int8)  # ensure type is int8
143:     return adj, directed
144: # 4. GML / GraphML via NetworkX ---------------------------------------
145: @GraphLoader.register(".gml", ".graphml")
146: def _load_graphml(path: Path) -> Tuple[csr_array, bool]:
147:     G = nx.read_gml(path) if path.suffix == ".gml" else nx.read_graphml(path)
148:     directed = G.is_directed()
149:     # new version of networkx
150:     #adj = nx.to_scipy_sparse_array(G, format="csr", dtype=np.int8)
151:     # old version of networkx
152:     adj = nx.to_scipy_sparse_matrix(G, format="csr", dtype=np.int8)
153:     if not directed:
154:         adj = adj.maximum(adj.T)
155:     return adj, directed
156: # ---------------- helper ----------------------------------------------
157: def _is_directed(adj:  csr_array, tol: int = 0) -> bool:
158:     """
159:     Quick symmetric test for an unweighted adjacency.
160:     `tol` is an integer threshold: if more than `tol` entries differ,
161:     we declare the graph directed.
162:     """
163:     diff = adj - adj.T
164:     return diff.count_nonzero() > tol

================
File: src/sbm/model.py
================
  1: from typing import Dict, Optional
  2: import numpy as np
  3: from scipy.sparse import csr_array
  4: from sbm.block_data import BlockData
  5: from sbm.likelihood import (
  6:     LikelihoodCalculator,
  7:     LikelihoodType,
  8: )
  9: from sbm.block_change_proposers import (
 10:     NodeSwapProposer,
 11:     EdgeBasedSwapProposer,
 12:     TriadicSwapProposer,
 13:     CrossTriangleSwapProposer,
 14:     TwinLeafSwapProposer
 15: )
 16: from sbm.node_mover import NodeMover
 17: from sbm.mcmc import MCMC, PrivatePartitionMCMC
 18: from sbm.io import SBMFit
 19: from sbm.utils.logger import CSVLogger
 20: class SBMModel:
 21:     def __init__(self,
 22:                 initial_blocks: BlockData,
 23:                 rng: np.random.Generator,
 24:                 likelihood_type: LikelihoodType = "bernoulli",
 25:                 logger: Optional[CSVLogger] = None,
 26:                 change_freq = { # probabilities of trying each move type
 27:                     "edge_based_swap": 1.0,
 28:                 },
 29:                 private_sbm: bool = False, # whether to use the private partitioning MCMC
 30:         ):
 31:         self._best_block_assignment = None
 32:         self._best_block_conn = None
 33:         self.block_data = initial_blocks
 34:         self.rng = rng
 35:         self.likelihood_calculator = LikelihoodCalculator(
 36:             block_data=self.block_data,
 37:             likelihood_type=likelihood_type
 38:             )
 39:         self.move_executor = NodeMover(
 40:             block_data=self.block_data,
 41:             )
 42:         change_proposer = {
 43:             "uniform_swap": NodeSwapProposer(
 44:                         block_data=self.block_data,
 45:                         rng=self.rng,
 46:                         use_numpy=True,
 47:                     ),
 48:             "edge_based_swap": EdgeBasedSwapProposer(
 49:                         block_data=self.block_data,
 50:                         rng=self.rng,
 51:                         use_numpy=False,
 52:                     ),
 53:             "triadic_swap": TriadicSwapProposer(
 54:                         block_data=self.block_data,
 55:                         rng=self.rng,
 56:                         use_numpy=True,
 57:                     ),
 58:             "twin_leaf": TwinLeafSwapProposer(
 59:                         block_data=self.block_data,
 60:                         rng=self.rng,
 61:                         use_numpy=True,
 62:                     ),
 63:             "cross_triangle": CrossTriangleSwapProposer(
 64:                         block_data=self.block_data,
 65:                         rng=self.rng,
 66:                         use_numpy=True,
 67:                     ),
 68:         }
 69:         if private_sbm:
 70:             self.mcmc_algorithm = PrivatePartitionMCMC(
 71:                 block_data=self.block_data,
 72:                 likelihood_calculator=self.likelihood_calculator,
 73:                 change_proposer=change_proposer, # type: ignore
 74:                 rng=self.rng,
 75:                 logger=logger,
 76:             )
 77:         else:
 78:             self.mcmc_algorithm = MCMC(
 79:                 block_data = self.block_data,
 80:                 likelihood_calculator = self.likelihood_calculator,
 81:                 change_proposer = change_proposer, # type: ignore
 82:                 change_freq = change_freq, # type: ignore
 83:                 rng = self.rng,
 84:                 logger=logger
 85:             )
 86:     def fit(self,
 87:         min_block_size: int,
 88:         cooling_rate: float=1-1e-4,
 89:         max_blocks: Optional[int] = None,
 90:         patience: Optional[int] = None,
 91:         return_nll: bool = False,
 92:         max_num_iterations: int=int(10**6),
 93:         initial_temperature: float=1.0,
 94:         ):
 95:         nll = self.mcmc_algorithm.fit(
 96:             max_num_iterations=max_num_iterations,
 97:             min_block_size=min_block_size,
 98:             initial_temperature=initial_temperature,
 99:             cooling_rate=cooling_rate,
100:             max_blocks=max_blocks,
101:             patience=patience,
102:         )
103:         if return_nll:
104:             return nll
105:     def get_block_assignments(self, best:bool=True) -> Dict[int, int]:
106:         if best:
107:             return self.mcmc_algorithm._best_block_assignment
108:         else:
109:             return self.block_data.blocks
110:     def to_sbmfit(self, metadata: Optional[Dict] = None, best:bool=True) -> SBMFit:
111:         """ 
112:         Convert the fitted SBM model to an SBMFit object for serialization. 
113:         """
114:         if metadata is None:
115:             metadata = {}
116:         if best:
117:             blocks = self.mcmc_algorithm._best_block_assignment
118:             block_sizes = np.unique(list(blocks.values()), return_counts=True)[1].tolist()
119:             block_conn = self.mcmc_algorithm._best_block_conn
120:             nll = self.mcmc_algorithm.best_nll
121:         else:
122:             blocks = self.block_data.blocks
123:             block_sizes = list(self.block_data.block_sizes.values())
124:             block_conn = self.block_data.block_connectivity
125:             nll = self.mcmc_algorithm.current_nll
126:         return SBMFit(
127:             block_sizes=block_sizes,
128:             block_conn=csr_array(block_conn),
129:             directed_graph=self.block_data.graph_data.directed,
130:             neg_loglike=nll,
131:             metadata=metadata
132:         )

================
File: src/pipelines/fit_sbm.py
================
 1: # src/pipelines/fit_sbm.py
 2: import yaml
 3: import argparse
 4: from pathlib import Path
 5: from itertools import product
 6: from line_profiler import profile
 7: from time import time
 8: import numpy as np
 9: from tqdm import tqdm
10: from sbm.io import GraphLoader, SBMWriter
11: from sbm.block_assigner import AssignerConstructor
12: from sbm.model import SBMModel
13: from sbm.utils.logger import CSVLogger
14: from sbm.utils.pipeline_utils import (
15:     sbmfit_folderpath,
16:     FitConfig,
17: )
18: @profile
19: def main(fit_config: str): # type: ignore
20:     fit_config: FitConfig = yaml.safe_load(Path(fit_config).read_text())
21:     logging_config = fit_config["logging"][0] # type: ignore
22:     data_config = fit_config["datasets"] # type: ignore
23:     seed = fit_config['seed']
24:     rng = np.random.default_rng(seed)
25:     config_pairs = product(
26:         fit_config['sbm'], # type: ignore
27:         fit_config['datasets'], # type: ignore
28:     )
29:     iterator = tqdm(
30:         config_pairs,
31:         desc="Fitting SBM models",
32:         total=len(fit_config['sbm']) * len(fit_config['datasets'])
33:     )
34:     for sbm_config, ds in iterator:
35:         # prepare SBM model
36:         g = GraphLoader.load(
37:             Path(ds["path"]),
38:             force_undirected=bool(sbm_config["force_undirected"]), # type: ignore
39:             )
40:         assigner_const = AssignerConstructor(rng=rng)
41:         assigner = assigner_const.create_assigner(
42:             graph_data=g,
43:             min_block_size=int(sbm_config["min_block_size"]), # type: ignore
44:             init_method=sbm_config["init_method"], # type: ignore
45:             )
46:         block_data = assigner.compute_assignment()
47:         # check block sizes
48:         model = SBMModel(
49:             initial_blocks=block_data,
50:             rng=rng)
51:         # fit SBM model
52:         name = ds["name"] + "_".join(
53:             f"{k}_{v}" for k, v in sbm_config.items() # type: ignore
54:         )
55:         log_path = Path(logging_config['logging_folder']) / f"{name}.csv"
56:         tic = time()
57:         with CSVLogger(log_path, log_every=logging_config['log_every']) as logger:
58:             model.fit(
59:                 min_block_size=sbm_config["min_block_size"], # type: ignore
60:                 cooling_rate=sbm_config["cooling_rate"], # type: ignore
61:                 logger=logger,
62:             )
63:         # save the fitted model
64:         fit = model.to_sbmfit()
65:         toc = time()
66:         print(f"Fitting {ds['name']} took {toc - tic:.2f} seconds")
67:         tic = time()
68:         fit_configs = sbm_config.copy() # type: ignore
69:         out_dir = sbmfit_folderpath(
70:             base_dir=Path("results/sbm_fits"),
71:             sbm_config=fit_configs,
72:             data_spec=ds, 
73:         )
74:         print(f'Out directory: {out_dir}')
75:         out_dir.mkdir(parents=True, exist_ok=True)
76:         SBMWriter.save(out_dir, fit)
77:         toc = time()
78:         print(f"Saving {ds['name']} took {toc - tic:.2f} seconds, nll = {fit.neg_loglike:.2f}")
79: if __name__ == "__main__":
80:     p = argparse.ArgumentParser()
81:     p.add_argument("--fit_config", type=str, help="Path to the configuration file.")
82:     args = p.parse_args()
83:     main(fit_config=args.fit_config)

================
File: src/sbm/block_assigner.py
================
  1: """ 
  2:     Functions and classes for computing initial block assignment 
  3:     used in the Stochastic Block Model (SBM). These are later updated
  4:     using the MCMC algorithm.
  5: """
  6: from __future__ import annotations
  7: from typing import List, Dict, Optional, Tuple, Iterable, TypeAlias, Set
  8: from collections import defaultdict, Counter
  9: from time import time
 10: import metis
 11: import scipy.sparse as sp
 12: from scipy.sparse import csr_array
 13: import numpy as np
 14: from k_means_constrained import KMeansConstrained
 15: from nodevectors import ProNE
 16: from sbm.block_data import BlockData
 17: from sbm.graph_data import GraphData
 18: from sbm.utils.pipeline_utils import InitMethodName
 19: from ortools.sat.python import cp_model  # type: ignore
 20: # ---------------------------------------------------------------------------
 21: #  helper ---------------------------------------------------------------
 22: # ---------------------------------------------------------------------------
 23: def _block_sizes(blocks: Dict[int, int]) -> Dict[int, int]:
 24:     sizes = defaultdict(int)
 25:     for b in blocks.values():
 26:         sizes[b] += 1
 27:     return sizes
 28: def _boundary_vertices(block: int, members: Set[int], blocks: Dict[int, int],
 29:                        indptr: np.ndarray, indices: np.ndarray) -> List[int]:
 30:     """Return vertices in *block* that touch at least one different block."""
 31:     out = []
 32:     for v in members:
 33:         row = slice(indptr[v], indptr[v + 1])
 34:         if any(blocks[u] != block for u in indices[row]):
 35:             out.append(v)
 36:     return out
 37: def _movable_vertex(src: int, dst_set: Set[int], *, rng: np.random.Generator,
 38:                     blocks: Dict[int, int], members: Dict[int, Set[int]],
 39:                     indptr: np.ndarray, indices: np.ndarray) -> Tuple[int, int] | None:
 40:     """Pick (vertex, dst) with vertex in *src* boundary and dst in dst_set."""
 41:     boundary = _boundary_vertices(src, members[src], blocks, indptr, indices)
 42:     rng.shuffle(boundary)
 43:     for v in boundary:
 44:         row = slice(indptr[v], indptr[v + 1])
 45:         neigh_blks = {blocks[u] for u in indices[row] if blocks[u] in dst_set}
 46:         if neigh_blks:
 47:             return v, rng.choice(list(neigh_blks))
 48:     return None
 49: def _move(v: int, src: int, dst: int, *, blocks: Dict[int, int],
 50:           members: Dict[int, Set[int]], sizes: Counter
 51:     ):
 52:     """Execute the move and update bookkeeping structures."""
 53:     blocks[v] = dst
 54:     members[src].remove(v)
 55:     members[dst].add(v)
 56:     sizes[src] -= 1
 57:     sizes[dst] += 1
 58:     if sizes[src] == 0:
 59:         # remove empty block
 60:         del members[src]
 61:         del sizes[src]
 62:         del blocks[v]
 63: def move_node_to_under(
 64:         under: Set[int], # blocks of size < k
 65:         over1: Set[int], # blocks of size k+1
 66:         over2: Set[int], # blocks of size > k+1
 67:         rng: np.random.Generator,
 68:         sizes: Counter[int],
 69:         k: int,
 70:         members: Dict[int, Set[int]],
 71:         blocks: Dict[int, int],
 72:         indptr: np.ndarray,
 73:         indices: np.ndarray
 74:     ) -> None:
 75:     """ 
 76:     Move a node from an oversize block to an undersize block.
 77:     """
 78:     if len(under) == 0:
 79:         # no undersize blocks available, skip
 80:         return
 81:     donors = list(over2 | over1) or list(b for b, s in sizes.items() if s > k)
 82:     rng.shuffle(donors)
 83:     moved = False
 84:     if len(under) > 0:
 85:         for b_src in donors:
 86:             mv = _movable_vertex(b_src, under, rng=rng, blocks=blocks,
 87:                                     members=members, indptr=indptr, indices=indices)
 88:             if mv is not None:
 89:                 v, b_dst = mv
 90:                 _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
 91:                 moved = True
 92:                 return
 93:     # If we reach here no boundary move could be found. Relax: pick random.
 94:     if len(donors) == 0:
 95:         # no oversize blocks available, pick random from all
 96:         donors = list(blocks.keys())
 97:     b_src = rng.choice(donors)
 98:     if len(members[b_src]) == 0:
 99:         # no members in the source block, skip
100:         return
101:     v = rng.choice(list(members[b_src]))
102:     b_dst = rng.choice(tuple(under))
103:     _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
104:     return
105: def move_node_from_over(
106:     under: Set[int], # blocks of size < k
107:     over1: Set[int], # blocks of size k+1
108:     over2: Set[int], # blocks of size > k+1
109:     rng: np.random.Generator,
110:     sizes: Counter[int],
111:     k: int,
112:     members: Dict[int, Set[int]],
113:     blocks: Dict[int, int],
114:     indptr: np.ndarray,
115:     indices: np.ndarray,
116:     r_target: int,
117: ) -> None:
118:     """ 
119:         Nodes are moved from block with size > k to block with size either
120:         < k or <=k if there are fewer than r_target blocks with size k+1.
121:     """
122:     if len(over2) == 0:
123:         # no oversize blocks available, skip
124:         return
125:     b_src = rng.choice(tuple(over2))
126:     dests = under.copy()
127:     if len(over1) > r_target:
128:         dests |= {b for b, s in sizes.items() if s == k}
129:     if not dests:
130:         # no eligible destination respecting k‑lower‑bound → skip
131:         return
132:     mv = _movable_vertex(b_src, dests, rng=rng, blocks=blocks,
133:                             members=members, indptr=indptr, indices=indices)
134:     if mv is None:
135:         v = rng.choice(_boundary_vertices(b_src, members[b_src], blocks, indptr, indices))
136:         b_dst = rng.choice(tuple(dests))
137:     else:
138:         v, b_dst = mv
139:     _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
140:     return
141: def balance_k_plus_1_blocks(
142:     over1: Set[int], # blocks of size k+1
143:     over2: Set[int], # blocks of size >k+1
144:     rng: np.random.Generator,
145:     sizes: Counter[int],
146:     k: int,
147:     members: Dict[int, Set[int]],
148:     blocks: Dict[int, int],
149:     indptr: np.ndarray,
150:     indices: np.ndarray,
151:     r_target: int,
152: ) -> None:
153:     """ 
154:     Balance the number of blocks with size k+1.
155:     If there are too many blocks with size k+1, shrink one of them
156:     by moving a vertex to a block with size k or smaller.
157:     If there are too few blocks with size k+1, enlarge one of the blocks
158:     with size k by moving a vertex from a block with size larger than k+1
159:     or smaller than k+1
160:     """
161:     if len(over1) == r_target:
162:         # already balanced, nothing to do
163:         return
164:     elif len(over1) > r_target: # need fewer k+1 blocks
165:         # shrink a k+1 block
166:         b_src = rng.choice(tuple(over1))
167:         dests = {b for b, s in sizes.items() if s <= k}
168:     else:  # need more k+1 blocks
169:         # enlarge a k block
170:         #dests = set()
171:         b_src = rng.choice(tuple(over2))
172:         dests = {b for b, s in sizes.items() if s == k}
173:     if len(dests) == 0:
174:         # no eligible destination respecting k‑upper‑bound → skip
175:         return
176:     # shrink case
177:     mv = _movable_vertex(b_src, dests, rng=rng, blocks=blocks,
178:                             members=members, indptr=indptr, indices=indices)
179:     if mv is not None:
180:         v, b_dst = mv
181:         _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
182:         return
183:     return
184: def categorize(
185:     sizes: Dict[int, int],
186:     k: int,
187: ) -> Tuple[Set[int], Set[int], Set[int]]:
188:     """Return (oversize>k+1, oversize==k+1, undersize<k)."""
189:     over2 = {b for b, s in sizes.items() if s > k + 1}
190:     over1 = {b for b, s in sizes.items() if s == k + 1}
191:     under = {b for b, s in sizes.items() if s < k}
192:     return over2, over1, under
193: # ---------------------------------------------------------------------------
194: # Improved greedy balancer (split into helpers)
195: # ---------------------------------------------------------------------------
196: def _rebalance_to_min_size(
197:     blocks: Dict[int, int],
198:     adjacency: csr_array,
199:     k: int,
200:     rng: np.random.Generator | None = None,
201:     max_iter: int | None = None,
202: ) -> Dict[int, int]:
203:     """Greedy boundary‑only balancing.
204:     Guarantees **no block ends smaller than *k***; tries to respect the stricter
205:     goal (sizes ∈ {k,k+1} & exactly *r* oversized) but will *sacrifice* that goal
206:     rather than leave an undersized block.
207:     """
208:     if rng is None:
209:         rng = np.random.default_rng(1)
210:     n = adjacency.shape[0]
211:     indptr, indices = adjacency.indptr, adjacency.indices
212:     sizes: Counter[int] = Counter(blocks.values())
213:     members: Dict[int, Set[int]] = defaultdict(set)
214:     for v, b in blocks.items():
215:         members[b].add(v)
216:     B = len(sizes)
217:     r_target = n - k * B  # blocks that *should* have k+1
218:     iter_limit = max_iter or 5 * n
219:     while iter_limit:
220:         iter_limit -= 1
221:         over2, over1, under = categorize(sizes=sizes, k=k)
222:         if len(under)==0 and len(over2)==0 and len(over1)==r_target:
223:             break  # fully balanced by strict rules
224:         # 1) fix undersized first ------------------------------------------------
225:         if len(under) > 0:
226:             move_node_to_under(
227:                 under=under,
228:                 over1=over1,
229:                 over2=over2,
230:                 rng=rng,
231:                 sizes=sizes,
232:                 k=k,
233:                 members=members,
234:                 blocks=blocks,
235:                 indptr=indptr,
236:                 indices=indices
237:             )
238:             continue
239:         # 2) shrink blocks > k+1 --------------------------------------------------
240:         if len(over2) > 0 :
241:             move_node_from_over(
242:                 under=under,
243:                 over1=over1,
244:                 over2=over2,
245:                 rng=rng,
246:                 sizes=sizes,
247:                 k=k,
248:                 members=members,
249:                 blocks=blocks,
250:                 indptr=indptr,
251:                 indices=indices,
252:                 r_target=r_target
253:             )
254:             continue
255:         # 3) adjust number of k+1 blocks -----------------------------------------
256:         if len(over1) != r_target:
257:             balance_k_plus_1_blocks(
258:                 over1=over1,
259:                 over2=over2,
260:                 rng=rng,
261:                 sizes=sizes,
262:                 k=k,
263:                 members=members,
264:                 blocks=blocks,
265:                 indptr=indptr,
266:                 indices=indices,
267:                 r_target=r_target
268:             )
269:             continue
270:     # ---------------- final safety pass: remove any undersized ---------------
271:     # we first attempt to move nodes from oversize blocks to undersize blocks
272:     # if that fails, we move nodes from remaining undersized blocks to any block
273:     under_blocks = [b for b, s in sizes.items() if s < k]
274:     if len(under_blocks) == 0:
275:         return blocks
276:     rng.shuffle(under_blocks)
277:     over_blocks = [b for b, s in sizes.items() if s > k]
278:     if len(over_blocks) > 0:
279:         # attempt to move nodes from oversize blocks to undersize blocks
280:         while len(over_blocks) > 0 and len(under_blocks) > 0:
281:             b_dst = under_blocks[-1]
282:             while sizes[b_dst] < k and len(over_blocks) > 0:
283:                 b_src = over_blocks[-1]  # take from the end for efficiency
284:                 if sizes[b_src] == k: # have we taken all we can?
285:                     over_blocks.pop() # discount this block from further consideration
286:                     continue
287:                 # can we find a vertex in b_src connected to b_dst?
288:                 mv = _movable_vertex(b_src, {b_dst}, rng=rng, blocks=blocks,
289:                                       members=members, indptr=indptr, indices=indices)
290:                 if mv is None:
291:                     # if not, pick a random vertex in b_src
292:                     v = rng.choice(tuple(members[b_src]))
293:                 else:
294:                     v, _ = mv
295:                 _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
296:                 over_blocks = {b for b, s in sizes.items() if s > k}
297:             if sizes[b_dst] >= k:
298:                 # we have filled the under block, remove it from consideration
299:                 under_blocks.pop()
300:     # assign all nodes in under_block to a random block
301:     while len(under_blocks) > 0:
302:         b_src = under_blocks[-1]  # take from the end for efficiency
303:         while len(members[b_src]) > 0:
304:             non_under_blocks = {b for b, s in sizes.items() if s >= k}
305:             # check if v touches a non_under block
306:             mv = _movable_vertex(b_src, non_under_blocks, rng=rng, blocks=blocks,
307:                                     members=members, indptr=indptr, indices=indices)
308:             if mv is not None:
309:                 v, b_dst = mv
310:             else:
311:                 v = rng.choice(tuple(members[b_src]))
312:                 b_dst= rng.choice(tuple(blocks.values()))
313:             _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
314:         under_blocks.pop()
315:     # final check
316:     _, _, under = categorize(sizes=sizes, k=k)
317:     assert len(under) == 0, \
318:         f"Rebalance failed: {len(under)} blocks are still undersized (<{k})."
319:     return blocks
320: ### Base class for BlockAssigner
321: class BlockAssigner:
322:     """
323:     Base class for assigning nodes to blocks in the Stochastic Block Model (SBM).
324:     This class is intended to be subclassed for specific block assignment strategies.
325:     """
326:     def __init__(self,
327:                  graph_data: GraphData,
328:                  rng: np.random.Generator,
329:                  num_blocks: Optional[int] = None,
330:                  min_block_size: Optional[int] = None,
331:                  max_block_size: Optional[int] = None,
332:                  ):
333:         self.graph_data = graph_data
334:         # check if there exist a valid assignment
335:         # given num_blocks, min_block_size, max_block_size
336:         if num_blocks is not None and min_block_size is not None:
337:             if num_blocks * min_block_size > graph_data.num_nodes:
338:                 raise ValueError("Invalid parameters: num_blocks * min_block_size exceeds total number of nodes.")
339:         if max_block_size is not None and min_block_size is not None:
340:             if max_block_size < min_block_size:
341:                 raise ValueError("Invalid parameters: max_block_size cannot be less than min_block_size.")
342:         self.num_blocks = num_blocks
343:         self.min_block_size = min_block_size
344:         self.max_block_size = max_block_size
345:         self.rng = rng
346:     def reindex_blocks(self, blocks: Dict[int, int]) -> Dict[int, int]:
347:         """ 
348:         Reindex block IDs to be consecutive integers starting from 0.
349:         """
350:         unique_blocks = sorted(set(blocks.values()))
351:         block_mapping = {old_id: new_id for new_id, old_id in enumerate(unique_blocks)}
352:         return {node: block_mapping[block_id] for node, block_id in blocks.items()}
353:     def _compute_assignment(self) -> Dict[int, int]:
354:         raise NotImplementedError(
355:             "compute_assignment must be implemented by subclasses of BlockAssigner."
356:         )
357:     def compute_assignment(self) -> BlockData:
358:         raise NotImplementedError(
359:             "compute_assignment must be implemented by subclasses of BlockAssigner."
360:         )
361: class UniformSmallBlockAssigner(BlockAssigner):
362:     """ 
363:     Assigns nodes to blocks of size min_block_size uniformly at random. 
364:     Ignore num_blocks and max_block_size.
365:     """
366:     def _compute_assignment(self) -> Dict[int, int]:
367:         """
368:         Assign nodes to blocks uniformly at random, ensuring each block has at least min_block_size nodes.
369:         """
370:         if self.min_block_size is None:
371:             raise ValueError("min_block_size must be specified for UniformSmallBlockAssigner.")
372:         if self.min_block_size <= 0:
373:             raise ValueError("min_block_size must be a positive integer.")
374:         if self.max_block_size is not None:
375:             Warning("max_block_size is ignored in UniformSmallBlockAssigner.")
376:         if self.num_blocks is not None:
377:             Warning("num_blocks is ignored in UniformSmallBlockAssigner.")
378:         num_nodes = self.graph_data.num_nodes
379:         # create list of nodes in random order
380:         node_list = self.rng.permutation(np.arange(num_nodes))
381:         # assign nodes to blocks
382:         block_assignments = {
383:             node: node // self.min_block_size for node in node_list
384:         }
385:         return block_assignments
386:     # -----------------------------------------------------------------
387:     def compute_assignment(self) -> BlockData:
388:         """
389:         Compute a block assignment based on the proposed assignment.
390:         Currently, this method only performs a min_size balancing step.
391:         """
392:         if self.min_block_size is None:
393:             raise ValueError("min_block_size must be specified for UniformSmallBlockAssigner.")
394:         assignment = self._compute_assignment()
395:         assignment= _rebalance_to_min_size(
396:             blocks=assignment,
397:             adjacency=self.graph_data.adjacency,
398:             k=self.min_block_size,
399:             rng=self.rng,
400:             max_iter=None,  # data-driven max_iter (10*num_nodes)
401:         )
402:         reindexed_assignment = self.reindex_blocks(assignment)
403:         return BlockData(
404:             initial_blocks=reindexed_assignment,
405:             graph_data=self.graph_data
406:         )
407: class MetisBlockAssigner(BlockAssigner):
408:     """
409:     Use Metis to obtain a *balanced* `num_blocks`-way partition of the
410:     (undirected) graph.
411:     Parameters
412:     ----------
413:     graph_data : GraphData
414:         Graph wrapper holding the (sparse) adjacency matrix.
415:     num_blocks : int
416:         Desired number of blocks (≈ N // k where k is target block size).
417:     seed : int, optional
418:         Random seed forwarded to METIS.  If None, METIS uses its own seed.
419:     """
420:     def __init__(
421:         self,
422:         graph_data: GraphData,
423:         rng: np.random.Generator,
424:         num_blocks: Optional[int] = None,
425:         min_block_size: Optional[int] = None,
426:         max_block_size: Optional[int] = None,
427:     ) -> None:
428:         super().__init__(
429:             graph_data=graph_data,
430:             rng=rng,
431:             num_blocks=num_blocks,
432:             min_block_size=min_block_size,
433:             max_block_size=max_block_size,
434:             )
435:         if graph_data.directed:
436:             raise NotImplementedError(
437:                 "MetisBlockAssigner currently supports undirected graphs only."
438:             )
439:         if num_blocks is None and min_block_size is None:
440:             raise ValueError("Either num_blocks or min_block_size must be specified for MetisBlockAssigner.")
441:         if num_blocks is None:
442:             num_blocks = max(
443:                 1, graph_data.num_nodes // min_block_size
444:             )
445:         self.num_blocks = int(num_blocks)
446:         self.seed = rng.integers(2**32)
447:     # -----------------------------------------------------------------
448:     # Utilities
449:     # -----------------------------------------------------------------
450:     @staticmethod
451:     def _to_adj_lists(adj: sp.csr_array) -> list[list[int]]:
452:         """
453:         Convert a CSR adjacency matrix to the adjacency-list format Metis
454:         expects (no self-loops, undirected symmetry).
455:         """
456:         n = adj.shape[0] # type: ignore
457:         rows, cols = adj.nonzero() # type: ignore
458:         neigh = [[] for _ in range(n)]
459:         for u, v in zip(rows, cols):
460:             if u == v:
461:                 continue  # ignore self-loops
462:             neigh[u].append(v)
463:         return neigh
464:     # -----------------------------------------------------------------
465:     # Public API
466:     # -----------------------------------------------------------------
467:     def _compute_metis_assignment(self) -> Dict[int, int]:
468:         """
469:         Run METIS and return a BlockData with the resulting assignment.
470:         May results in blocks of size < min_block_size or > max_block_size.
471:         """
472:         n = self.graph_data.num_nodes
473:         adj_lists = self._to_adj_lists(self.graph_data.adjacency)
474:         # PyMetis returns (edgecuts, membership-array)
475:         _, parts = metis.part_graph(
476:             graph=adj_lists,
477:             nparts = self.num_blocks,
478:             ufactor = 30, # aggresively balance block
479:             tpwgts = [1/self.num_blocks]*self.num_blocks, # equal weights for each block
480:             ubvec = [1+0.05], # 5% imbalance allowed
481:             recursive=True
482:         )
483:         # PyMetis guarantees |parts| == n
484:         blocks: Dict[int, int] = {node: part for node, part in enumerate(parts)}
485:         # Wrap in BlockData so downstream code can use it directly
486:         return blocks
487:     # -----------------------------------------------------------------
488:     def compute_assignment(self) -> BlockData:
489:         """
490:         Compute a balanced block assignment based on the proposed assignment.
491:         Currently, this method only performs a min_size balancing step.
492:         """
493:         if self.min_block_size is None:
494:             raise ValueError("min_block_size must be specified for MetisBlockAssigner.")
495:         assignment = self._compute_metis_assignment()
496:         #assignment = _rebalance_to_min_size(
497:         #    blocks=assignment,
498:         #    adjacency=self.graph_data.adjacency,
499:         #    k=self.min_block_size,
500:         #    rng=self.rng,
501:         #    max_iter=None,  # data-driven max_iter (10*num_nodes)
502:         #)
503:         assignment = self.reindex_blocks(assignment)
504:         return BlockData(
505:             initial_blocks=assignment,
506:             graph_data=self.graph_data
507:         )
508: class RefinedMetisBlockAssigner(MetisBlockAssigner):
509:     """PyMETIS seed ➜ improved greedy rebalance ➜ optional CP‑SAT polish."""
510:     def __init__(
511:         self,
512:         graph_data: GraphData,
513:         rng: np.random.Generator,
514:         num_blocks: int | None = None,
515:         min_block_size: int | None = None,
516:         max_block_size: int | None = None,
517:         cpsat_time_limit: int | None = 5,
518:     ) -> None:
519:         super().__init__(
520:             graph_data=graph_data,
521:             rng=rng,
522:             num_blocks=num_blocks,
523:             min_block_size=min_block_size,
524:             max_block_size=max_block_size,
525:         )
526:         self._rng = rng
527:         self._cpsat_limit = cpsat_time_limit
528:     # -----------------------------------------------------------------
529:     def compute_assignment(self) -> BlockData:  # noqa: D401 – keep signature
530:         # unbalanced
531:         if self.min_block_size is None:
532:             raise ValueError("min_block_size must be specified for RefinedMetisBlockAssigner.")
533:         blocks = super()._compute_metis_assignment()
534:         blocks = _rebalance_to_min_size(
535:             blocks,
536:             self.graph_data.adjacency,
537:             self.min_block_size,
538:             rng=self._rng,
539:         )
540:         # polish with CP‑SAT
541:         blocks = self._cpsat_polish(blocks)
542:         return BlockData(initial_blocks=self.reindex_blocks(blocks),
543:                          graph_data=self.graph_data)
544:     # -----------------------------------------------------------------
545:     def _compute_metis_assignment(self) -> Dict[int, int]:  # noqa: D401  – keep name
546:         return super()._compute_metis_assignment()
547:     # -----------------------------------------------------------------
548:     def _block_members(self, blk: int, blocks: Dict[int, int]) -> List[int]:
549:         return [v for v, b in blocks.items() if b == blk]
550:     # -----------------------------------------------------------------
551:     def _cpsat_polish(self, blocks: Dict[int, int]) -> Dict[int, int]:
552:         """ 
553:         Polish the block assignment to decrease the edge cut while ensuring
554:         block sizes are within min_block_size and min_block_size + 1.
555:         """
556:         if self.min_block_size is None:
557:             return blocks
558:         k = self.min_block_size
559:         sizes = _block_sizes(blocks)
560:         wrong = {b for b, s in sizes.items() if not (k <= s <= k + 1)}
561:         if not wrong:
562:             return blocks  # already good
563:         # collect *boundary* nodes of wrong blocks + their neighbours
564:         boundary: Set[int] = set()
565:         adj = self.graph_data.adjacency
566:         indptr, indices = adj.indptr, adj.indices
567:         for b in wrong:
568:             for v in self._block_members(b, blocks):
569:                 row = slice(indptr[v], indptr[v + 1])
570:                 if any(blocks[u] != b for u in indices[row]):
571:                     boundary.add(v)
572:                     boundary.update(indices[row])
573:         sub_nodes = sorted(boundary)
574:         sub_adj = adj[sub_nodes][:, sub_nodes]  # type: ignore[index]
575:         # blocks involved
576:         blks_sub = {blocks[v] for v in sub_nodes}
577:         # ------- build CP‑SAT model ----------------------------------
578:         model = cp_model.CpModel()
579:         x = {}
580:         for v in sub_nodes:
581:             for b in blks_sub:
582:                 x[v, b] = model.NewBoolVar(f"x_{v}_{b}")
583:             # each vertex exactly one block (in sub‑problem)
584:             model.Add(sum(x[v, b] for b in blks_sub) == 1)
585:         # block‑size constraints & t_b variables
586:         t = {}
587:         r_target = (len(sub_nodes) + sum(sizes[b] for b in blks_sub) - k * len(blks_sub))  # local oversize quota
588:         for b in blks_sub:
589:             t[b] = model.NewBoolVar(f"t_{b}")
590:             size_expr = sum(x[v, b] for v in sub_nodes) + (sizes[b] - sum(blocks[v] == b for v in sub_nodes))
591:             model.Add(size_expr == k + t[b])
592:         model.Add(sum(t[b] for b in blks_sub) == r_target)
593:         # edge‑cut objective (linearised y/z eliminated – constant perimeter suffices in subgraph)
594:         rows, cols = sub_adj.nonzero()
595:         z = {}
596:         for v, u in zip(rows, cols):
597:             if v >= u:
598:                 continue  # undirected upper triangle
599:             i, j = sub_nodes[v], sub_nodes[u]
600:             z[(i, j)] = model.NewBoolVar(f"z_{i}_{j}")
601:             # z = 1 if endpoints differ
602:             for b in blks_sub:
603:                 model.AddBoolAnd([x[i, b], x[j, b]]).OnlyEnforceIf(z[(i, j)].Not())
604:             # if all same‑block conjunctions false → z=1
605:         model.Minimize(sum(z.values()))
606:         # solve
607:         solver = cp_model.CpSolver()
608:         if self._cpsat_limit:
609:             solver.parameters.max_time_in_seconds = float(self._cpsat_limit)
610:         status = solver.Solve(model)
611:         if status in (cp_model.OPTIMAL, cp_model.FEASIBLE):
612:             for v in sub_nodes:
613:                 for b in blks_sub:
614:                     if solver.BooleanValue(x[v, b]):
615:                         blocks[v] = b
616:                         break
617:         return blocks
618: class EmbedAndConstrKMeansAssigner(BlockAssigner):
619:     """
620:     Assign nodes to blocks using a two-step process:
621:     1. use embed nodes into a low-dimensional space,
622:     2. use constrained KMeans to assign nodes to blocks of prespecified sizes.
623:     """ 
624:     def __init__(
625:         self,
626:         graph_data: GraphData,
627:         rng: np.random.Generator,
628:         num_blocks: Optional[int] = None,
629:         min_block_size: Optional[int] = None,
630:         max_block_size: Optional[int] = None,
631:     ) -> None:
632:         super().__init__(
633:             graph_data=graph_data,
634:             rng=rng,
635:             num_blocks=num_blocks,
636:             min_block_size=min_block_size,
637:             max_block_size=max_block_size,
638:         )
639:         if min_block_size is None:
640:             raise ValueError("num_blocks and min_block_size must be specified for ProneAndConstrKMeansAssigner.")
641:         if num_blocks is not None:
642:             Warning("num_blocks is ignored in ProneAndConstrKMeansAssigner. Only min_block_size is used.")
643:         if max_block_size is not None:
644:             Warning("max_block_size is ignored in ProneAndConstrKMeansAssigner. Only min_block_size is used.")
645:     def embed_nodes(self, adjacency:sp.csr_array, n_dimensions:int=128)->np.ndarray:
646:         """ 
647:         Method to perform node embedding. Subclasses should implement this method
648:         """
649:         raise NotImplementedError("This method should be overwritten by subclasses to provide specific embedding logic.")
650:     def _compute_assignment(self) -> Dict[int, int]:
651:         """
652:         Compute block assignments using constrained KMeans after embedding with Prone.
653:         """
654:         if self.graph_data.num_nodes < self.min_block_size:
655:             raise ValueError("Number of nodes in the graph is less than min_block_size.")
656:         if self.min_block_size is None:
657:             raise ValueError("min_block_size must be specified for ProneAndConstrKMeansAssigner.")
658:         # Step 1: Embed nodes using Prone
659:         embeddings = self.embed_nodes(
660:             adjacency=self.graph_data.adjacency,
661:             n_dimensions=128  # default embedding dimension
662:         )
663:         # compute how many blocks we need to only have blocks of
664:         #   size min_block_size and min_block_size+1
665:         number_of_clusters = self.graph_data.num_nodes // self.min_block_size
666:         # Step 2: Use constrained KMeans to assign nodes to blocks
667:         kmeans = KMeansConstrained(
668:                     n_clusters=number_of_clusters,
669:                     size_min=self.min_block_size,
670:                     size_max=self.min_block_size+1, # 
671:                     init='k-means++',
672:                     n_init=1,
673:                     max_iter=10,
674:                     tol=1e-3,
675:                     verbose=False,
676:                     random_state=self.rng.choice(2**32), 
677:                     copy_x=False, # perform centering
678:                     # use all available CPU cores
679:                     n_jobs=-1
680:                 )
681:         tic = time()
682:         labels = kmeans.fit_predict(embeddings)
683:         toc = time()
684:         print(f"KMeans with constraints took {toc - tic:.2f} seconds for {self.graph_data.num_nodes} nodes.")
685:         # Create a mapping from node index to block ID
686:         blocks = {node: label for node, label in enumerate(labels)} # type: ignore
687:         return blocks
688:     def compute_assignment(self) -> BlockData:
689:         """
690:         Compute a block assignment based on the proposed assignment.
691:         Currently, this method only performs a min_size balancing step.
692:         """
693:         balanced_assignment = self._compute_assignment() # balanced from k-means w. size constraints
694:         reindexed_assignment = self.reindex_blocks(balanced_assignment)
695:         return BlockData(
696:             initial_blocks=reindexed_assignment,
697:             graph_data=self.graph_data
698:         )
699: class ProNEAndConstrKMeansAssigner(EmbedAndConstrKMeansAssigner):
700:     """
701:     Assign nodes to blocks using ProNE embedding followed by constrained KMeans.
702:     """
703:     def embed_nodes(self, adjacency: sp.csr_array, n_dimensions: int = 128) -> np.ndarray:
704:         """
705:         Embed nodes using ProNE.
706:         """
707:         if n_dimensions <= 0:
708:             raise ValueError("n_dimensions must be a positive integer.")
709:         # Create a ProNE instance and fit it to the adjacency matrix
710:         model = ProNE(
711:                     n_components=n_dimensions,
712:                     step=10,
713:                     mu=0.2,
714:                     theta=0.5, 
715:                     exponent=0.75,
716:                     verbose=False
717:                 )
718:         tic = time()
719:         embeddings = model.fit_transform(
720:             sp.csr_matrix(adjacency) # nodevectors expect a CSR matrix, and not array
721:             )
722:         toc = time()
723:         print(f"ProNE embedding took {toc - tic:.2f} seconds for {adjacency.shape[0]} nodes.") # type: ignore
724:         return embeddings
725: class AssignerConstructor:
726:     """ 
727:     Factory class to construct block assigners based on configuration parameters. 
728:     """
729:     def __init__(self, rng: np.random.Generator):
730:         self.rng = rng
731:     def create_assigner(self,
732:                         graph_data: GraphData,
733:                         init_method: InitMethodName = "metis", 
734:                         min_block_size: Optional[int] = None,
735:                         max_block_size: Optional[int] = None,
736:                         num_blocks: Optional[int] = None,
737:                     ) -> BlockAssigner:
738:         if init_method == "uniform":
739:             return UniformSmallBlockAssigner(
740:                 graph_data=graph_data,
741:                 rng=self.rng,
742:                 min_block_size=min_block_size,
743:                 max_block_size=max_block_size,
744:                 num_blocks=num_blocks,
745:             )
746:         elif init_method == "prone_and_kmeans":
747:             return ProNEAndConstrKMeansAssigner(
748:                 graph_data=graph_data,
749:                 rng=self.rng,
750:                 min_block_size=min_block_size,
751:                 max_block_size=max_block_size,
752:                 num_blocks=num_blocks,
753:             )
754:         elif init_method == "metis":
755:             return MetisBlockAssigner(
756:                 graph_data=graph_data,
757:                 rng=self.rng,
758:                 num_blocks=num_blocks,
759:                 min_block_size=min_block_size,
760:                 max_block_size=max_block_size,
761:             )
762:         elif init_method == "metis_refine":
763:             return RefinedMetisBlockAssigner(
764:                 graph_data=graph_data,
765:                 rng=self.rng,
766:                 min_block_size=min_block_size,
767:                 max_block_size=max_block_size,
768:                 num_blocks=num_blocks,
769:                 cpsat_time_limit=10
770:             )
771:         else:
772:             raise ValueError(f"Unknown initialization method: {init_method}. "
773:                 "Available methods: 'metis', 'uniform', 'prone_and_kmeans', 'metis_refine'."
774:                 )

================
File: src/sbm/block_data.py
================
  1: """ 
  2: Block data for the Stochastic Block Model (SBM).
  3: This module defines the `BlockData` class, which manages the block structure of the SBM,
  4: including block memberships, edge counts, and possible pairs of edges between blocks.
  5: It also provides methods to update the block data when nodes are moved between blocks,
  6: and to compute edge counts and possible pairs.
  7: """
  8: from typing import Dict, Set, Sequence, Tuple
  9: import numpy as np
 10: import scipy.sparse as sp
 11: from sbm.graph_data import GraphData
 12: BlockConn = sp.dok_array
 13: BlockMembership = Dict[int, Set[int]]  # Block ID to set of node indices
 14: class _BlockDataUpdater:
 15:     """
 16:     Helper class to update edge counts and possible pairs in the block data.
 17:     This class is used to hide bookkeeping of handling directed vs undirected graphs.
 18:     Parameters
 19:     ----------
 20:     bd : BlockData
 21:     """
 22:     def __init__(self, block_data: "BlockData"):
 23:         self.block_data = block_data # B × B integer matrix
 24:     # block memberships
 25:     def _move_node_to_block(self, node: int, block_id: int, update_sizes=True) -> None:
 26:         # update block assignment
 27:         old_block = self.block_data.blocks[node] # type: ignore
 28:         if update_sizes: 
 29:             # update block sizes
 30:             self.block_data.block_sizes[block_id] += 1
 31:             self.block_data.block_sizes[old_block] -= 1
 32:         self.block_data.blocks[node] = block_id # type: ignore
 33:         # update block membersets
 34:         if block_id not in self.block_data.block_members:
 35:             self.block_data.block_members[block_id] = set()
 36:         self.block_data.block_members[block_id].add(node)
 37:         self.block_data.block_members[old_block].remove(node)
 38:     # ----- edge counts --------------------------------------------------
 39:     def _increment_edge_count(self, idx_a: int, idx_b: int, e_delta: int) -> None:
 40:         """ 
 41:         Increment the edge count between two blocks.
 42:         If the graph is undirected, increment both directions.
 43:         e_delta can be negative to decrement the edge count.
 44:         idx_a and idx_b are indices in the block_connectivity matrix.
 45:         """
 46:         self.block_data.block_connectivity[idx_a, idx_b] += e_delta
 47:         if not self.block_data.directed and idx_a != idx_b:
 48:             self.block_data.block_connectivity[idx_b, idx_a] += e_delta
 49: class BlockData:
 50:     """ 
 51:     Class to store block data for the SBM.
 52:     There are two ways to initialize this class:
 53:     Attributes:
 54:         graph_data: The graph data object.
 55:         blocks: A dictionary mapping node indices to block indices.
 56:         block_members: A dictionary mapping block indices to lists of node indices.
 57:         block_sizes: A dictionary mapping block indices to the number of nodes in each block.
 58:         directed: A boolean indicating whether the graph is directed or not.
 59:         block_indices: A dictionary mapping block IDs to indices used in matrices.
 60:         inverse_block_indices: A dictionary mapping indices used in matrices to block IDs.
 61:         block_connectivity: A sparse matrix representing the block connectivity matrix.
 62:     """
 63:     def __init__(self,
 64:                  initial_blocks: Dict[int, int],
 65:                  graph_data: GraphData,
 66:         ):
 67:         self.blocks: Dict[int, int] = initial_blocks # Node to block mapping
 68:         self.block_updater = _BlockDataUpdater(self)
 69:         self.graph_data = graph_data
 70:         self.directed = graph_data.directed
 71:         self.block_members = self._initialize_block_members()
 72:         self.block_sizes = {block: len(nodes) for block, nodes in self.block_members.items()}
 73:         self._update_block_indices()
 74:         self.block_connectivity: BlockConn = self._compute_block_connectivity()
 75:         # Recompute block connectivity based on the new graph data
 76:         self.block_connectivity = self._compute_block_connectivity()
 77:     # --------------------------------------------------------------------- # 
 78:     def increment_edge_count(self, block_a: int, block_b: int, e_delta: int) -> None:
 79:         """ 
 80:         Increment the edge count between two blocks.
 81:         If the graph is undirected, increment both directions.
 82:         e_delta can be negative to decrement the edge count.
 83:         """
 84:         idx_a = self.block_indices[block_a]
 85:         idx_b = self.block_indices[block_b]
 86:         self.block_updater._increment_edge_count(idx_a, idx_b, e_delta)
 87:     # --------------------------------------------------------------------- # 
 88:     def get_possible_pairs(self, block_a: int, block_b:int ) -> int:
 89:         """ 
 90:         Compute the possible number of edges between two blocks.
 91:         """
 92:         if block_a == block_b:
 93:             # If the same block, return the number of pairs within the block
 94:             return self.block_sizes[block_a] * (self.block_sizes[block_a] - 1) // 2
 95:         # If different blocks, return the product of their sizes
 96:         return self.block_sizes[block_a] * self.block_sizes[block_b]
 97:     # --------------------------------------------------------------------- # 
 98:     def _initialize_block_members(self) -> BlockMembership:
 99:         """
100:         Initialize block members from the blocks mapping.
101:         :return: A dictionary mapping block indices to lists of node indices.
102:         """
103:         if self.blocks is None:
104:             raise ValueError("Blocks mapping is not provided to initialize block members.")
105:         block_members: BlockMembership = {}
106:         for node, block in self.blocks.items():
107:             if block not in block_members:
108:                 block_members[block] = set()
109:             # Add node to the corresponding block
110:             block_members[block].add(node)
111:         return block_members
112:     # --------------------------------------------------------------------- # 
113:     def _update_block_indices(self):
114:         """
115:         Update mappings between block IDs and indices used in matrices.
116:         """
117:         # Sort block IDs to ensure consistent ordering
118:         sorted_block_ids = sorted(self.block_members.keys())
119:         self.block_indices = {
120:             block_id: idx for idx, block_id in enumerate(sorted_block_ids)
121:             }
122:         self.inverse_block_indices = {
123:             idx: block_id for block_id, idx in self.block_indices.items()
124:             }
125:     # --------------------------------------------------------------------- # 
126:     def _compute_block_connectivity(self) -> BlockConn:
127:         """
128:         Compute the block connectivity matrix.
129:         This matrix is a sparse matrix where the entry at (i, j) is number of edges 
130:         between block i and block j. If the graph is undirected, the matrix is symmetric.
131:         """
132:         if self.graph_data is None:
133:             raise ValueError("Graph data is not set. Cannot compute block connectivity.")
134:         if self.block_members is None:
135:             raise ValueError("Block members are not initialized. Cannot compute block connectivity.")
136:         num_blocks = len(self.block_members)
137:         self._update_block_indices()
138:         block_connectivity_dok = sp.dok_array((num_blocks, num_blocks), dtype=np.int64)
139:         if self.directed:
140:             raise ValueError("Block connectivity computation is not implemented for directed graphs.")
141:         else:
142:             for i_block_id, nodes_i in self.block_members.items():
143:                 idx_i = self.block_indices[i_block_id]
144:                 nodes_i = list(nodes_i)
145:                 sub_adj_i = self.graph_data.adjacency[nodes_i]  # type: ignore
146:                 for j_block_id, nodes_j in self.block_members.items():
147:                     idx_j = self.block_indices[j_block_id]
148:                     nodes_j = list(nodes_j)
149:                     # Sum of weights between block i and block j
150:                     weight = sub_adj_i[:, nodes_j].sum() # type: ignore
151:                     # If the blocks are the same, we only count pairs
152:                     if i_block_id == j_block_id:
153:                         weight = weight // 2
154:                     block_connectivity_dok[idx_i, idx_j] = weight
155:             return block_connectivity_dok
156:     # --------------------------------------------------------------------- # 
157:     def _remove_block_index(self, block_id: int):
158:         """
159:         Remove a block from block_indices and inverse_block_indices.
160:         Do not use directly, call remove_block instead.
161:         :param block_id: The block ID to remove.
162:         """
163:         idx = self.block_indices.pop(block_id)
164:         self.inverse_block_indices.pop(idx)
165:         # Adjust indices of remaining blocks
166:         for b_id, index in self.block_indices.items():
167:             if index > idx:
168:                 self.block_indices[b_id] -= 1
169:                 self.inverse_block_indices[self.block_indices[b_id]] = b_id
170:     # --------------------------------------------------------------------- # 
171:     def _remove_block_from_connectivity(self, block_id: int):
172:         """
173:         Remove the block's row and column from the block connectivity matrix.
174:         Do not use directly, call remove_block instead.
175:         :param block_id: The block ID to remove.
176:         """
177:         idx = self.block_indices[block_id]
178:         # Remove the row and column corresponding to idx
179:         slicable_array = self.block_connectivity.tocsr()
180:         non_slice_idx = np.arange(self.block_connectivity.shape[1]) != idx # type: ignore
181:         self.block_connectivity = slicable_array[:, non_slice_idx][non_slice_idx, :].todok()
182:     # --------------------------------------------------------------------- # 
183:     def remove_block(self, block_id: int):
184:         """
185:         Remove a block from the block data.
186:         Do not use directly, call remove_block instead.
187:         :param block_id: The block ID to remove.
188:         """
189:         del self.block_sizes[block_id]
190:         del self.block_members[block_id]
191:         self._remove_block_from_connectivity(block_id)
192:         self._remove_block_index(block_id)
193:     # --------------------------------------------------------------------- # 
194:     def _add_block_index(self, block_id: int):
195:         """
196:         Add a new block index for a new block.
197:         Do not use directly, call add_block instead.
198:         :param block_id: The block ID to add.
199:         """
200:         new_idx = len(self.block_indices)
201:         self.block_indices[block_id] = new_idx
202:         self.inverse_block_indices[new_idx] = block_id
203:     def _add_block_to_connectivity(self):
204:         """
205:         Add a new block to the block connectivity matrix.
206:         Do not use directly, call add_block instead.
207:         :param block_id: The block ID to add.
208:         """
209:         num_blocks = len(self.block_indices)
210:         connectivity_lil = sp.lil_matrix(self.block_connectivity)
211:         connectivity_lil.resize((num_blocks, num_blocks))
212:         self.block_connectivity = connectivity_lil.todok()
213:     # --------------------------------------------------------------------- # 
214:     def add_block(self, block_id: int, nodes=[]):
215:         """
216:         Add a new block to the block data.
217:         :param block_id: The block ID to add.
218:         """
219:         if self.blocks is None:
220:             raise ValueError("Blocks mapping is not initialized. Cannot add a block.")
221:         self.block_sizes[block_id] = len(nodes)
222:         self.block_members[block_id] = nodes
223:         for node in nodes:
224:             self.blocks[node] = block_id
225:         self._add_block_index(block_id)
226:         self._add_block_to_connectivity()
227:     # --------------------------------------------------------------
228:     def counts_for_pairs(self,
229:                          pairs: Sequence[Tuple[int, int]]
230:                          ) -> np.ndarray:
231:         """
232:         Parameters
233:         ----------
234:         pairs : list of (r, s) with r < s
235:         Returns
236:         -------
237:         np.ndarray, shape (len(pairs),)
238:             Edge counts m_rs for those pairs.
239:         """
240:         # Fast path when the block matrix lives in a dict‑of‑dicts:
241:         return np.fromiter(
242:             (self.block_connectivity[r, s] for r, s in pairs),
243:             dtype=np.int64, count=len(pairs)
244:         )
245:     # --------------------------------------------------------------
246:     def diagonal_counts(self) -> np.ndarray:
247:         """
248:         Returns
249:         -------
250:         np.ndarray, shape (B,)
251:             Internal edge counts m_rr for every block r.
252:         """
253:         # Extract diagonal elements directly from the sparse matrix
254:         return self.block_connectivity.diagonal()
255:     # --------------------------------------------------------------

================
File: src/sbm/likelihood.py
================
  1: from typing import (
  2:     Dict,
  3:     Tuple,
  4:     Literal,
  5: )
  6: from numba import jit
  7: from scipy.sparse import coo_array
  8: import numpy as np
  9: from sbm.block_data import BlockData
 10: from sbm.block_change_proposers import (
 11:     EdgeDelta,
 12:     CombinationDelta,
 13: )
 14: #### aliases ######
 15: LikelihoodType = Literal['bernoulli']
 16: # Bernoulli functions
 17: @jit(nopython=True, cache=True, fastmath=True)
 18: def _bernoulli_ll_block_pair(e: int, n: int, eps:float= 1e-6) -> float:
 19:     """
 20:     Profile log-likelihood for one block pair (constants dropped).
 21:     e: number of edges between block pair.
 22:     n: number of possible pairs between block pair.
 23:     """
 24:     if e == 0: # 0 · log 0 := 0   (limit)
 25:         return 0.0
 26:     elif n <= 0:
 27:         raise ValueError("Number of possible pairs (n) must be greater than 0.")
 28:     # clip to avoid overflow in lo
 29:     pos = max(e/n, eps)
 30:     neg = max(1 - e/n, eps)
 31:     return e * np.log(pos) - (n-e) * np.log(neg)
 32: @jit(fastmath=True, cache=True)
 33: def _delta_ll_bernoulli_block_pair(
 34:         e_old: int, e_new: int,
 35:         n_old: int, n_new: int,
 36:         eps: float = 1e-6
 37:         ) -> float:
 38:     """Δℓ for a single block pair.
 39:     e_new: new number of edges between block pair.
 40:     e_old: old number of edges between block pair.
 41:     n_new: new number of possible pairs between block pair.
 42:     n_old: old number of possible pairs between block pair.
 43:     """
 44:     new_ll = _bernoulli_ll_block_pair(e=e_new, n=n_new, eps=eps)
 45:     old_ll = _bernoulli_ll_block_pair(e=e_old, n=n_old, eps=eps)
 46:     return new_ll - old_ll
 47: def compute_delta_ll_from_change_bernoulli(
 48:         delta_e: EdgeDelta,
 49:         delta_n: CombinationDelta,
 50:         block_data: BlockData) -> float:
 51:     """
 52:     Incremental change in Bernoulli log-likelihood after a node-swap or move.
 53:     Only the pairs present in `delta_e` or `delta_n` need to be visited.
 54:     delta_e: changes in edge counts between affected blocks.
 55:     delta_n: changes in possible pairs between affected blocks.
 56:     block_data: BlockData object containing edge counts and possible pairs.
 57:     :return: Tuple of (change in log-likelihood, edge counts changes of move delta).
 58:     """
 59:     upper_triangle_only = not block_data.directed
 60:     delta_ll = 0.0
 61:     for (r, s), delta in delta_e.items():
 62:         if upper_triangle_only and s < r:
 63:             continue
 64:         e_old = int(block_data.block_connectivity[r, s]) # type: ignore
 65:         n_old = block_data.get_possible_pairs(r, s)
 66:         e_new = e_old + delta
 67:         n_new = n_old + delta_n[r, s]
 68:         delta_ll += _delta_ll_bernoulli_block_pair(
 69:             e_old=e_old,
 70:             e_new=e_new,
 71:             n_old=n_old,
 72:             n_new=n_new
 73:         )
 74:     return delta_ll
 75: # ────────────────────────────────────────────────────────────────────
 76: ### Helpter function to vectorise the LL global computation
 77: # ────────────────────────────────────────────────────────────────────
 78: @jit(nopython=True, cache=True, fastmath=True)   # remove decorator if you dislike Numba
 79: def _ll_vec(edges: np.ndarray, pairs: np.ndarray, eps: float = 1e-6) -> np.ndarray:
 80:     """
 81:     edges  : e_rs   (int ≥ 0)
 82:     pairs  : n_rs   (int ≥ 1)
 83:     returns: ℓ_rs   (float)
 84:     """
 85:     p = edges / pairs
 86:     p = np.where(p < eps, eps, p)
 87:     p = np.where(p > 1.0 - eps, 1.0 - eps, p)
 88:     return edges * np.log(p) - (pairs - edges) * np.log1p(-p)
 89: def compute_global_bernoulli_ll_fast(block_data:BlockData) -> float:
 90:     """
 91:     Computes the global log-likelihood of the SBM using Bernoulli likelihood.
 92:     Same semantics as the original `compute_global_bernoulli_ll`, but
 93:     **O(nnz)** instead of O(B²).
 94:     The trick: only block pairs with at least one edge (e_rs > 0) can
 95:     change the profiled Bernoulli LL once the constants are dropped.
 96:     """
 97:     conn: coo_array = coo_array(block_data.block_connectivity)
 98:     rows, cols, e = conn.row, conn.col, conn.data.astype(np.int64)
 99:     # Undirected graphs: keep only upper-triangle to avoid double count
100:     if not block_data.directed:
101:         keep = rows <= cols
102:         rows, cols, e = rows[keep], cols[keep], e[keep]
103:     # Block sizes in matrix-index order
104:     sizes = np.fromiter(
105:         (block_data.block_sizes[block_data.inverse_block_indices[i]]
106:          for i in range(len(block_data.block_sizes))),
107:         dtype=np.int64,
108:         count=len(block_data.block_sizes)
109:     )
110:     # Possible pair counts n_rs (vectorised)
111:     n = np.where(
112:         rows == cols,
113:         sizes[rows] * (sizes[rows] - 1) // 2,   # diagonal blocks
114:         sizes[rows] * sizes[cols]               # off-diagonal
115:     )
116:     # Safety: skip singleton blocks (n = 0) to avoid /0 in n==1 corner
117:     valid = n > 0
118:     if not valid.all():
119:         rows, cols, e, n = rows[valid], cols[valid], e[valid], n[valid]
120:     # Vectorised LL and reduction
121:     return float(_ll_vec(e, n).sum())
122: def compute_global_bernoulli_ll(
123:         block_data: BlockData,
124: ) -> float:
125:     """
126:     Compute the global log-likelihood of the SBM using Bernoulli likelihood.
127:     :param block_data: The BlockData object containing block connectivity and sizes.
128:     :param upper_triangle_only: If True, only compute for upper triangle of the connectivity matrix.
129:     :return: The global log-likelihood.
130:     """
131:     upper_triangle_only = not block_data.directed
132:     ll = 0.0
133:     for r in range(len(block_data.block_sizes)):
134:         # if block has less than 2 nodes, skip it: no possible pairs
135:         size_r = block_data.block_sizes[ block_data.inverse_block_indices[r] ]
136:         if size_r <= 1:
137:             continue 
138:         for s in range(r if upper_triangle_only else 0, len(block_data.block_sizes)):
139:             e = block_data.block_connectivity[r, s]
140:             #n = block_data.get_possible_pairs(r, s)
141:             if r == s:
142:                 # If the same block, return the number of pairs within the block
143:                 n = block_data.block_sizes[r] * (block_data.block_sizes[r] - 1) // 2
144:             # If different blocks, return the product of their sizes
145:             else:
146:                 n = block_data.block_sizes[r] * block_data.block_sizes[s]
147:             if e < 0 or n < 0:
148:                 raise ValueError(f"Invalid edge count {e} or possible pairs {n} for block pair ({r}, {s}).")
149:             if e > n:
150:                 raise ValueError(f"Edge count {e} cannot be greater than possible pairs {n} for block pair ({r}, {s}).")
151:             ll += _bernoulli_ll_block_pair(e, n) # type: ignore
152:     return ll
153: #### LikelihoodCalculator class ######
154: class LikelihoodCalculator:
155:     def __init__(self,
156:                  block_data: BlockData,
157:                  likelihood_type: LikelihoodType = 'bernoulli',
158:                  ):
159:         self.block_data = block_data
160:         self.likelihood_type: LikelihoodType = 'bernoulli'
161:         self.nll = self.compute_nll()
162:     def compute_nll(self) -> float:
163:         """
164:         Compute the negative likelihood of the network given the current partition.
165:         :return: The negative log-likelihood of the SBM.
166:         """
167:         if self.likelihood_type.lower() == 'bernoulli':
168:             return -compute_global_bernoulli_ll_fast(block_data=self.block_data)
169:         else:
170:             raise NotImplementedError("Only Bernoulli likelihood is implemented.")
171:     def _compute_delta_nll_from_changes(self,
172:                                        delta_e: EdgeDelta,
173:                                        delta_n: CombinationDelta,
174:     ) ->float:
175:         """
176:         efficeintly compute the change in log-likelihood from changes in edge counts and possible pairs.
177:         :param delta_e: Changes in edge counts between blocks.
178:         :param delta_n: Changes in possible pairs between blocks.
179:         :param total_edges: Total number of edges in the graph.
180:         :return: The change in log-likelihood.
181:         """
182:         if self.likelihood_type.lower() == 'bernoulli':
183:             return -compute_delta_ll_from_change_bernoulli(
184:                 delta_e=delta_e,
185:                 delta_n=delta_n,
186:                 block_data=self.block_data
187:             )
188:         else:
189:             raise NotImplementedError("Only Bernoulli likelihood is implemented.")
190:     def compute_delta_nll(self,
191:                         delta_e: EdgeDelta,
192:                         delta_n: CombinationDelta,
193:         ) -> float:
194:         """
195:         Compute the change in log-likelihood for a proposed swap of two nodes.
196:         :param proposed_moves: A list of tuples (node_i, node_j) representing the nodes to swap.
197:         :return: The change in log-likelihood.
198:         """
199:         return self._compute_delta_nll_from_changes(
200:             delta_e=delta_e,
201:             delta_n=delta_n
202:             )

================
File: src/sbm/mcmc.py
================
  1: """ 
  2: Code for the MCMC algorithm used in the Stochastic Block Model (SBM) fitting.
  3: This code implements the MCMC algorithm for both standard and private partitioning scenarios.
  4: It includes the main MCMC algorithm class and a specialized class for private partitioning with differential privacy
  5: """
  6: from typing import Optional, Tuple, Dict, Optional, List
  7: from collections import deque
  8: import numpy as np
  9: #from line_profiler import profile
 10: from numba import jit
 11: from math import exp
 12: #from src.sbm.graph_data import GraphData
 13: from sbm.block_data import BlockData
 14: from sbm.likelihood import LikelihoodCalculator
 15: from sbm.block_change_proposers import ChangeProposer
 16: from sbm.node_mover import NodeMover
 17: from sbm.utils.logger import CSVLogger
 18: from sbm.mcmc_diagnostics import OnlineDiagnostics
 19: from sbm.block_change_proposers import ChangeProposer, ChangeProposerName
 20: #### Aliases
 21: ChangeProposerDict = Dict[ChangeProposerName, ChangeProposer] 
 22: ChangeFreqDict = Dict[ChangeProposerName, float]
 23: class MCMC:
 24:     def __init__(self,
 25:                  block_data: BlockData,
 26:                  likelihood_calculator: LikelihoodCalculator,
 27:                  change_proposer: ChangeProposerDict,
 28:                  rng: np.random.Generator,
 29:                  logger: Optional[CSVLogger] = None,
 30:                  monitor: bool = True,
 31:                  diag_lag: int =1000,
 32:                  diag_checkpoints: int = 3000,
 33:                  change_freq: Optional[ChangeFreqDict] = None,
 34:                  ):
 35:         self.block_data = block_data
 36:         self.likelihood_calculator = likelihood_calculator
 37:         self.change_proposers = change_proposer
 38:         self.change_freq = change_freq
 39:         self.node_mover = NodeMover(block_data=block_data)
 40:         self.rng = rng
 41:         self.current_nll = self.likelihood_calculator.nll
 42:         self.logger = logger # True if logging is enabled, False otherwise.
 43:         ### set up mcmc diagnostics (R̂ and ESS)
 44:         # only for estimating convergence diagnostics for dp patitioning
 45:         self._monitor = monitor
 46:         if monitor:
 47:             self._diag= OnlineDiagnostics(window=diag_lag)
 48:             self._diag_checkpoints = diag_checkpoints
 49:             self._off_diag = self._select_off_pairs(max_panel=diag_checkpoints)
 50:         else:
 51:             self._diag = None
 52:             self._diag_checkpoints = 0
 53:             self._off_diag = []
 54:         # store the best block assignment and likelihood
 55:         self._best_block_assignment = block_data.blocks.copy()
 56:         self._best_block_conn = block_data.block_connectivity.copy()
 57:         self.best_nll = self.likelihood_calculator.nll
 58:     def fit(self,
 59:             max_num_iterations: int,
 60:             initial_temperature: float = 1,
 61:             cooling_rate: float = 0.99,
 62:             min_block_size: Optional[int] = None,
 63:             max_blocks: Optional[int] = None,
 64:             patience: Optional[int] = None,
 65:         ) -> List[float]:
 66:         """
 67:         Run the adaptive MCMC algorithm to fit the SBM to the network data.
 68:         :param max_num_iterations: max number of MCMC iterations to run.
 69:         :param min_block_size: Minimum allowed size for any block.
 70:         :param initial_temperature: Starting temperature for simulated annealing.
 71:         :param cooling_rate: Rate at which temperature decreases.
 72:         :param target_acceptance_rate: Desired acceptance rate for adaptive adjustments (default 25%).
 73:         :param max_blocks: Optional maximum number of blocks allowed.
 74:         """
 75:         acc_hist = deque(maxlen=1000)          # for accept‑rate window
 76:         temperature = initial_temperature
 77:         current_nll = self.likelihood_calculator.nll
 78:         acceptance_rate = 0 # acceptance rate of moves between logging
 79:         nll_list = [current_nll]
 80:         # if patience None, set based on the graph size
 81:         if patience is None:
 82:             n_nodes = self.block_data.graph_data.num_nodes
 83:             patience = min(int(0.1 * n_nodes*(n_nodes - 1) // 2), 10**5)
 84:         if self.logger:
 85:             self.logger.log(0, current_nll, acceptance_rate, temperature)
 86:         n_steps_declined = 0
 87:         for iteration in range(1, max_num_iterations + 1):
 88:             move_type = self._select_move_type()
 89:             delta_nll, move_accepted = self._attempt_move(
 90:                 move_type=move_type,
 91:                 min_block_size=min_block_size,
 92:                 temperature=temperature,
 93:                 max_blocks=max_blocks
 94:                 )
 95:             acc_hist.append(move_accepted)
 96:             # --- diagnostics update --------------------------------
 97:             if self._monitor and self._diag is not None:
 98:                 diag_vec = self.block_data.diagonal_counts()
 99:                 off_vec  = self.block_data.counts_for_pairs(self._off_diag)
100:                 self._diag.update(self.current_nll, diag_vec, off_vec)
101:             # update likelihood and best assignment so far
102:             if move_accepted :
103:                 self.current_nll += delta_nll
104:                 n_steps_declined = 0
105:                 if self.logger:
106:                     acceptance_rate += 1
107:                 if self.current_nll < self.best_nll:
108:                     self.best_nll = current_nll
109:                     self._best_block_assignment = self.block_data.blocks.copy()
110:                     self._best_block_conn = self.block_data.block_connectivity.copy()
111:             else:
112:                 n_steps_declined += 1
113:             nll_list.append(self.current_nll)
114:             temperature = self._update_temperature(temperature, cooling_rate)
115:             # --- logging --------------------------------
116:             if (self.logger is not None and
117:                 iteration % self.logger.log_every == 0
118:                 ):
119:                 if (self._monitor and
120:                     self._diag is not None and
121:                     iteration % self._diag_checkpoints == 0
122:                     ):
123:                     rhat, ess = self._diag.summary()
124:                 else:
125:                     rhat, ess = np.nan, np.nan
126:                 self.logger.log(
127:                     iteration          = iteration,
128:                     neg_loglike        = self.current_nll,
129:                     accept_rate_window = float(np.mean(acc_hist or [0])),
130:                     temperature        = 1.0,          # or self.T if annealing
131:                     rhat_max           = rhat,
132:                     ess_min            = ess,
133:                 )
134:             if patience is not None and n_steps_declined >= patience:
135:                 print(f"Stopping early after {iteration} iterations due to patience limit.")
136:                 break
137:         return nll_list 
138:     def _select_move_type(self) -> ChangeProposerName:
139:         """
140:         Select a move type based on the current proposal probabilities.
141:         :return: The selected move type.
142:         """
143:         if self.change_freq is None:
144:             return "uniform_swap"
145:         else:
146:             # Select a move type based on the defined probabilities
147:             move_type = self.rng.choice(
148:                 tuple(self.change_freq.keys()),
149:                 p=tuple(self.change_freq.values())
150:             )
151:         return move_type # type: ignore
152:     def _attempt_move(self,
153:                       move_type: ChangeProposerName,
154:                       temperature: float,
155:                       max_blocks: Optional[int] = None,
156:                       min_block_size: Optional[int] = None,
157:         ) -> Tuple[float, bool]:
158:         """
159:         Attempt a move of the specified type.
160:         :param move_type: The type of move to attempt ('swap').
161:         :param min_block_size: Minimum allowed size for any block.
162:         :param temperature: Current temperature for simulated annealing.
163:         :param max_blocks: Optional maximum number of blocks allowed.
164:         :return: Tuple of (delta_nll, move_accepted)
165:         """
166:         delta_nll, move_accepted = 0.0, False
167:         proposed_change, proposed_delta_e, proposed_delta_n = \
168:             self.change_proposers[move_type].propose_change()
169:         # Compute change in log-likelihood and accept/reject move
170:         delta_nll = self.likelihood_calculator.compute_delta_nll(
171:             delta_e=proposed_delta_e,
172:             delta_n=proposed_delta_n
173:             )
174:         move_accepted = self._accept_move(delta_nll, temperature)
175:         if move_accepted:
176:             self.node_mover.perform_change(proposed_change, proposed_delta_e)
177:         return delta_nll, move_accepted
178:     def _accept_move(self, delta_nll: float, temperature: float, eps:float=1e-6) -> bool:
179:         """
180:         Determine whether to accept a proposed move based on likelihood change and temperature.
181:         :param delta_nll: Change in negative log-likelihood resulting from the proposed move.
182:         :param temperature: Current temperature for simulated annealing.
183:         :return: True if move is accepted, False otherwise.
184:         """
185:         if delta_nll < 0:
186:             return True
187:         temperature = max(temperature, eps)  # Avoid division by zero
188:         z = min(delta_nll / temperature, 700) # clip to avoid overflow in exp
189:         return self.rng.uniform() > np.exp(z)
190:     def _update_temperature(self, current_temperature: float, cooling_rate: float) -> float:
191:         """
192:         Update the temperature according to the cooling schedule.
193:         :param current_temperature: The current temperature.
194:         :param cooling_rate: The cooling rate.
195:         :return: The updated temperature.
196:         """
197:         return current_temperature * cooling_rate
198:     # --------------------------------------------------------------
199:     def _select_off_pairs(self, max_panel: int):
200:         """ 
201:         Randomly sample off pairs to monitor for diagnostics. 
202:         First we select pairs that currently have at least one edge,
203:         then we add random pairs until we reach the desired size.
204:         """
205:         B = len(self.block_data.block_sizes)
206:         want = min(max_panel, 2 * B) # number of pairs to sample and track
207:         ### get all pairs that currently have >= 1 edge
208:         nz = [(r, s) for r in range(B) for s in range(r + 1, B)
209:               if self.block_data.block_connectivity[r, s] > 0]
210:         self.rng.shuffle(nz)
211:         panel = nz[:want]
212:         # 2. add random extras until size == want
213:         while len(panel) < want:
214:             r, s = self.rng.choice(range(B), 2)
215:             if r > s:
216:                 r, s = s, r
217:             if (r, s) not in panel:
218:                 panel.append((r, s))
219:         return panel
220: ### --------------------------------------------------------------------------- 
221: #### MCMC Algorithm for Private Partitioning
222: ### --------------------------------------------------------------------------- 
223: class PrivatePartitionMCMC(MCMC):
224:     """
225:     MCMC sampler that targets the node-level DP Boltzmann distribution
226:         P(z) ∝ exp(-ε · L(z) / (2Δ))
227:     where L is the negative log-likelihood and Δ is its global
228:     sensitivity (Δ = 1 for Bernoulli SBMs).
229:     """
230:     def __init__(self, *, epsilon: float, delta_ll_sensitivity=1.0, temperature=1, **kwargs):
231:         super().__init__(**kwargs)
232:         self.eps   = float(epsilon)
233:         self.delta = float(delta_ll_sensitivity)
234:         self.temperatur = temperature
235:     # --- single move ----------------------------------------------------
236:     def _accept_prob(self, delta_nll: float) -> float:
237:         """Metropolis ratio specialised to the exponential mechanism."""
238:         ratio = exp(- self.eps * delta_nll / (2.0 * self.delta))
239:         return min(1.0, ratio)
240:     def _attempt_move(self,
241:                       move_type: ChangeProposerName,
242:                       temperature: float,
243:                       max_blocks: Optional[int] = None,
244:                       min_block_size: Optional[int] = None,
245:                       ) -> Tuple[float, bool]:
246:         # invoke parent proposer / Δnll code
247:         delta_nll, accepted = super()._attempt_move(
248:             move_type=move_type,
249:             temperature=temperature,      # no annealing in a DP chain
250:             max_blocks=max_blocks,
251:             min_block_size=min_block_size
252:         )
253:         return delta_nll, accepted




================================================================
End of Codebase
================================================================
