This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.repomix/
  bundles.json
configs/
  sbm_fit_k10.yml
  surrogate_eval.yml
notebooks/
  likelihood_test.ipynb
  sbm_visualize.ipynb
planted_partitions/
  undirected_planted_partitions.py
src/
  metrics/
    __init__.py
    clustering.py
    degree.py
    shortest_path.py
  pipelines/
    evaluate_surrogate.py
    fit_sbm.py
    generate_surrogate.py
    run_all.py
  sbm/
    utils/
      logger.py
      util.py
    block_assigner.py
    block_change_proposers.py
    block_data.py
    graph_data.py
    initial_partition.py
    io.py
    likelihood.py
    mcmc.py
    model.py
    node_mover.py
    sampling.py
  tests/
    likelihood_test.py
    planted_partition_tests.py
    test_change_proposer_and_mover.py
    test_io.py
    test_metrics.py
.gitignore
pyproject.toml
README.md
setup.cfg

================================================================
Files
================================================================

================
File: .repomix/bundles.json
================
{
  "bundles": {}
}

================
File: configs/sbm_fit_k10.yml
================
# -------------------------------------------------------------------
#  Global defaults
# -------------------------------------------------------------------
seed: 42                 # RNG seed forwarded to NumPy & Metis
min_block_size: 10       # target k
n_iter: 5_000             # total MCMC iterations
temperature: 1.0         # initial annealing temperature
cooling_rate: 0.999
force_undirected: true   # force undirected graphs to be undirected
logging_folder: "./logs/"
log_every: 1000

# -------------------------------------------------------------------
#  List of empirical graphs to process
#  Each item needs:
#    name : label used for output folder (models/sbm/<name>/)
#    path : relative or absolute path to the processed graph file
# -------------------------------------------------------------------
datasets:
  - name: congress_twitter
    path: data/processed/congress.edgelist # undirected GML

================
File: configs/surrogate_eval.yml
================
# ---------------------------------------------------------------
seed: 1
min_block_size: 10
n_surrogates: 3                  # graphs to sample per dataset
overwrite: false                  # set true to ignore cached results

# which similarity metrics to compute
metrics:
  - shortest_path
  - degree
  - clustering

# list of empirical datasets (must exist under data/processed and models/sbm)
datasets:
  - name: congress_twitter
    graph: data/processed/congress.edgelist
    sbm_model: models/sbm/congress_twitter

================
File: notebooks/sbm_visualize.ipynb
================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting networkx\n",
      "  Using cached networkx-3.4.2-py3-none-any.whl.metadata (6.3 kB)\n",
      "Using cached networkx-3.4.2-py3-none-any.whl (1.7 MB)\n",
      "Installing collected packages: networkx\n",
      "Successfully installed networkx-3.4.2\n"
     ]
    }
   ],
   "source": [
    "!pip install networkx\n",
    "!pip install matplotlib\n",
    "!pip install numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def plot_sbm_graph(block_sizes, p_matrix):\n",
    "    # Validate the connectivity matrix\n",
    "    n_blocks = len(block_sizes)\n",
    "    if p_matrix.shape != (n_blocks, n_blocks):\n",
    "        raise ValueError(\"The connectivity matrix dimensions must match the number of blocks.\")\n",
    "    if np.any(p_matrix < 0) or np.any(p_matrix > 1):\n",
    "        raise ValueError(\"All probabilities in the connectivity matrix must be between 0 and 1.\")\n",
    "\n",
    "    # Generate Stochastic Block Model graph\n",
    "    G = nx.stochastic_block_model(block_sizes, p_matrix)\n",
    "\n",
    "    # Get adjacency matrix\n",
    "    adj_matrix = nx.to_numpy_array(G)\n",
    "\n",
    "    # Assign colors based on block membership\n",
    "    colors = [G.nodes[node]['block'] for node in G.nodes]\n",
    "\n",
    "    # Plotting the graph\n",
    "    pos = nx.spring_layout(G, seed=42)  # For consistent layout\n",
    "    plt.figure(figsize=(12, 5))\n",
    "\n",
    "    # Subplot 1: SBM graph\n",
    "    plt.subplot(1, 2, 1)\n",
    "    nx.draw(G, pos, node_color=colors, cmap=plt.cm.tab10, with_labels=False,\n",
    "            node_size=100, edge_color='gray')\n",
    "    plt.title('Stochastic Block Model')\n",
    "\n",
    "    # Subplot 2: Adjacency matrix with visible block structure\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.imshow(adj_matrix, cmap='Greys', interpolation='none')\n",
    "    plt.colorbar(label='Edge Weight')\n",
    "    plt.title('Adjacency Matrix')\n",
    "    plt.xlabel('Nodes')\n",
    "    plt.ylabel('Nodes')\n",
    "\n",
    "    # Overlay block boundaries for visual separation\n",
    "    block_boundaries = np.cumsum([0] + block_sizes)\n",
    "    for boundary in block_boundaries:\n",
    "        plt.axhline(boundary - 0.5, color='red', linestyle='--', linewidth=0.5)\n",
    "        plt.axvline(boundary - 0.5, color='red', linestyle='--', linewidth=0.5)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Example usage\n",
    "block_sizes = [5, 8, 10]  # Sizes of each block\n",
    "p_matrix = np.array([[0, 0.1, 0.5],\n",
    "                     [0.1, 0.6, 0.1],\n",
    "                     [0.5, 0.1, 0.8]])  # Full inter-block connectivity matrix\n",
    "\n",
    "plot_sbm_graph(block_sizes, p_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anon_sbm",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

================
File: planted_partitions/undirected_planted_partitions.py
================
#!/usr/bin/env python3
"""
undirected_planted_partition.py
--------------------------------
Simple smoke-test for the swap-only MCMC implementation.

For each of 100 independent repetitions we

1.  Draw an undirected 100-node SBM with
        – B = 10 blocks of size 10
        – p_in  = 0.30   (within-block connection probability)
        – p_out = 0.05   (between-block probability)

2.  Build an initial *random* equal-size partition with
        UniformSmallBlockAssigner(min_block_size=10)             (code in block_assigner.py)

3.  Run the adaptive swap-only MCMC for `n_iter` iterations.

4.  Compute the Jaccard index between
        – the set of node pairs co-clustered in the *final* state, and
        – the same set for the planted partition.

The script prints the mean, standard deviation and a histogram
of the 100 Jaccard scores so you can eyeball whether the sampler
typically finds the planted structure.

Dependencies
------------
Only `numpy`, `scipy` and the local `sbm` package (already required by
your project).

Author: Von Nøgenmand
"""

from typing import Sequence, Hashable
from collections.abc import Sequence
import numpy as np
from scipy.sparse import csr_array
from scipy.optimize import linear_sum_assignment
from sklearn.metrics import (
    adjusted_rand_score,
    normalized_mutual_info_score,
)
from tqdm import tqdm

from sbm.graph_data import GraphData
from sbm.block_assigner import (
    UniformSmallBlockAssigner,
    MetisBlockAssigner,
)
from sbm.model import SBMModel




###############################################################################
# utility helpers
###############################################################################
def planted_blocks(n_nodes: int, block_size: int, rng) -> dict[int, int]:
    """Random planted partition: block 0 → nodes 0–9, block 1 → 10–19, …"""

    random_nodes = rng.permutation(n_nodes)
    # generate a random list of blocks for the nodes ensuring the correct block size
    random_blocks = np.arange(n_nodes) // block_size
    random_blocks = rng.permutation(random_blocks)

    return {v: block for (v, block) in zip(random_nodes, random_blocks)}


def sample_sbm(rng: np.random.Generator,
               blocks: dict[int, int],
               p_in: float,
               p_out: float) -> csr_array:
    """Generate an undirected loop-free adjacency matrix for a binary SBM."""
    n = len(blocks)
    adj = np.zeros((n, n), dtype=np.int8)

    # probability matrix look-up
    for u in range(n):
        for v in range(u + 1, n):          # u < v → strict upper triangle
            p = p_in if blocks[u] == blocks[v] else p_out
            if rng.random() < p:
                adj[u, v] = adj[v, u] = 1  # symmetrise

    return csr_array(adj)                 # sparse CSR


def misclassification_rate(
    true_labels: Sequence[Hashable],
    est_labels: Sequence[Hashable],
) -> float:
    """
    Percentage of vertices whose community label is wrong *after*
    optimally permuting the estimated labels to match the true ones.

    Parameters
    ----------
    true_labels : sequence
        Ground-truth block labels – length N.
    est_labels  : sequence
        Estimated block labels  – length N.

    Returns
    -------
    float
        Mis-classification rate in the interval [0, 1].

    Notes
    -----
    * Label sets may use arbitrary hashables (str, int, …) and need not
      have the same cardinality.  Any surplus estimated or true blocks
      are matched to “dummy” columns/rows filled with zeros.
    * Uses the Hungarian algorithm (via `scipy.optimize.linear_sum_assignment`)
      to maximise the number of correctly matched vertices.
    """
    true = np.asarray(true_labels)
    est  = np.asarray(est_labels)

    if true.shape != est.shape:
        raise ValueError("true_labels and est_labels must have the same length")

    # Map arbitrary labels to contiguous integers 0..T-1 and 0..E-1
    true_ids,  true_inv  = np.unique(true, return_inverse=True)
    est_ids,   est_inv   = np.unique(est,  return_inverse=True)

    T, E = len(true_ids), len(est_ids)
    N    = len(true)

    # Build contingency matrix C[e, t] = |{ i : est_i=e and true_i=t }|
    C = np.zeros((E, T), dtype=int)
    np.add.at(C, (est_inv, true_inv), 1)

    # Pad to square (Hungarian implementation needs it or we need to
    # maximise on rectangles by padding zeros).
    if E != T:
        dim = max(E, T)
        C_padded = np.zeros((dim, dim), dtype=int)
        C_padded[:E, :T] = C
        C = C_padded

    # Maximise trace(C[perm])  →  minimise −C for Hungarian
    row_ind, col_ind = linear_sum_assignment(-C)
    matched = C[row_ind, col_ind].sum()

    return 1.0 - matched / N


###############################################################################
# main loop
###############################################################################

def main(
    n_nodes = 100,
    block_size = 10,
    p_in = 0.30,
    p_out = 0.05,
    n_experiments = 10,
    n_iter = 3_000,
    rng_master = np.random.default_rng(42),
    temperature: float = 1
):
    init_scores = []
    final_scores = []

    for rep in tqdm(range(n_experiments)):
        rng = np.random.default_rng(rng_master.integers(2**32))

        # --- 1. plant graph -----------------------------------------------------
        planted = planted_blocks(n_nodes, block_size, rng)
        adj     = sample_sbm(rng, planted, p_in, p_out)

        # --- 2. initial random partition ---------------------------------------
        gdata    = GraphData(adjacency_matrix=adj, directed=False)
        assigner = MetisBlockAssigner(graph_data=gdata,
                                            rng=rng,
                                            min_block_size=block_size
                                        )
        init_blocks = assigner.compute_assignment()

        init_scores.append(
            misclassification_rate(
                true_labels=list(planted.values()),
                est_labels=list(init_blocks.blocks.values())
            )
        )

        sbm = SBMModel(
                initial_blocks=init_blocks,
                rng=rng,
                log=True,  # no logging
            )
        print(f"Initial ll {sbm.likelihood_calculator.ll:.3f}")

        sbm.fit(num_iterations=n_iter,
                min_block_size=block_size,
                initial_temperature=temperature,
                cooling_rate=0.999)

        final_blocks = sbm.get_block_assignments()

        # --- 4. score -----------------------------------------------------------
        final_scores.append(
            misclassification_rate(
                true_labels=list(planted.values()),
                est_labels=list(final_blocks.values())
            )
        )

    # --- print results ----------------------------------------------------------
    print(f"Initial misclassification rate: {np.mean(init_scores):.3f} ± {np.std(init_scores):.3f}")
    print(f"Final misclassification rate:   {np.mean(final_scores):.3f} ± {np.std(final_scores):.3f}")


if __name__ == "__main__":
    main(
        n_nodes=300,
        block_size=3,
        p_in=0.5,
        p_out=0.01,
        n_experiments=1,
        n_iter=5_000,
        rng_master=np.random.default_rng(42),
        temperature=1e-2
    )

================
File: src/metrics/__init__.py
================
from .shortest_path import shortest_path_distance
from .degree import degree_distance
from .clustering import clustering_distance

# registry maps a short name -> call-able
REGISTRY = {
    "shortest_path": shortest_path_distance,
    "degree": degree_distance,
    "clustering": clustering_distance,
}

================
File: src/metrics/clustering.py
================
""" 
Implementation of the clustering coefficient distance metric.
This module computes the absolute difference in the clustering coefficients
between two graphs represented by their adjacency matrices.
"""

# metrics/clustering.py
from typing import Optional
import numpy as np
import networkx as nx
from scipy.sparse import csr_array

def clustering_distance(
        emp_adj: csr_array,
        sur_adj: csr_array,
        directed: Optional[bool] = False,
        rng: np.random.Generator = np.random.default_rng(1)
    ) -> float:

    """ 
    Compute absolute 
    
    Parameters
    ----------
    emp_adj, sur_adj : scipy.sparse.csr_matrix
        Adjacency of empirical and surrogate graphs (directed or undirected).
    directed : bool, optional
        If True, compute directed degree distribution.
        If False, compute undirected degree distribution.
    rng : np.random.Generator, optional
        Random number generator for sampling (default: np.random.default_rng(1)).
    Returns
    -------
    float
        Distance (lower = more similar).
    """

    if directed:
        raise NotImplementedError(
            "Directed clustering coefficient is not implemented yet."
        )
    else:
        # Undirected clustering coefficient
        emp_graph = nx.from_scipy_sparse_array(emp_adj)
        sur_graph = nx.from_scipy_sparse_array(sur_adj)

        emp_clustering = nx.average_clustering(emp_graph)
        sur_clustering = nx.average_clustering(sur_graph)

        return abs(emp_clustering - sur_clustering)

================
File: src/metrics/degree.py
================
""" 
Implementation of the degree distribution distance metric.
This module computes the Earth-mover distance (1-D Wasserstein distance)
between the degree distributions in two graphs represented by
their adjacency matrices.
"""
# metrics/degree.py
from typing import Optional
import numpy as np
import networkx as nx
from scipy.stats import wasserstein_distance #  1-D EMD
from scipy.sparse import csr_array

def degree_distance(
        emp_adj: csr_array,
        sur_adj: csr_array,
        directed: Optional[bool] = False,
        in_degree: Optional[bool] = False,
        out_degree: Optional[bool] = False,
        rng: np.random.Generator = np.random.default_rng(1)
    ) -> float:
    """ 
    Earth-mover (1-D Wasserstein) distance between the degree distributions
    of two graphs.

    Parameters
    ----------
    emp_adj, sur_adj : scipy.sparse.csr_matrix
        Adjacency of empirical and surrogate graphs (directed or undirected).
    directed : bool, optional
        If True, compute directed degree distribution.
        If False, compute undirected degree distribution.
    in_degree : bool, optional
        If True, compute in-degree distribution (for directed graphs).
        Ignored if `directed` is False.
    out_degree : bool, optional
        If True, compute out-degree distribution (for directed graphs).
        Ignored if `directed` is False.
    rng : np.random.Generator, optional
        Random number generator for sampling (default: np.random.default_rng(1)).
    Returns
    -------
    float
        Distance (lower = more similar).
    """

    if directed:
        raise NotImplementedError(
            "Directed degree distribution is not implemented yet."
        )
    else:
        if in_degree or out_degree:
            raise Warning(
                "in_degree and out_degree are ignored for undirected graphs."
            )
        # Undirected degree distribution
        emp_degrees = np.asarray(emp_adj.sum(axis=0)).flatten()
        sur_degrees = np.asarray(sur_adj.sum(axis=0)).flatten()

        emp_dist = np.bincount(emp_degrees)
        sur_dist = np.bincount(sur_degrees)

        # Normalize distributions
        emp_dist = emp_dist / emp_dist.sum()
        sur_dist = sur_dist / sur_dist.sum()

        # Compute Earth-mover distance
        distance = wasserstein_distance(emp_dist, sur_dist)
        return distance

================
File: src/metrics/shortest_path.py
================
""" 
Implementation of the shortest path distribution distance metric.
This module computes the Earth-mover distance (1-D Wasserstein distance)
between the distributions of all-pairs shortest-path lengths
in two graphs represented by their adjacency matrices.
"""
# metrics/shortest_path.py
from typing import Optional
import numpy as np
import networkx as nx
from scipy.stats import wasserstein_distance #  1-D EMD
from scipy.sparse import csr_array
from scipy.sparse.csgraph import shortest_path

def shortest_path_distance(
        emp_adj: csr_array,
        sur_adj: csr_array,
        n_samples: Optional[int]=None,
        rng:np.random.Generator = np.random.default_rng(1)
    ) -> float:
    """
    Earth-mover (1-D Wasserstein) distance between the distributions
    of all-pairs shortest-path lengths.

    Parameters
    ----------
    emp_adj, sur_adj : scipy.sparse.csr_matrix
        Adjacency of empirical and surrogate graphs (undirected).
    n_samples : int, optional
        Number of samples to use for the distributions.
        If None, all pairs are used.

    Returns
    -------
    float
        Distance (lower = more similar).
    """

    emp_graph_size = emp_adj.shape[0] # type: ignore
    sur_graph_size = emp_adj.shape[0] # type: ignore

    if (emp_graph_size > 1000) or (sur_graph_size > 100) and (n_samples is not None):
        raise Warning(
            "Graph sizes large (>1000 nodes), "
            "consider setting n_samples=None to use all pairs."
        )

    if n_samples is None:
        G_emp = nx.from_scipy_sparse_array(emp_adj)
        G_sur = nx.from_scipy_sparse_array(sur_adj)

        def sp_hist(G) -> np.ndarray:
            lengths = dict(nx.all_pairs_shortest_path_length(G))
            vals = [d for lengths_u in lengths.values() for d in lengths_u.values()]
            return np.array(vals)

        x = sp_hist(G_emp)
        y = sp_hist(G_sur)

    else: # sample pairs and compute distances
        if n_samples > (emp_graph_size * (emp_graph_size - 1) / 2) \
            or n_samples > (sur_graph_size * (sur_graph_size - 1) / 2):
            raise ValueError(
                "n_samples exceeds the number of unique pairs in the graph."
            )
        emp_pair_part_1 = rng.choice(emp_graph_size, size=n_samples, replace=True)
        emp_pair_part_2 = rng.choice(emp_graph_size-1, size=n_samples, replace=True)
        emp_pair_part_2[emp_pair_part_2 >= emp_pair_part_1] += 1
        emp_pairs = np.column_stack((emp_pair_part_1, emp_pair_part_2))

        sur_pair_part_1 = rng.choice(sur_graph_size, size=n_samples, replace=True)
        sur_pair_part_2 = rng.choice(sur_graph_size-1, size=n_samples, replace=True)
        sur_pair_part_2[sur_pair_part_2 >= sur_pair_part_1] += 1
        sur_pairs = np.column_stack((sur_pair_part_1, sur_pair_part_2))

        def sample_shortest_paths(adj, pairs):
            G = nx.from_scipy_sparse_array(adj)
            return np.array([nx.shortest_path_length(G, source=u, target=v) for u, v in pairs])

        x = sample_shortest_paths(emp_adj, emp_pairs)
        y = sample_shortest_paths(sur_adj, sur_pairs)

    return wasserstein_distance(x, y)

================
File: src/pipelines/evaluate_surrogate.py
================
import argparse, yaml, csv
from pathlib import Path
import numpy as np
import scipy.sparse as sp

from metrics import REGISTRY
from sbm.io import GraphLoader

def load_csr_npz(fn: Path):
    with np.load(fn) as z:
        return sp.csr_matrix(
            (z["data"], z["indices"], z["indptr"]),
            shape=z["shape"]
        )


def main(cfg):
    cfg = yaml.safe_load(Path(cfg).read_text())
    results = []

    for ds in cfg["datasets"]:
        emp = GraphLoader.load(Path(ds["graph"])).adjacency
        surr_dir = Path("data/surrogates") / ds["name"]

        for surr_file in sorted(surr_dir.glob("surr_*.npz")):
            surr = load_csr_npz(surr_file)
            row = {"dataset": ds["name"], "surrogate": surr_file.stem}
            for m in cfg["metrics"]:
                row[m] = REGISTRY[m](emp, surr)
            results.append(row)
            print("evaluated", surr_file)

    out = Path("results") / "surrogate_metrics.csv"
    out.parent.mkdir(exist_ok=True)
    with out.open("w", newline="") as f:
        w = csv.DictWriter(f, fieldnames=results[0].keys())
        w.writeheader(); w.writerows(results)
    print("saved", out)

if __name__ == "__main__":
    p = argparse.ArgumentParser(); p.add_argument("cfg"); main(p.parse_args().cfg)

================
File: src/pipelines/fit_sbm.py
================
# src/pipelines/fit_sbm.py
import yaml
import argparse
import time
from pathlib import Path

import numpy as np

from sbm.io import GraphLoader, SBMWriter
from sbm.block_assigner import MetisBlockAssigner
from sbm.model import SBMModel
from sbm.utils.logger import CSVLogger

def main(cfg_path: str):
    cfg = yaml.safe_load(Path(cfg_path).read_text())
    for ds in cfg["datasets"]:
        seed = cfg['seed']
        rng = np.random.default_rng(seed)

        # prepare SBM model
        g = GraphLoader.load(
            Path(ds["path"]),
            force_undirected=cfg["force_undirected"],
            )
        assigner = MetisBlockAssigner(
            graph_data=g,
            min_block_size=cfg["min_block_size"],
            rng=rng,
            )

        block_data = assigner.compute_assignment()
        model = SBMModel(block_data, rng=rng)

        # fit SBM model

        name = (
            f"{ds["name"]}_"
            f"{cfg['n_iter']}_iter_"
            f"{cfg['min_block_size']}_minbs_"
        )
        log_path = Path(cfg['logging_folder']) / f"{name}.csv"

        tic = time.time()
        with CSVLogger(log_path, log_every=cfg['log_every']) as logger:
            model.fit(num_iterations=cfg["n_iter"],
                      min_block_size=cfg["min_block_size"],
                      initial_temperature=cfg["temperature"],
                      cooling_rate=cfg["cooling_rate"],
                      logger=logger,
                      )
        toc = time.time()

        # save the fitted model
        fit = model.to_sbmfit({"dataset": ds["name"], "fit_seconds": toc-tic})
        out_dir = Path("models/sbm")/ds["name"]
        out_dir.mkdir(parents=True, exist_ok=True)
        SBMWriter.save(out_dir, fit)
        print(f"{ds['name']} completed, nll = {fit.neg_loglike:.2f}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("cfg", help="YAML config")
    main(parser.parse_args().cfg)

================
File: src/pipelines/generate_surrogate.py
================
import argparse, yaml
from pathlib import Path
import numpy as np

from sbm.io import SBMWriter
from sbm.sampling import sample_sbm_graph_from_fit

def main(cfg):
    cfg = yaml.safe_load(Path(cfg).read_text())
    rng = np.random.default_rng(cfg["seed"])

    for ds in cfg["datasets"]:
        sbm_fit = SBMWriter.load(Path(ds["sbm_model"]))
        out_dir = Path("data/surrogates") / ds["name"]
        out_dir.mkdir(parents=True, exist_ok=True)

        for i in range(cfg["n_surrogates"]):
            fn = out_dir / f"surr_{i:03d}.npz"
            if fn.exists() and not cfg["overwrite"]:
                continue

            sur_graph_data = sample_sbm_graph_from_fit(
                sbm_fit=sbm_fit,
                rng=rng,
            )

            adj = sur_graph_data.adjacency
            np.savez_compressed(fn,
                                data=adj.data,
                                indices=adj.indices,
                                indptr=adj.indptr,
                                shape=adj.shape, # type: ignore
                            )
            print("generated", fn)

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("cfg")
    main(p.parse_args().cfg)

================
File: src/pipelines/run_all.py
================
import subprocess, sys

def run(cmd):
    print(">>", " ".join(cmd)); subprocess.check_call(cmd)

CFG_FIT = "configs/sbm_fit_k10.yml"
CFG_EVAL = "configs/surrogate_eval.yml"

if __name__ == "__main__":
    python = sys.executable
    run([python, "-m", "pipelines.fit_sbm",   CFG_FIT])
    run([python, "-m", "pipelines.generate_surrogates", CFG_EVAL])
    run([python, "-m", "pipelines.evaluate_surrogates", CFG_EVAL])

================
File: src/sbm/utils/logger.py
================
# sbm/utils/logger.py

import csv
import time
from pathlib import Path
from typing import Union, TextIO


class CSVLogger:
    """
    Minimal CSV logger for long-running SBM fits.

    Each row contains:
        iteration, elapsed_seconds, neg_log_likelihood,
        accept_rate_window, temperature

    Parameters
    ----------
    file : str | pathlib.Path | TextIO
        Where to write.  If a path is given and the file does not yet
        exist, a header row is written automatically.
    log_every : int
        Only rows for which ``iteration % log_every == 0`` are written.
    """

    header = [
        "iteration",
        "elapsed_seconds",
        "neg_log_likelihood",
        "accept_rate_window",
        "temperature",
    ]

    def __init__(self,
                 file: Union[str, Path, TextIO],
                 *,
                 log_every: int = 1000,
                 ):
        self.log_every = int(log_every)
        self._start = time.time()

        # if prior log file exists, delete
        if isinstance(file, (str, Path)):
            file = Path(file)
            if file.exists():
                file.unlink()

        # open the handle
        if isinstance(file, (str, Path)):
            self._own_handle = True
            path = Path(file)
            path.parent.mkdir(parents=True, exist_ok=True)
            first = not path.exists()
            self._fh = path.open("a", newline="")
            self._writer = csv.writer(self._fh)
            if first:
                self._writer.writerow(self.header)
        else:                                  # file-like object supplied
            self._own_handle = False
            self._fh: TextIO = file
            self._writer = csv.writer(self._fh)
            # assume caller already wrote header

    # -----------------------------------------------------------------
    def log(self,
            iteration: int,
            neg_loglike: float,
            accept_rate_window: float,
            temperature: float,
            ) -> None:
        """
        Append a row
        """
        elapsed = time.time() - self._start
        self._writer.writerow([
            iteration,
            f"{elapsed:.3f}",
            f"{neg_loglike:.6f}",
            f"{accept_rate_window:.6f}",
            f"{temperature:.6f}",
        ])
        self._fh.flush()

    # -----------------------------------------------------------------
    def close(self):
        if self._own_handle:
            self._fh.close()

    # allow usage as a context manager -------------------------------
    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc, tb):
        self.close()

================
File: src/sbm/utils/util.py
================
import numpy as np

def set_random_seed(seed: int):
    return np.random.default_rng(seed)

================
File: src/sbm/block_assigner.py
================
""" 
    Functions and classes for computing initial block assignment 
    used in the Stochastic Block Model (SBM). These are later updated
    using the MCMC algorithm.
"""
from typing import List, Dict, Optional, Tuple, Iterable
from collections import defaultdict
import pymetis
import scipy.sparse as sp
import numpy as np

from sbm.block_data import BlockData
from sbm.graph_data import GraphData

#  helper ---------------------------------------------------------------
def _block_sizes(blocks: Dict[int, int]) -> Dict[int, int]:
    sizes = defaultdict(int)
    for b in blocks.values():
        sizes[b] += 1
    return sizes

#  Mixin – functions for balancing block sizes of proposed block partition --
def rebalance_to_min_size(
    blocks: Dict[int, int],
    adjacency: sp.csr_array,
    min_block_size: Optional[int],
) -> Dict[int, int]:
    """
    Post-process a *proposed* partition so that every block has
    size `min_block_size` or `min_block_size+1`.

    The algorithm:

    1.  Collect all nodes that currently belong to a block of size
        ``< min_block_size``.
    2.  Carve out as many **new** full blocks of size
        ``min_block_size`` as possible from this pool.
    3.  For the *left-over* nodes (< `min_block_size`)  
        a) try to move a node to a neighboring block that is still
           of exact size ``min_block_size``;  
        b) if no such neighbour exists, pick a random block that
           is still at size ``min_block_size``.  
        Each block may accept **at most one** such extra node,
        reaching ``min_block_size+1``.
    4.  Return the new `node → block` mapping.

    Parameters
    ----------
    blocks : dict {node: block_id}
        Preliminary assignment.
    adjacency : scipy.sparse.csr_array
        Undirected adjacency for neighbourhood look-ups.
    min_block_size : int
        Target base size *k*.

    Returns
    -------
    dict
        Balanced `node → block` mapping.
    """
    if min_block_size is None:
        return blocks

    sizes = _block_sizes(blocks)
    undersized = {b for b, sz in sizes.items() if sz < min_block_size}
    if not undersized:
        return blocks  # already balanced

    # -----------------------------------------------------------------
    # 1. pool all nodes from undersized blocks
    # -----------------------------------------------------------------
    pool: List[int] = [v for v, b in blocks.items() if b in undersized]

    # remove those undersized blocks entirely
    for b in undersized:
        sizes.pop(b, None)

    # current max label so we can create fresh block IDs
    next_block_id = max(sizes.keys(), default=-1) + 1

    # -----------------------------------------------------------------
    # 2. carve as many full blocks (size == k) as possible
    # -----------------------------------------------------------------
    while len(pool) >= min_block_size:
        new_nodes = [pool.pop() for _ in range(min_block_size)]
        for v in new_nodes:
            blocks[v] = next_block_id
        sizes[next_block_id] = min_block_size
        next_block_id += 1

    # -----------------------------------------------------------------
    # 3. distribute remaining ( < k ) nodes
    # -----------------------------------------------------------------
    # keep a fast lookup of which *existing* blocks can still accept 1
    acceptors = {b for b, sz in sizes.items() if sz == min_block_size}

    rng = np.random.default_rng(42)  # deterministic for tests

    for v in pool:
        # 3a. neighbour heuristic
        neigh_blocks = {
            blocks[u]
            for u in adjacency.indices[adjacency.indptr[v] : adjacency.indptr[v + 1]]
            if sizes.get(blocks[u], 0) == min_block_size
        }
        target = None
        if neigh_blocks:
            target = rng.choice(list(neigh_blocks))
        elif acceptors:
            # 3b. random among remaining acceptors
            target = rng.choice(list(acceptors))
        else:
            raise RuntimeError("No available block can accept extra nodes")

        # assign
        blocks[v] = target
        sizes[target] += 1
        if sizes[target] == min_block_size + 1:
            acceptors.discard(target)

    return blocks


### Base class for BlockAssigner
class BlockAssigner:
    """
    Base class for assigning nodes to blocks in the Stochastic Block Model (SBM).
    This class is intended to be subclassed for specific block assignment strategies.
    """
    def __init__(self,
                 graph_data: GraphData,
                 rng: np.random.Generator,
                 num_blocks: Optional[int] = None,
                 min_block_size: Optional[int] = None,
                 max_block_size: Optional[int] = None,
                 ):
        self.graph_data = graph_data

        # check if there exist a valid assignment
        # given num_blocks, min_block_size, max_block_size
        if num_blocks is not None and min_block_size is not None:
            if num_blocks * min_block_size > graph_data.num_nodes:
                raise ValueError("Invalid parameters: num_blocks * min_block_size exceeds total number of nodes.")
        if max_block_size is not None and min_block_size is not None:
            if max_block_size < min_block_size:
                raise ValueError("Invalid parameters: max_block_size cannot be less than min_block_size.")

        self.num_blocks = num_blocks
        self.min_block_size = min_block_size
        self.max_block_size = max_block_size
        self.rng = rng
        self.min_size_balancers = rebalance_to_min_size

    def reindex_blocks(self, blocks: Dict[int, int]) -> Dict[int, int]:
        """ 
        Reindex block IDs to be consecutive integers starting from 0.
        """
        unique_blocks = sorted(set(blocks.values()))
        block_mapping = {old_id: new_id for new_id, old_id in enumerate(unique_blocks)}
        return {node: block_mapping[block_id] for node, block_id in blocks.items()}


    def _compute_assignment(self) -> Dict[int, int]:
        raise NotImplementedError(
            "compute_assignment must be implemented by subclasses of BlockAssigner."
        )

    def compute_assignment(self) -> BlockData:
        """
        Compute a balanced block assignment based on the proposed assignment.

        Currently, this method only performs a min_size balancing step.
        """
        proposed_assignment = self._compute_assignment()
        balanced_assignment = self.min_size_balancers(
            blocks=proposed_assignment,
            adjacency=self.graph_data.adjacency,
            min_block_size=self.min_block_size,
        )
        reindexed_assignment = self.reindex_blocks(balanced_assignment)

        return BlockData(
            initial_blocks=reindexed_assignment,
            graph_data=self.graph_data
        )


class UniformSmallBlockAssigner(BlockAssigner):
    """ 
    Assigns nodes to blocks of size min_block_size uniformly at random. 
    Ignore num_blocks and max_block_size.
    """

    def _compute_assignment(self) -> Dict[int, int]:
        """
        Assign nodes to blocks uniformly at random, ensuring each block has at least min_block_size nodes.
        """
        if self.min_block_size is None:
            raise ValueError("min_block_size must be specified for UniformSmallBlockAssigner.")
        if self.min_block_size <= 0:
            raise ValueError("min_block_size must be a positive integer.")

        if self.max_block_size is not None:
            Warning("max_block_size is ignored in UniformSmallBlockAssigner.")
        if self.num_blocks is not None:
            Warning("num_blocks is ignored in UniformSmallBlockAssigner.")

        num_nodes = self.graph_data.num_nodes

        # create list of nodes in random order
        node_list = self.rng.permutation(np.arange(num_nodes))
        # assign nodes to blocks
        block_assignments = {
            node: node // self.min_block_size for node in node_list
        }

        return block_assignments


class MetisBlockAssigner(BlockAssigner):
    """
    Use PyMetis to obtain a *balanced* `num_blocks`-way partition of the
    (undirected) graph.

    Parameters
    ----------
    graph_data : GraphData
        Graph wrapper holding the (sparse) adjacency matrix.
    num_blocks : int
        Desired number of blocks (≈ N // k where k is target block size).
    seed : int, optional
        Random seed forwarded to METIS.  If None, METIS uses its own seed.
    """

    def __init__(
        self,
        graph_data: GraphData,
        rng: np.random.Generator,
        num_blocks: Optional[int] = None,
        min_block_size: Optional[int] = None,
        max_block_size: Optional[int] = None,
    ) -> None:
        super().__init__(
            graph_data=graph_data,
            rng=rng,
            num_blocks=num_blocks,
            min_block_size=min_block_size,
            max_block_size=max_block_size,
            )

        if graph_data.directed:
            raise NotImplementedError(
                "MetisBlockAssigner currently supports undirected graphs only."
            )

        if num_blocks is None and min_block_size is None:
            raise ValueError("Either num_blocks or min_block_size must be specified for MetisBlockAssigner.")
        
        if num_blocks is None:
            num_blocks = max(
                1, graph_data.num_nodes // min_block_size
            )

        self.num_blocks = int(num_blocks)
        self.seed = rng.integers(2**32)

    # -----------------------------------------------------------------
    # Utilities
    # -----------------------------------------------------------------
    @staticmethod
    def _to_adj_lists(adj: sp.csr_array) -> list[list[int]]:
        """
        Convert a CSR adjacency matrix to the adjacency-list format PyMetis
        expects (no self-loops, undirected symmetry).
        """
        n = adj.shape[0] # type: ignore
        rows, cols = adj.nonzero() # type: ignore
        neigh = [[] for _ in range(n)]
        for u, v in zip(rows, cols):
            if u == v:
                continue  # ignore self-loops
            neigh[u].append(v)
        return neigh

    # -----------------------------------------------------------------
    # Public API
    # -----------------------------------------------------------------
    def _compute_assignment(self) -> Dict[int, int]:
        """Run METIS and return a BlockData with the resulting assignment."""
        n = self.graph_data.num_nodes
        adj_lists = self._to_adj_lists(self.graph_data.adjacency)

        # PyMetis returns (edgecuts, membership-array)
        _, parts = pymetis.part_graph(
            self.num_blocks,
            adjacency=adj_lists,
        )

        # PyMetis guarantees |parts| == n
        blocks: Dict[int, int] = {node: part for node, part in enumerate(parts)}

        # Wrap in BlockData so downstream code can use it directly
        return blocks

================
File: src/sbm/block_change_proposers.py
================
from typing import List, Optional, Tuple, DefaultDict, Literal
from collections import defaultdict, Counter
import numpy as np
from sbm.block_data import BlockData

### Aliases 
EdgeDelta = DefaultDict[Tuple[int, int], int] # edge-count changes between blocks
CombinationDelta= DefaultDict[Tuple[int, int], int] # changes in possible pairs between blocks
ProposedValidChanges = List[Tuple[int, int]]  # list of proposed node-block pairs

ChangeProposerName = Literal["swap"]
ChangeProposers = Literal["NodeSwapProposer"]


#### Helper functions ######
def _increment_delta_e(count: int, block_i: int, block_j: int,
                        delta_e: EdgeDelta) -> EdgeDelta:
    """
    Increment the edge count delta for a pair of blocks.

    :param count: The change in edge count.
    :param block_i: The first block index.
    :param block_j: The second block index.
    :param delta_e: The current edge count delta.
    :return: Updated edge count delta.
    """
    if block_i < block_j:
        delta_e[(block_i, block_j)] = count
    else:
        delta_e[(block_j, block_i)] = count

    return delta_e


### ChangeProposer classes for proposing block changes in the SBM
# These classes handle the logic of proposing valid changes to the block assignments
# and computing the resulting edge deltas for the block connectivity matrix.

class ChangeProposer:
    """ 
    Class to propose block-assignment changes for the MCMC algorithm.

    Handles min block size constraints. All functions return None
    if a  and ensures valid moves.

    Proposers shoudl always change block-id to block-adjacency idx before
    computing deltas.
    """
    def __init__(self,
                 block_data: BlockData,
                 rng: np.random.Generator=np.random.default_rng(1)):

        self.block_data = block_data

        self.rng = rng
        self.min_block_size = 1
    
    def propose_change(self,
        changes: Optional[ProposedValidChanges] = None,
        )-> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
        raise NotImplementedError("This method should be overridden by subclasses.")

    def _compute_delta_edge_counts(self, proposed_changes: ProposedValidChanges) -> EdgeDelta:
        """
        Compute the edge deltas for the proposed change.

        :param change: Proposed change as a list of (node, target_block) tuples.
        :return: EdgeDelta dictionary with changes in edge counts.
        """
        raise NotImplementedError("This method should be overridden by subclasses.")
    
    def _compute_edge_counts_between_node_and_blocks(self,
                                               node: int,
                                               ) -> Counter[int]:
        """
        Compute the number of edges between a node and each affected block.
    
        :param node: The node to move.
        :param affected_blocks: The blocks affected by the move.
        :return: A dictionary mapping block IDs to edge counts with the node.

        k_i: Counter[int]: number of edges between node and each affected block.

        returns a Counter object where keys are block IDs and values are edge counts.
        """
        if self.block_data.directed:
            raise NotImplementedError("Directed graphs are not supported yet.")
        else:
            #neighbors = self.block_data.graph_data.adjacency[:, [node]].indices  # type: ignore
            neighbors = self.block_data.graph_data.adjacency[[node], :].indices  # type: ignore
            blocks_among_neighbors = [
                self.block_data.block_indices[
                    self.block_data.blocks[neighbor]
                ] for neighbor in neighbors
            ]
            k_i = Counter(blocks_among_neighbors)

            return k_i

class NodeSwapProposer(ChangeProposer):
    def propose_change(self,
        changes: Optional[ProposedValidChanges] = None,
        ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
        """
        Propose swapping two nodes between different blocks.

        :return: Tuple of (node1, node2) or None if no valid swap.
        """
        if changes is not None:
            if len(changes) != 2:
                raise ValueError("NodeSwapProposer requires exactly two nodes to swap.")
            proposed_changes = changes
        else:
            # Select two different blocks
            block1, block2 = self.rng.choice(
                list(self.block_data.block_sizes.keys()),
                size=2,
                replace=False
            )

            # Select one node from each block
            # Note: changing to list is inefficient for large blocks.
            # However, having memberships being lists allow for fast 
            # membership updates.
            # Change if large blocks are common.
            node1 = self.rng.choice(
                list(self.block_data.block_members[block1])
            )
            node2 = self.rng.choice(
                list(self.block_data.block_members[block2])
            )

            proposed_changes :ProposedValidChanges = [(node1, block2), (node2, block1)]

        delta_e: EdgeDelta = self._compute_delta_edge_counts(
            proposed_changes=proposed_changes
        )

        delta_n: CombinationDelta = defaultdict(int, {key: 0 for key in delta_e.keys()})

        return proposed_changes, delta_e, delta_n
    
    def _compute_delta_edge_counts(self,
                                    proposed_changes: ProposedValidChanges
        )-> EdgeDelta:
        """
        Compute the changes in edge counts between blocks due to swapping
        node i and node j.

        :param i: The index of the first node being swapped.
        :param j: The index of the second node being swapped.
        :param k_i: The edges between the moving node and its neighbor blocks.
        :param source_block: The block from which the node is moved.
        :param target_block: The block to which the node is moved.

        :return: A Counter mapping block pairs to changes in edge counts.
        """
        if self.block_data.directed:
            raise NotImplementedError("Directed graphs are not supported yet.")
        
        (i, old_block_j), (j, old_block_i) = proposed_changes

        delta_e: EdgeDelta = defaultdict(int)
        block_i_idx = self.block_data.block_indices[old_block_i]
        block_j_idx = self.block_data.block_indices[old_block_j]

        # compute the edge counts for the blocks of i and j
        # on block-adjacency idx level
        k_i = self._compute_edge_counts_between_node_and_blocks(i)
        k_j = self._compute_edge_counts_between_node_and_blocks(j)
        affected_blocks = set(k_i.keys()) | set(k_j.keys())

        # add the changes for the neighbor blocks of i and j
        for t in affected_blocks - {block_i_idx, block_j_idx}:
            # Δm_{r t}
            delta_e = _increment_delta_e(
                count = -k_i[t] + k_j[t],
                block_i = old_block_i,
                block_j = t,
                delta_e = delta_e,
            )
            # Δm_{s t}
            delta_e = _increment_delta_e(
                count = -k_j[t] + k_i[t],
                block_i = old_block_j,
                block_j = t,
                delta_e = delta_e,
            )
        
        # Add the changes for the old blocks of i and j
        has_edge_ij = bool(self.block_data.graph_data.adjacency[i, j])

        delta_e = _increment_delta_e(
            count = k_i[old_block_i] - k_i[old_block_j] \
                    + k_j[old_block_j] - k_j[old_block_i] \
                    + 2 * has_edge_ij,
            block_i=old_block_i,
            block_j=old_block_j,
            delta_e=delta_e
        )

        delta_e = _increment_delta_e(
            count = k_j[old_block_i] - k_i[old_block_i] - has_edge_ij,
            block_i=old_block_i,
            block_j=old_block_i,
            delta_e=delta_e
        )
        delta_e = _increment_delta_e(
            count = k_i[old_block_j] - k_j[old_block_j] - has_edge_ij,
            block_i=old_block_j,
            block_j=old_block_j,
            delta_e=delta_e
        )

        return delta_e

================
File: src/sbm/io.py
================
from typing import Dict, Callable, Iterable, Tuple, Optional
from pathlib import Path
from dataclasses import dataclass
import json

import gzip

import numpy as np
from scipy.sparse import csr_array, csr_array, load_npz, coo_matrix
from scipy.io import mmread
import networkx as nx                                # light dep

import numpy as np
from scipy.sparse import load_npz, save_npz

from scipy.sparse import csr_array
from sbm.graph_data import GraphData

# src/sbm/io.py
@dataclass
class SBMFit:
    #blocks: dict[int, int]
    block_sizes: list[int]
    block_conn: csr_array
    directed_graph: bool # if undirected, only upper triangle is stored
    neg_loglike: float
    metadata: dict

class SBMWriter:
    @staticmethod
    def save(path: Path, fit: SBMFit) -> None:
        """ save SBM fit to file """
        path.mkdir(parents=True, exist_ok=True)
 
        #clean_blocks = {int(k): int(v) for k, v in fit.blocks.items()}
        clean_sizes  = [int(s) for s in fit.block_sizes]

        #(path / "blocks.json").write_text(json.dumps(clean_blocks))
        (path / "block_sizes.json").write_text(json.dumps(clean_sizes))

        # save sparce block connectivity matrix using scipy
        with open(path / "block_connectivity.npz", 'wb') as file:
            save_npz(file, fit.block_conn, compressed=True)

        (path / "directed_graph.txt").write_text(str(fit.directed_graph))
        (path / "neg_loglike.txt").write_text(str(fit.neg_loglike))
        with open(path / "metadata.json", 'w') as f:
            json.dump(fit.metadata, f)

    @staticmethod
    def load(path: Path) -> SBMFit:
        with open(path / "blocks.json", 'r') as blocks_file:
            blocks = json.load(blocks_file)
        blocks = {int(k): int(v) for k, v in blocks.items()}

        with open(path / "block_sizes.json", 'r') as sizes_file:
            block_sizes = json.load(sizes_file)
        block_sizes = [int(size) for size in block_sizes]

        with open(path / "block_connectivity.npz", 'rb') as conn_file:
            block_conn = load_npz(conn_file)

        directed_graph = path / "directed_graph.txt"
        directed_graph = (path / "directed_graph.txt").read_text().strip().lower() == 'true'
        neg_loglike = float((path / "neg_loglike.txt").read_text().strip())

        with open(path / "metadata.json", 'r') as f:
            metadata = json.load(f)

        return SBMFit(
            #blocks=blocks,
            block_sizes=block_sizes,
            block_conn=block_conn,
            directed_graph=directed_graph,
            neg_loglike=neg_loglike,
            metadata=metadata
        )

# ---------------------------------------------------------------------
#  GraphLoader
# ---------------------------------------------------------------------

class GraphLoader:
    """
    Factory that maps a file *extension* to a loader function and returns
    a `GraphData` object (CSR adjacency + directed flag).

    Register new loaders with the `@GraphLoader.register('.ext')`
    decorator.
    """

    # maps extension (lower-case, incl. leading dot) -> callable
    registry: Dict[str, Callable[[Path], Tuple[csr_array, bool]]] = {}

    # ----------------------- decorator -------------------------------
    @classmethod
    def register(cls, *exts: str):
        """
        Use as::

            @GraphLoader.register('.gml', '.graphml')
            def _load_graphml(path): ...
        """
        def decorator(fn: Callable[[Path], Tuple[csr_array, bool]]):
            for ext in exts:
                cls.registry[ext.lower()] = fn
            return fn
        return decorator

    # ----------------------- public API ------------------------------
    @staticmethod
    def load(
        path: Path,
        *,
        directed: Optional[bool] = None,
        force_undirected: Optional[bool] = None
    ) -> GraphData:
        """Load graph at *path* and return GraphData."""
        ext = path.suffix.lower()
        if ext not in GraphLoader.registry:
            raise ValueError(
                f"GraphLoader: no loader registered for extension '{ext}'."
            )
        adj, is_directed = GraphLoader.registry[ext](path)

        # allow caller to override detection
        if directed is not None:
            is_directed = bool(directed)

        # if caller wants undirected, symmetrise the adjacency matrix
        if force_undirected:
            if is_directed:
                print(f"GraphLoader: forcing undirected graph, symmetrising {path}.")
                adj = adj.maximum(adj.T)
            is_directed = False

        adj = csr_array(adj, dtype=np.int8)  # ensure type is int8
        return GraphData(adjacency_matrix=adj, directed=is_directed)

    # ---------------- default loaders -------------------------------

# 1. compressed / plain .npz containing a CSR adjacency ----------------
@GraphLoader.register(".npz")
def _load_npz(path: Path) -> Tuple[csr_array, bool]:
    adj = load_npz(path)
    directed = _is_directed(adj)
    return adj.tocsr(), directed


# 2. Matrix Market -----------------------------------------------------
@GraphLoader.register(".mtx")
def _load_mtx(path: Path) -> Tuple[csr_array, bool]:
    adj = mmread(str(path))
    adj = csr_array(adj, dtype=np.int8)

    directed = _is_directed(adj)
    return adj, directed


# 3. Plain edge list (.edges, .edgelist, .txt, optional .gz) -----------
@GraphLoader.register(".edges", ".edgelist", ".txt", ".gz")
def _load_edgelist(path: Path) -> Tuple[csr_array, bool]:
    opener = gzip.open if path.suffix == ".gz" else open
    rows, cols = [], []
    with opener(path, "rt") as f:
        for line in f:
            if not line.strip() or line.startswith("#"):
                continue
            u, v = map(int, line.split()[:2])
            rows.append(u)
            cols.append(v)
    n = max(rows + cols) + 1
    data = np.ones(len(rows), dtype=np.int8)
    adj = coo_matrix((data, (rows, cols)), shape=(n, n)).tocsr()

    directed = _is_directed(adj)
    if not directed:            # symmetrise if undirected
        adj = adj.maximum(adj.T)
    adj = csr_array(adj, dtype=np.int8)  # ensure type is int8
    return adj, directed


# 4. GML / GraphML via NetworkX ---------------------------------------
@GraphLoader.register(".gml", ".graphml")
def _load_graphml(path: Path) -> Tuple[csr_array, bool]:
    G = nx.read_gml(path) if path.suffix == ".gml" else nx.read_graphml(path)
    directed = G.is_directed()
    adj = nx.to_scipy_sparse_array(G, format="csr", dtype=np.int8)
    if not directed:
        adj = adj.maximum(adj.T)
    return adj, directed

# ---------------- helper ----------------------------------------------
def _is_directed(adj:  csr_array, tol: int = 0) -> bool:
    """
    Quick symmetric test for an unweighted adjacency.
    `tol` is an integer threshold: if more than `tol` entries differ,
    we declare the graph directed.
    """
    diff = adj - adj.T
    return diff.count_nonzero() > tol

================
File: src/sbm/model.py
================
from typing import Dict, Optional
import numpy as np
from scipy.sparse import csr_array

from sbm.block_data import BlockData
from sbm.likelihood import (
    LikelihoodCalculator,
    LikelihoodType,
)
from sbm.block_change_proposers import NodeSwapProposer
from sbm.node_mover import NodeMover
from sbm.mcmc import MCMCAlgorithm

from sbm.io import SBMFit, SBMWriter
from sbm.utils.logger import CSVLogger

class SBMModel:
    def __init__(self,
                initial_blocks: BlockData,
                rng: np.random.Generator,
                likelihood_type: LikelihoodType = "bernoulli",
                log: bool = True
        ):

        self._best_block_assignment = None
        self._best_block_conn = None

        self.block_data = initial_blocks

        self.rng = rng

        self.likelihood_calculator = LikelihoodCalculator(
            block_data=self.block_data,
            likelihood_type=likelihood_type
            )
        self.move_executor = NodeMover(
            block_data=self.block_data,
            )

        self.mcmc_algorithm = MCMCAlgorithm(
            block_data = self.block_data,
            likelihood_calculator = self.likelihood_calculator,
            change_proposer = {
                "swap": NodeSwapProposer(
                            block_data=self.block_data,
                            rng=self.rng,
                        )
                },
            rng = self.rng,
            log=log
        )

    def fit(self,
            num_iterations: int,
            min_block_size: int,
            initial_temperature: float,
            cooling_rate: float,
            max_blocks: Optional[int] = None,
            logger: Optional[CSVLogger] = None,
            ):

        self.mcmc_algorithm.fit(
            num_iterations=num_iterations,
            min_block_size=min_block_size,
            initial_temperature=initial_temperature,
            cooling_rate=cooling_rate,
            max_blocks=max_blocks,
            logger=logger,
        )

    def get_block_assignments(self, best:bool=True) -> Dict[int, int]:
        if best:
            return self.mcmc_algorithm._best_block_assignment
        else:
            return self.block_data.blocks
    
    def to_sbmfit(self, metadata: Optional[Dict] = None, best:bool=True) -> SBMFit:
        """ 
        Convert the fitted SBM model to an SBMFit object for serialization. 
        """
        if metadata is None:
            metadata = {}
        
        if best:
            blocks = self.mcmc_algorithm._best_block_assignment
            block_sizes = np.unique(list(blocks.values()), return_counts=True)[1].tolist()
            block_conn = self.mcmc_algorithm._best_block_conn
            ll = self.mcmc_algorithm.best_ll
        else:
            blocks = self.block_data.blocks
            block_sizes = list(self.block_data.block_sizes.values())
            block_conn = self.block_data.block_connectivity
            ll = self.mcmc_algorithm.current_ll

        return SBMFit(
            #blocks=blocks,
            block_sizes=block_sizes,
            block_conn=csr_array(block_conn),
            directed_graph=self.block_data.graph_data.directed,
            neg_loglike=ll,
            metadata=metadata
        )

================
File: src/sbm/node_mover.py
================
from typing import List, Tuple
import scipy.sparse as sp
import numpy as np
from sbm.block_data import BlockData, _BlockDataUpdater

from sbm.block_change_proposers import (
    ProposedValidChanges,
    EdgeDelta,
)

class NodeMover:
    """
    Class to move nodes between block assignment in the Stochastic Block Model (SBM).
    When performing a change, it updates the block sizes, connectivity matrix,
    block indices, and inverse block indices accordingly.
    All changes are performed in-place on the BlockData object by the _BlockDataUpdater.
    """
    def __init__(self, block_data: BlockData):
        self.block_data_updater = _BlockDataUpdater(block_data)

    def perform_change(self,
            proposed_changes: ProposedValidChanges,
            delta_e: EdgeDelta,
            ):
        """ 
        Change the block assignments of nodes according to the proposed change.
        Update:
        - block sizes
        - block connectivity matrix (edge counts between blocks)
        - block indices (node to block assignment)
        - inverse block indices (nodes in each block)

        Rely on increment_edge_count from BlockData to update edge counts.

        :param change: A list of tuples where each tuple contains a node and their new block.
        """

        (node_i, new_block_i), (node_j, new_block_j) = proposed_changes
        # update the block assignments, sizes, and memberships
        self.block_data_updater.move_node_to_block(node_i, new_block_i)
        self.block_data_updater.move_node_to_block(node_j, new_block_j)

        # update the edge counts between the blocks
        for (r, s), e_delta in delta_e.items():
            self.block_data_updater.increment_edge_count(r, s, e_delta)

================
File: src/sbm/sampling.py
================
""" 
Functions for sampling graph from SBM model
"""
from typing import List, Optional

import numpy as np
from scipy.sparse import csr_array
from sbm.graph_data import GraphData
from sbm.io import SBMFit

def sample_adjcency_matrix(
        block_sizes: List[int],
        block_connectivity: csr_array,
        directed: bool,
        rng: np.random.Generator
    ) -> csr_array:

    """
    Sample an adjacency matrix from a Stochastic Block Model (SBM) given block sizes and connectivity.    
    """
    adj = csr_array((sum(block_sizes), sum(block_sizes)), dtype=np.int8)

    # sample edges between blocks
    for r in range(len(block_sizes)):
        for s in range(r if not directed else 0, len(block_sizes)):
            e = block_connectivity[r, s]
            n = block_sizes[r] * block_sizes[s]

            if e < 0 or n < 0:
                raise ValueError(f"Invalid edge count {e} or possible pairs {n} for block pair ({r}, {s}).")
            if e > n:
                raise ValueError(f"Edge count {e} cannot be greater than possible pairs {n} for block pair ({r}, {s}).")

            # Sample edges
            if n > 0:
                sampled_edges = rng.choice(a=n, size=int(e), replace=False) # type: ignore

                row_indices = np.repeat(np.arange(block_sizes[r]), block_sizes[s])
                col_indices = np.tile(np.arange(block_sizes[s]), block_sizes[r])

                adj[row_indices[sampled_edges], col_indices[sampled_edges]] = 1

    return adj.tocsr()

def sample_sbm_graph(
            block_sizes: List[int],
            block_connectivity: csr_array,
            directed:bool,
            rng: np.random.Generator,
            metadata: Optional[dict] = None
    )->GraphData:
    """
    Sample a graph from a Stochastic Block Model (SBM) given block sizes and connectivity.
    :param block_sizes: List of sizes for each block.
    :param block_connectivity: Sparse matrix representing connectivity between blocks.
    :param directed: Whether the graph is directed or undirected.
    :param rng: Random number generator for reproducibility.
    :param metadata: Optional metadata to include in the graph data.

    :return: GraphData object containing the sampled graph.
    """

    if metadata is None:
        metadata = {}

    # Validate inputs
    if not isinstance(block_sizes, list) or not all(isinstance(size, int) for size in block_sizes):
        raise ValueError("block_sizes must be a list of integers.")
    if not isinstance(block_connectivity, csr_array):
        raise ValueError("block_connectivity must be a scipy.sparse.csr_array.")
    if len(block_sizes) != block_connectivity.shape[0] or len(block_sizes) != block_connectivity.shape[1]: #type: ignore
        raise ValueError("block_sizes length must match the dimensions of block_connectivity.")
    if not isinstance(directed, bool):
        raise ValueError("directed must be a boolean value.")
    if not isinstance(rng, np.random.Generator):
        raise ValueError("rng must be a numpy random Generator instance.")    

    adj = sample_adjcency_matrix(
        block_sizes=block_sizes,
        block_connectivity=block_connectivity,
        directed=directed,
        rng=rng
    )
    return GraphData(adjacency_matrix=adj, directed=directed)


def sample_sbm_graph_from_fit(sbm_fit: SBMFit, rng: np.random.Generator) -> GraphData:
    """
    Sample a graph from a Stochastic Block Model (SBM) fit.
    
    :param sbm_fit: SBMFit object containing block sizes and connectivity.
    :param rng: Random number generator for reproducibility.
    
    :return: GraphData object containing the sampled graph.
    """
    return sample_sbm_graph(
        block_sizes=sbm_fit.block_sizes,
        block_connectivity=sbm_fit.block_conn,
        directed=sbm_fit.directed_graph,
        rng=rng,
        metadata=sbm_fit.metadata
    )

================
File: src/tests/likelihood_test.py
================
# tests/test_likelihood.py
"""
End-to-end tests for the Bernoulli likelihood calculators.

 * We create a tiny 4-node undirected graph with two blocks.
 * We compare every Δℓ returned by the incremental code against the
   ground-truth global likelihood difference.
"""

from __future__ import annotations

from collections import Counter
from typing import Tuple, Dict

import numpy as np
import pytest
from scipy.sparse import csr_array

from sbm.likelihood import (
    compute_global_bernoulli_ll,
    LikelihoodCalculator
)

from sbm.block_data import BlockData
from sbm.graph_data import GraphData
from sbm.block_change_proposers import NodeSwapProposer 

##############################################################################
# Fixtures
##############################################################################


@pytest.fixture(scope="module")
def four_node_example() -> Tuple[BlockData, GraphData, Dict[int, int]]:
    """
    Graph:

        0──1   Block 0: {0,1}      Edges: (0,1)
        │  │   Block 1: {2,3}              (2,3)
        2──3                              (0,2) (1,3)

    The matrix is symmetrical (undirected, no loops).
    """
    adj = np.zeros((4, 4), dtype=int)
    edges = [(0, 1), (2, 3), (0, 2), (1, 3)]
    for u, v in edges:
        adj[u, v] = 1
        adj[v, u] = 1  # symmetric

    adjacency = csr_array(adj)
    blocks = {0: 0, 1: 0, 2: 1, 3: 1}  # Node to block mapping

    graph_data: GraphData = GraphData(adjacency_matrix=adjacency, directed=False)
    
    return BlockData(graph_data=graph_data, initial_blocks=blocks), graph_data, blocks


##############################################################################
# Tests
##############################################################################


def test_edge_counter(four_node_example):
    """`_compute_edge_counts_between_node_and_blocks` returns correct counts."""
    block_data, *_ = four_node_example
    change_proposer = NodeSwapProposer(block_data)

    counts = change_proposer._compute_edge_counts_between_node_and_blocks(node=0)
    # Node 0 is linked to node-1 (block-0) and node-2 (block-1) → {0:1, 1:1}
    assert counts == Counter({0: 1, 1: 1})


def test_swap_same_block_zero_delta(four_node_example):
    """
    Swapping two nodes that are *already* in the same block must leave the
    likelihood unchanged.
    """
    block_data, *_ = four_node_example
    swap_proposer = NodeSwapProposer(block_data)
    calc = LikelihoodCalculator(block_data)

    # attempt to swap nodes 0 and 2
    swap = [(0, block_data.blocks[1]), (1, block_data.blocks[0])]
    swap, delta_e, delta_n = swap_proposer.propose_change(swap)
    delta = calc.compute_delta_ll(delta_e=delta_e, delta_n=delta_n)

    assert delta == pytest.approx(0.0, abs=1e-6)


def test_delta_ll_matches_global_recompute(four_node_example):
    """
    delta ll from the incremental calculator must equal the brute-force recomputed
    likelihood difference after the swap (0 ↔ 2).
    """
    block_data_old, graph_data, blocks_old = four_node_example
    adjacency = graph_data.adjacency
    swap_proposer = NodeSwapProposer(block_data_old)
    calc = LikelihoodCalculator(block_data_old)

    # ---------- perform swap 0 ↔ 2 -----------------------------------------
    blocks_new = blocks_old.copy()
    blocks_new[0], blocks_new[2] = blocks_new[2], blocks_new[0]

    block_data_new = BlockData(
        graph_data=GraphData(adjacency_matrix=adjacency, directed=False),
        initial_blocks=blocks_new
    )

    ll_old = compute_global_bernoulli_ll(block_data_old)
    ll_new = compute_global_bernoulli_ll(block_data_new)
    expected_delta = ll_new - ll_old

    swap = [(0, block_data_old.blocks[2]), (2, block_data_old.blocks[0])]
    swap, delta_e, delta_n = swap_proposer.propose_change(swap)

    delta_calc = calc.compute_delta_ll(delta_e=delta_e, delta_n=delta_n)

    msg = (
        f"Failed on swap (0 ↔ 2) with blocks {blocks_old} → {blocks_new}\n"
        f"delta_e: {delta_e}\n"
    )

    assert delta_calc == pytest.approx(expected_delta, rel=1e-6, abs=1e-6), msg


def test_delta_edge_counts_consistency(four_node_example):
    """
    The raw `delta_e` returned by `_compute_delta_edge_counts_swap` should turn
    the old connectivity into the new one *exactly* on every affected (r,s).
    """
    block_data_old, graph_data, blocks_old = four_node_example
    adjacency = graph_data.adjacency
    swap_proposer = NodeSwapProposer(block_data_old)
    calc = LikelihoodCalculator(block_data_old)

    i, j = 0, 2  # the same swap as above
    proposed_changes = [(i, block_data_old.blocks[j]), (j, block_data_old.blocks[i])]
    delta_e = swap_proposer._compute_delta_edge_counts(
        proposed_changes= proposed_changes
    )

    conn_expected = block_data_old.block_connectivity.copy()
    for (r, s), de in delta_e.items():
        conn_expected[r, s] += de

    # Ground-truth connectivity after the swap
    blocks_new = blocks_old.copy()
    blocks_new[i], blocks_new[j] = blocks_new[j], blocks_new[i]
    block_data_new = BlockData(
        graph_data=GraphData(adjacency_matrix=adjacency, directed=False),
        initial_blocks=blocks_new
    )

    for (r, s), de in delta_e.items():
        assert (
            conn_expected[r, s] == block_data_new.block_connectivity[r, s]
        ), f"Mismatch on block pair ({r},{s})"

###################################################
### Randomized tests
###################################################

def _er_graph_csr(n: int, p: float, *, seed: int) -> csr_array:
    """Undirected G(n,p) without self-loops, returned as CSR matrix."""
    rng = np.random.default_rng(seed)
    upper = rng.random((n, n)) < p                           # boolean mask
    upper = np.triu(upper, k=1)                              # keep strict upper
    adj = upper | upper.T                                    # symmetrise
    return csr_array(adj.astype(np.int8))

def _random_equal_blocks(n: int, block_size: int, *, seed: int) -> dict[int, int]:
    """Random permutation of vertices into equal-size blocks."""
    rng = np.random.default_rng(seed)
    perm = rng.permutation(n)
    blocks: dict[int, int] = {}
    for b in range(n // block_size):
        for v in perm[b * block_size : (b + 1) * block_size]:
            blocks[v] = b
    return blocks

def _pick_two_different_blocks(rng: np.random.Generator, blocks: dict[int, int]):
    n = len(blocks)
    i = rng.choice(n, size=1)[0]
    j = rng.choice(n-1, size=1)[0]
    if j >= i:
        j += 1
    
    return i, j

def _single_swap_calc_vs_bruteforce(
    graph_data: GraphData,
    blocks: dict[int, int],
    rng: np.random.Generator,
    tol: float = 1e-6,
    experiment_index: int = 0
):
    """One random swap and check incremental delta ll against brute force."""
    # choose vertices in different blocks
    i, j = _pick_two_different_blocks(rng, blocks)

    # incremental path -------------------------------------------------
    block_data = BlockData(graph_data=graph_data, initial_blocks=blocks)
    swap_proposer = NodeSwapProposer(block_data)
    calc = LikelihoodCalculator(block_data)

    swap_instr = [(i, blocks[j]), (j, blocks[i])]
    _, delta_e, delta_n = swap_proposer.propose_change(swap_instr)

    delta_ll = calc.compute_delta_ll(delta_e=delta_e, delta_n=delta_n)

    # brute-force path -------------------------------------------------
    ll_before = compute_global_bernoulli_ll(block_data)

    new_blocks = blocks.copy()
    new_blocks[i], new_blocks[j] = new_blocks[j], new_blocks[i]

    block_data_after = BlockData(graph_data=graph_data, initial_blocks=new_blocks)
    ll_after = compute_global_bernoulli_ll(block_data_after)
    delta_brute = ll_after - ll_before


    # compute the delta_e in the brute-force way
    # only storing non-zero deltas in upper triangular matrix
    delta_e_brute = block_data_after.block_connectivity - block_data.block_connectivity
    delta_e_brute = {
        (r, s): de for (r, s), de in zip(
            np.argwhere(delta_e_brute != 0),
            delta_e_brute[delta_e_brute != 0]
        )
        if r <= s
    }

    # comparison and print informatino in case of failure
    msg = (
        f"Failed on experiment {experiment_index}"
        f"\nGraph: {graph_data.adjacency.toarray()}"
        f"\nBlocks: {blocks}"
        f"\nswap:         {i} <-> {j} (blocks {blocks[i]} <-> {blocks[j]})"
        f"\ndelta_e:   {delta_e}"
        f"\ndelta_e_brute:   {delta_e_brute}"
        f"\ndelta_inc:    {delta_ll:.12g}"
        f"\ndelta_brute:  {delta_brute:.12g}"
    )

    assert delta_ll == pytest.approx(delta_brute, rel=tol, abs=tol), msg

def test_delta_ll_random_swaps_er():
    """100 random swaps on independent ER-20 graph must all match brute force delta ll."""
    for index in range(100):
        n, p, b = 20, 0.1, 2

        rng = np.random.default_rng(1)

        adj = _er_graph_csr(n, p, seed=42)
        graph = GraphData(adjacency_matrix=adj, directed=False)

        blocks = _random_equal_blocks(n, block_size=b, seed=2)

        _single_swap_calc_vs_bruteforce(graph_data=graph,
                                        blocks=blocks,
                                        rng=rng,
                                        experiment_index=index,
                                        tol=1e-6
                                        )

================
File: src/tests/planted_partition_tests.py
================
# src/tests/test_regressions.py
"""
Targeted regression tests for issues uncovered in the planted‐partition script.

* size-1 blocks must not crash likelihood computation
* Δ-dicts must use *matrix indices*, not block-IDs
"""

import numpy as np
import pytest
from scipy.sparse import csr_array

from sbm.block_data import BlockData
from sbm.likelihood import compute_global_bernoulli_ll
from sbm.block_change_proposers import NodeSwapProposer
from sbm.block_data import BlockData
from sbm.graph_data import GraphData


# -------------------------------------------------------------------
# 1. size-1 diagonal must be ignored (or handled gracefully)
# -------------------------------------------------------------------
@pytest.mark.parametrize("singletons", [1, 3])
def test_singleton_blocks_allowed(singletons):
    """
    A partition containing blocks of size 1 must not raise or return NaN.
    """
    n = 6
    # make a path graph (any sparse graph works)
    rows = np.arange(n-1)
    cols = rows + 1
    data = np.ones(n-1, dtype=int)
    A = csr_array((data, (rows, cols)), shape=(n, n))
    A = A + A.T

    # put the first `singletons` nodes into their own blocks
    blocks = {v: v if v < singletons else singletons for v in range(n)}
    bd = BlockData(
        initial_blocks=blocks,
        graph_data=GraphData(adjacency_matrix=A, directed=False)
    )

    ll = compute_global_bernoulli_ll(bd)
    assert np.isfinite(ll), "likelihood should be finite even with size-1 blocks"


# -------------------------------------------------------------------
# 2. Δ-dicts must reference matrix indices, not block-IDs
# -------------------------------------------------------------------
def test_delta_keys_are_matrix_indices():
    """
    When block IDs are non-contiguous (e.g. {0,10}), the delta_e keys
    must still be *matrix indices* (0 or 1), otherwise the likelihood
    updater crashes with an IndexError.
    """
    # two blocks with ids 0 and 10, one edge across
    adj = csr_array([[0,1],[1,0]])
    blocks = {0: 0, 1: 10}
    bd = BlockData(
        initial_blocks=blocks,
        graph_data=GraphData(adjacency_matrix=adj, directed=False)
    )

    proposer = NodeSwapProposer(bd)
    swap = [(0, 10)]  # move node 0 to block 10 -> will create a singleton & trigger Δ
    _, delta_e, _ = proposer.propose_change(swap)

    # the only valid matrix indices are 0 and 1
    valid = {0,1}
    for (r, s) in delta_e:
        assert r in valid and s in valid, (
            "delta_e must use matrix indices (0..B-1), "
            "not raw block IDs"
        )

================
File: src/tests/test_change_proposer_and_mover.py
================
# src/tests/test_change_proposers_and_mover.py
"""
Unit-tests for
  • sbm.block_change_proposers           (helper + NodeSwapProposer)
  • sbm.node_mover                      (NodeMover)

All graphs are 4 undirected vertices:

    0──1   block 0 = {0,1}
    │  │
    2──3   block 1 = {2,3}

Edges: (0,1) (2,3)  plus two cross edges (0,2) (1,3).
"""

from __future__ import annotations

from collections import defaultdict
from typing import Dict, Tuple

import numpy as np
from numpy.typing import ArrayLike
import pytest
from scipy.sparse import csr_array

from sbm.graph_data import GraphData
from sbm.block_data import BlockData
from sbm.block_change_proposers import (
    _increment_delta_e,
    NodeSwapProposer,
    EdgeDelta,
    ProposedValidChanges,
)
from sbm.node_mover import NodeMover


###############################################################################
# helpers
###############################################################################
def _toy_graph() -> Tuple[csr_array, Dict[int, int]]:
    """Return 4×4 adjacency and initial {node: block} mapping."""
    adj = np.zeros((4, 4), dtype=int)
    edges = [(0, 1), (2, 3), (0, 2), (1, 3)]
    for u, v in edges:
        adj[u, v] = adj[v, u] = 1
    blocks = {0: 0, 1: 0, 2: 1, 3: 1}
    return csr_array(adj), blocks


def _brute_block_connectivity(adj: csr_array, blocks: Dict[int, int]) -> Dict[Tuple[int, int], int]:
    """Return upper-triangle edge counts between blocks."""
    rows, cols = adj.nonzero() # type: ignore
    bc = defaultdict(int)

    for u, v in zip(rows, cols, strict=False):
        if u >= v:  # count each undirected edge once
            continue
        a, b = blocks[u], blocks[v]
        r, s = (a, b) if a <= b else (b, a)
        bc[(r, s)] += 1
    return bc


###############################################################################
# tests for _increment_delta_e
###############################################################################
def test_increment_delta_e_uses_sorted_key() -> None:
    delta: EdgeDelta = defaultdict(int)
    _increment_delta_e(5, 3, 1, delta)          # block_i > block_j → key (1,3)
    assert (1, 3) in delta and (3, 1) not in delta, \
        f"Key mismatch: delta keys = {list(delta)}"


def test_increment_delta_e_overwrites_existing() -> None:
    delta: EdgeDelta = defaultdict(int)
    _increment_delta_e(1, 0, 2, delta)          # set to 1
    _increment_delta_e(3, 2, 0, delta)          # overwrite same pair
    assert delta[(0, 2)] == 3, \
        f"Value not overwritten, got {delta[(0, 2)]}, expected 3"


###############################################################################
# tests for NodeSwapProposer
###############################################################################
@pytest.fixture(scope="module")
def proposer() -> NodeSwapProposer:
    adj, blocks = _toy_graph()
    bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
    return NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))


def test_compute_delta_edge_counts_matches_brute(proposer: NodeSwapProposer) -> None:
    # swap vertices 0 (block 0) and 2 (block 1)
    changes: ProposedValidChanges = [(0, 1), (2, 0)]
    delta = proposer._compute_delta_edge_counts(changes)          # type: ignore

    before = _brute_block_connectivity(proposer.block_data.graph_data.adjacency,
                                       proposer.block_data.blocks)
    # build new blocks mapping
    new_blocks = proposer.block_data.blocks.copy()
    new_blocks[0], new_blocks[2] = new_blocks[2], new_blocks[0]
    after = _brute_block_connectivity(proposer.block_data.graph_data.adjacency,
                                      new_blocks)

    brute_delta = {k: after.get(k, 0) - before.get(k, 0) for k in set(after) | set(before)}
    assert delta == brute_delta, \
        f"\nexpected {brute_delta}\ngot      {delta}"


def test_propose_change_returns_expected_structure(proposer: NodeSwapProposer) -> None:
    changes = [(0, 1), (2, 0)]
    new_changes, delta_e, delta_n = proposer.propose_change(changes=changes)
    assert new_changes == changes, "proposer changed explicit instruction"
    assert all(isinstance(k, tuple) and len(k) == 2 for k in delta_e), "delta_e keys malformed"
    assert delta_n and set(delta_e) == set(delta_n), "delta_n missing / mismatched"


###############################################################################
# tests for NodeMover
###############################################################################
def test_node_mover_updates_blocks_and_sizes() -> None:
    adj, blocks = _toy_graph()
    bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
    mover = NodeMover(bd)

    changes = [(0, 1), (2, 0)]
    # reuse proposer to get correct delta_e
    prop = NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
    delta_e = prop._compute_delta_edge_counts(changes)            # type: ignore

    mover.perform_change(changes, delta_e)

    assert bd.blocks[0] == 1 and bd.blocks[2] == 0, \
        f"blocks not swapped: {bd.blocks}"
    assert bd.block_sizes[0] == 2 and bd.block_sizes[1] == 2, \
        f"block_sizes wrong: {bd.block_sizes}"


def test_node_mover_updates_connectivity() -> None:
    adj, blocks = _toy_graph()
    bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
    mover = NodeMover(bd)

    before = bd.block_connectivity.copy()
    changes = [(0, 1), (2, 0)]
    prop = NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
    delta_e = prop._compute_delta_edge_counts(changes)            # type: ignore
    mover.perform_change(changes, delta_e)

    # brute recompute
    after_brute = _brute_block_connectivity(bd.graph_data.adjacency, bd.blocks)
    # connectivity matrix stores both triangles → pick upper
    after_matrix = {(r, s): int(bd.block_connectivity[r, s]) #type: ignore
                    for r, s in after_brute}

    msg = (f"\nexpected connectivity {after_brute}"
           f"\nobserved  connectivity {after_matrix}"
           f"\ndelta_e applied        {delta_e}")
    assert after_matrix == after_brute, msg

================
File: src/tests/test_io.py
================
# tests/test_io.py
import json
from pathlib import Path

import numpy as np
import scipy.sparse as sp
from scipy.io import mmwrite
import networkx as nx
import pytest

from sbm.io import SBMFit, SBMWriter, GraphLoader


# ---------------------------------------------------------------------
# helpers
# ---------------------------------------------------------------------
def _simple_adj(undirected: bool = True) -> sp.csr_array:
    """
    3-node graph:
        0 — 1   and  (optionally) 1 → 2
    """
    rows, cols = [0, 1], [1, 0]            # 0–1 edge
    if not undirected:
        rows.append(1); cols.append(2)     # add 1→2 (makes it directed)
    data = np.ones(len(rows), dtype=np.int8)

    return sp.csr_array(sp.coo_matrix((data, (rows, cols)), shape=(3, 3)))


def _assert_same_csr(a: sp.csr_array, b: sp.csr_array):
    a.sort_indices()
    b.sort_indices()

    assert np.array_equal(a.data, b.data), f'Data arrays differ: {a.data} != {b.data}'
    assert np.array_equal(a.indices, b.indices), f'Indices differ: {a.indices} != {b.indices}'
    assert a.shape == b.shape, f'Shape differs: {a.shape} != {b.shape}'

# ---------------------------------------------------------------------
# 1. SBMWriter round-trip
# ---------------------------------------------------------------------
def test_sbmwriter_roundtrip(tmp_path: Path):
    # --- build a tiny SBMFit ----------------------------------------
    adj = _simple_adj()
    blocks = {0: 0, 1: 0, 2: 1}
    fit = SBMFit(
        blocks        = blocks,
        block_sizes   = [2, 1],
        block_conn    = sp.csr_array([[1, .2],[.2, .1]]),
        directed_graph= False,
        neg_loglike   = -12.34,
        metadata      = {"foo": "bar"},
    )

    # --- save & load ------------------------------------------------
    SBMWriter.save(tmp_path, fit)
    fit2 = SBMWriter.load(tmp_path)

    # basic checks
    assert fit2.blocks == blocks, f"Blocks do not match: {fit2.blocks} != {blocks}"
    assert fit2.block_sizes == [2, 1], f"Block sizes do not match: {fit2.block_sizes} != [2, 1]"
    _assert_same_csr(fit.block_conn, fit2.block_conn)
    assert fit2.neg_loglike == pytest.approx(fit.neg_loglike), "Negative log-likelihood does not match"
    assert fit2.metadata["foo"] == "bar", "Metadata does not match"

# ---------------------------------------------------------------------
# 2. GraphLoader built-in formats
# ---------------------------------------------------------------------
@pytest.mark.parametrize("undirected", [True, False])
def test_graphloader_npz(tmp_path: Path, undirected: bool):
    adj = _simple_adj(undirected)
    f = tmp_path / "g.npz"
    sp.save_npz(f, adj)
    g = GraphLoader.load(f)
    _assert_same_csr(adj, g.adjacency)
    assert g.directed == (not undirected)


def test_graphloader_edges(tmp_path: Path):
    # plain edge list (space-sep)
    f = tmp_path / "toy.edges"
    f.write_text("0 1\n1 2\n")  # unsymmetrised → directed
    g = GraphLoader.load(f)
    assert g.directed
    assert g.num_nodes == 3
    assert g.adjacency[1, 2] == 1


def test_graphloader_mtx(tmp_path: Path):
    adj = _simple_adj()
    f = tmp_path / "toy.mtx"
    mmwrite(str(f), adj)
    g = GraphLoader.load(f)
    _assert_same_csr(adj, g.adjacency)
    assert not g.directed


def test_graphloader_gml(tmp_path: Path):
    # build with networkx
    G = nx.Graph()
    G.add_edge(0, 1); G.add_edge(1, 2)
    f = tmp_path / "toy.gml"
    nx.write_gml(G, f)
    g = GraphLoader.load(f)
    assert not g.directed
    assert g.adjacency.nnz == 4      # undirected ⇒ 2 edges ×2


# ---------------------------------------------------------------------
# 3. Registry decorator sanity check
# ---------------------------------------------------------------------
def test_register_new_loader(tmp_path: Path):
    # create a fake extension ".foo"
    ext = ".foo"

    @GraphLoader.register(ext)
    def _load_foo(path: Path):
        # loader that ignores content, returns 2-node edge
        rows, cols = [0], [1]
        adj = sp.coo_matrix((np.ones(1, int), (rows, cols)), shape=(2, 2)).tocsr()
        return adj, True

    # create dummy file and load
    f = tmp_path / f"dummy{ext}"
    f.write_text("ignored")
    g = GraphLoader.load(f)
    assert g.directed
    assert g.adjacency[0, 1] == 1
    assert f.suffix.lower() in GraphLoader.registry

================
File: src/tests/test_metrics.py
================
import numpy as np, scipy.sparse as sp
from scipy.sparse import csr_array
from metrics import (
    shortest_path_distance,
    degree_distance,
    clustering_distance
)
### Helper functions to create graphs
def _line_graph(n=6) -> csr_array:
    rows = np.arange(n-1); cols = rows + 1
    A = sp.coo_matrix((np.ones(n-1), (rows, cols)), shape=(n, n))
    A = A + A.T
    A = csr_array(A, dtype=np.int8)
    return A

def _er_graph(n: int=10, p: float=0.1, *, seed: int=1) -> csr_array:
    """Undirected G(n,p) without self-loops, returned as CSR matrix."""
    rng = np.random.default_rng(seed)
    upper = rng.random((n, n)) < p                           # boolean mask
    upper = np.triu(upper, k=1)                              # keep strict upper
    adj = upper | upper.T                                    # symmetrise
    return csr_array(adj.astype(np.int8))

#### test functions
def test_shortest_path_identical_line():
    A = _line_graph()
    assert shortest_path_distance(A, A) == 0.0

def test_degree_identical_line():
    A = _line_graph()
    assert degree_distance(A, A) == 0.0

def test_clustering_identical_line():
    A = _line_graph()
    assert clustering_distance(A, A) == 0.0

def test_shortest_path_different_line():
    A = _line_graph(n=20)
    B = _line_graph(n=200)

    assert shortest_path_distance(A, B, n_samples=100) != 0.0

def test_degree_different_line():
    A = _line_graph(n=20)
    A = _line_graph(n=200)
    assert degree_distance(A, A) == 0.0

def test_clustering_identical_er():
    A = _er_graph(n=100)
    assert clustering_distance(A, A) == 0.0

def test_shortest_path_identical_er():
    A = _er_graph(p=0.9)
    assert shortest_path_distance(A, A) == 0.0

def test_shortest_path_different_er():
    A = _er_graph(n=20, p=0.9)
    B = _er_graph(n=200, p=0.1)

    assert shortest_path_distance(A, B, n_samples=100) != 0.0

def test_degree_different_er():
    A = _er_graph()
    assert degree_distance(A, A) == 0.0

def test_clustering_different_er():
    A = _er_graph()
    assert clustering_distance(A, A) == 0.0

================
File: pyproject.toml
================
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

================
File: setup.cfg
================
[metadata]
name = anon-sbm
version = 0.1.0
author = Lasse Mohr
author_email = lmmi@dtu.dk
description = Package for SBM with minimum group-size constraints
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/your-repo-url
classifiers =
    Programming Language :: Python :: 3
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent

[options]
package_dir =
    =src
packages = find:
python_requires = >=3.7
install_requires =
    numpy
    scipy

[options.packages.find]
where = src

================
File: notebooks/likelihood_test.ipynb
================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.sparse as sp\n",
    "from sbm.sbm import StochasticBlockModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_nodes = 1000\n",
    "block_size = 50\n",
    "# Generate a random sparse adjacency matrix\n",
    "adjacency = sp.random(num_nodes, num_nodes, density=0.01, format='csr')\n",
    "adjacency = adjacency + adjacency.T  # Make it symmetric\n",
    "adjacency.data = np.ones_like(adjacency.data)  # Unweighted graph\n",
    "\n",
    "# Create an initial uniform random partition\n",
    "initial_blocks = StochasticBlockModel.create_uniform_partition(num_nodes, block_size)\n",
    "\n",
    "# Initialize the SBM\n",
    "sbm = StochasticBlockModel(adjacency, initial_blocks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Likelihood: -110207.47925966672\n"
     ]
    }
   ],
   "source": [
    "# Compute the initial likelihood\n",
    "initial_likelihood = sbm.compute_likelihood()\n",
    "print(f\"Initial Likelihood: {initial_likelihood}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n"
     ]
    }
   ],
   "source": [
    "block_0 = sbm.block_members[0]\n",
    "sbm.split_block(0)\n",
    "\n",
    "test = [elem in block_0 for elem in sbm.block_members[0]]\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n"
     ]
    }
   ],
   "source": [
    "block_1, block_2 = sbm.block_members[1], sbm.block_members[2]\n",
    "\n",
    "sbm.merge_blocks(1, 2)\n",
    "\n",
    "test = [elem in sbm.block_members[1] for elem in block_1] + [elem in sbm.block_members[1] for elem in block_2]\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "sbm.split_block(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 26])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sbm.block_members.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3: [361,\n",
       "  569,\n",
       "  298,\n",
       "  110,\n",
       "  288,\n",
       "  972,\n",
       "  595,\n",
       "  10,\n",
       "  67,\n",
       "  436,\n",
       "  281,\n",
       "  52,\n",
       "  476,\n",
       "  791,\n",
       "  760,\n",
       "  388,\n",
       "  926,\n",
       "  928,\n",
       "  45,\n",
       "  40,\n",
       "  393,\n",
       "  474,\n",
       "  237,\n",
       "  226,\n",
       "  814,\n",
       "  447,\n",
       "  884,\n",
       "  833,\n",
       "  62,\n",
       "  834,\n",
       "  387,\n",
       "  448,\n",
       "  788,\n",
       "  179,\n",
       "  801,\n",
       "  318,\n",
       "  64,\n",
       "  629,\n",
       "  968,\n",
       "  911,\n",
       "  568,\n",
       "  450,\n",
       "  735,\n",
       "  1,\n",
       "  410,\n",
       "  30,\n",
       "  389,\n",
       "  215,\n",
       "  478,\n",
       "  319],\n",
       " 4: [202,\n",
       "  787,\n",
       "  255,\n",
       "  502,\n",
       "  242,\n",
       "  827,\n",
       "  402,\n",
       "  256,\n",
       "  584,\n",
       "  547,\n",
       "  579,\n",
       "  739,\n",
       "  282,\n",
       "  697,\n",
       "  135,\n",
       "  342,\n",
       "  636,\n",
       "  377,\n",
       "  118,\n",
       "  722,\n",
       "  915,\n",
       "  685,\n",
       "  397,\n",
       "  341,\n",
       "  416,\n",
       "  612,\n",
       "  491,\n",
       "  392,\n",
       "  941,\n",
       "  668,\n",
       "  148,\n",
       "  370,\n",
       "  247,\n",
       "  734,\n",
       "  991,\n",
       "  619,\n",
       "  262,\n",
       "  351,\n",
       "  628,\n",
       "  864,\n",
       "  337,\n",
       "  845,\n",
       "  752,\n",
       "  244,\n",
       "  903,\n",
       "  606,\n",
       "  269,\n",
       "  898,\n",
       "  780,\n",
       "  716],\n",
       " 5: [352,\n",
       "  210,\n",
       "  473,\n",
       "  807,\n",
       "  676,\n",
       "  353,\n",
       "  534,\n",
       "  813,\n",
       "  88,\n",
       "  58,\n",
       "  198,\n",
       "  715,\n",
       "  519,\n",
       "  945,\n",
       "  264,\n",
       "  357,\n",
       "  53,\n",
       "  934,\n",
       "  877,\n",
       "  217,\n",
       "  437,\n",
       "  653,\n",
       "  746,\n",
       "  737,\n",
       "  461,\n",
       "  953,\n",
       "  458,\n",
       "  346,\n",
       "  414,\n",
       "  329,\n",
       "  902,\n",
       "  106,\n",
       "  295,\n",
       "  695,\n",
       "  480,\n",
       "  994,\n",
       "  206,\n",
       "  592,\n",
       "  44,\n",
       "  171,\n",
       "  876,\n",
       "  105,\n",
       "  758,\n",
       "  57,\n",
       "  128,\n",
       "  7,\n",
       "  811,\n",
       "  145,\n",
       "  985,\n",
       "  977],\n",
       " 6: [229,\n",
       "  394,\n",
       "  656,\n",
       "  744,\n",
       "  935,\n",
       "  333,\n",
       "  407,\n",
       "  736,\n",
       "  546,\n",
       "  553,\n",
       "  221,\n",
       "  982,\n",
       "  914,\n",
       "  101,\n",
       "  230,\n",
       "  406,\n",
       "  872,\n",
       "  266,\n",
       "  285,\n",
       "  325,\n",
       "  582,\n",
       "  562,\n",
       "  222,\n",
       "  924,\n",
       "  78,\n",
       "  970,\n",
       "  899,\n",
       "  729,\n",
       "  869,\n",
       "  77,\n",
       "  908,\n",
       "  510,\n",
       "  713,\n",
       "  9,\n",
       "  593,\n",
       "  279,\n",
       "  429,\n",
       "  721,\n",
       "  933,\n",
       "  860,\n",
       "  375,\n",
       "  334,\n",
       "  750,\n",
       "  849,\n",
       "  524,\n",
       "  225,\n",
       "  241,\n",
       "  803,\n",
       "  759,\n",
       "  669],\n",
       " 7: [92,\n",
       "  196,\n",
       "  770,\n",
       "  530,\n",
       "  740,\n",
       "  189,\n",
       "  777,\n",
       "  699,\n",
       "  144,\n",
       "  463,\n",
       "  404,\n",
       "  270,\n",
       "  890,\n",
       "  320,\n",
       "  315,\n",
       "  403,\n",
       "  310,\n",
       "  350,\n",
       "  802,\n",
       "  293,\n",
       "  29,\n",
       "  587,\n",
       "  846,\n",
       "  852,\n",
       "  86,\n",
       "  453,\n",
       "  523,\n",
       "  249,\n",
       "  939,\n",
       "  34,\n",
       "  912,\n",
       "  0,\n",
       "  776,\n",
       "  812,\n",
       "  340,\n",
       "  512,\n",
       "  187,\n",
       "  672,\n",
       "  677,\n",
       "  190,\n",
       "  878,\n",
       "  893,\n",
       "  605,\n",
       "  411,\n",
       "  228,\n",
       "  665,\n",
       "  751,\n",
       "  439,\n",
       "  5,\n",
       "  844],\n",
       " 8: [795,\n",
       "  943,\n",
       "  212,\n",
       "  978,\n",
       "  347,\n",
       "  71,\n",
       "  48,\n",
       "  292,\n",
       "  155,\n",
       "  608,\n",
       "  997,\n",
       "  576,\n",
       "  449,\n",
       "  990,\n",
       "  36,\n",
       "  895,\n",
       "  979,\n",
       "  778,\n",
       "  154,\n",
       "  494,\n",
       "  529,\n",
       "  542,\n",
       "  303,\n",
       "  560,\n",
       "  471,\n",
       "  385,\n",
       "  901,\n",
       "  124,\n",
       "  180,\n",
       "  850,\n",
       "  631,\n",
       "  769,\n",
       "  137,\n",
       "  462,\n",
       "  307,\n",
       "  263,\n",
       "  89,\n",
       "  805,\n",
       "  428,\n",
       "  424,\n",
       "  892,\n",
       "  390,\n",
       "  63,\n",
       "  19,\n",
       "  782,\n",
       "  267,\n",
       "  917,\n",
       "  773,\n",
       "  465,\n",
       "  842],\n",
       " 9: [76,\n",
       "  733,\n",
       "  49,\n",
       "  43,\n",
       "  614,\n",
       "  885,\n",
       "  618,\n",
       "  164,\n",
       "  423,\n",
       "  117,\n",
       "  516,\n",
       "  565,\n",
       "  166,\n",
       "  771,\n",
       "  717,\n",
       "  859,\n",
       "  691,\n",
       "  159,\n",
       "  495,\n",
       "  153,\n",
       "  678,\n",
       "  227,\n",
       "  692,\n",
       "  981,\n",
       "  181,\n",
       "  857,\n",
       "  126,\n",
       "  950,\n",
       "  55,\n",
       "  622,\n",
       "  129,\n",
       "  731,\n",
       "  554,\n",
       "  556,\n",
       "  220,\n",
       "  162,\n",
       "  238,\n",
       "  925,\n",
       "  309,\n",
       "  662,\n",
       "  673,\n",
       "  831,\n",
       "  72,\n",
       "  107,\n",
       "  815,\n",
       "  514,\n",
       "  706,\n",
       "  847,\n",
       "  233,\n",
       "  467],\n",
       " 10: [308,\n",
       "  186,\n",
       "  489,\n",
       "  959,\n",
       "  658,\n",
       "  362,\n",
       "  223,\n",
       "  862,\n",
       "  659,\n",
       "  484,\n",
       "  536,\n",
       "  757,\n",
       "  969,\n",
       "  18,\n",
       "  825,\n",
       "  332,\n",
       "  306,\n",
       "  840,\n",
       "  660,\n",
       "  602,\n",
       "  684,\n",
       "  188,\n",
       "  613,\n",
       "  590,\n",
       "  820,\n",
       "  324,\n",
       "  443,\n",
       "  627,\n",
       "  586,\n",
       "  766,\n",
       "  69,\n",
       "  830,\n",
       "  942,\n",
       "  419,\n",
       "  798,\n",
       "  946,\n",
       "  65,\n",
       "  644,\n",
       "  79,\n",
       "  604,\n",
       "  121,\n",
       "  74,\n",
       "  971,\n",
       "  381,\n",
       "  81,\n",
       "  100,\n",
       "  932,\n",
       "  531,\n",
       "  232,\n",
       "  466],\n",
       " 11: [762,\n",
       "  355,\n",
       "  955,\n",
       "  451,\n",
       "  904,\n",
       "  109,\n",
       "  749,\n",
       "  621,\n",
       "  689,\n",
       "  231,\n",
       "  626,\n",
       "  305,\n",
       "  167,\n",
       "  98,\n",
       "  938,\n",
       "  37,\n",
       "  427,\n",
       "  284,\n",
       "  793,\n",
       "  958,\n",
       "  724,\n",
       "  312,\n",
       "  848,\n",
       "  415,\n",
       "  528,\n",
       "  867,\n",
       "  645,\n",
       "  158,\n",
       "  661,\n",
       "  954,\n",
       "  920,\n",
       "  354,\n",
       "  910,\n",
       "  59,\n",
       "  965,\n",
       "  208,\n",
       "  441,\n",
       "  358,\n",
       "  623,\n",
       "  54,\n",
       "  497,\n",
       "  966,\n",
       "  112,\n",
       "  125,\n",
       "  532,\n",
       "  379,\n",
       "  365,\n",
       "  138,\n",
       "  634,\n",
       "  214],\n",
       " 12: [797,\n",
       "  719,\n",
       "  975,\n",
       "  603,\n",
       "  540,\n",
       "  507,\n",
       "  610,\n",
       "  879,\n",
       "  870,\n",
       "  302,\n",
       "  594,\n",
       "  609,\n",
       "  574,\n",
       "  199,\n",
       "  693,\n",
       "  703,\n",
       "  666,\n",
       "  422,\n",
       "  278,\n",
       "  775,\n",
       "  219,\n",
       "  84,\n",
       "  654,\n",
       "  317,\n",
       "  321,\n",
       "  420,\n",
       "  17,\n",
       "  573,\n",
       "  843,\n",
       "  201,\n",
       "  525,\n",
       "  224,\n",
       "  816,\n",
       "  207,\n",
       "  783,\n",
       "  435,\n",
       "  725,\n",
       "  360,\n",
       "  518,\n",
       "  80,\n",
       "  561,\n",
       "  11,\n",
       "  948,\n",
       "  694,\n",
       "  493,\n",
       "  103,\n",
       "  923,\n",
       "  70,\n",
       "  268,\n",
       "  290],\n",
       " 13: [13,\n",
       "  989,\n",
       "  929,\n",
       "  374,\n",
       "  195,\n",
       "  236,\n",
       "  446,\n",
       "  39,\n",
       "  973,\n",
       "  625,\n",
       "  161,\n",
       "  630,\n",
       "  464,\n",
       "  682,\n",
       "  345,\n",
       "  768,\n",
       "  680,\n",
       "  549,\n",
       "  455,\n",
       "  192,\n",
       "  633,\n",
       "  23,\n",
       "  20,\n",
       "  883,\n",
       "  589,\n",
       "  533,\n",
       "  87,\n",
       "  475,\n",
       "  996,\n",
       "  947,\n",
       "  686,\n",
       "  283,\n",
       "  384,\n",
       "  376,\n",
       "  259,\n",
       "  323,\n",
       "  326,\n",
       "  274,\n",
       "  165,\n",
       "  398,\n",
       "  781,\n",
       "  747,\n",
       "  149,\n",
       "  838,\n",
       "  240,\n",
       "  598,\n",
       "  741,\n",
       "  204,\n",
       "  700,\n",
       "  457],\n",
       " 14: [301,\n",
       "  804,\n",
       "  964,\n",
       "  504,\n",
       "  616,\n",
       "  921,\n",
       "  409,\n",
       "  600,\n",
       "  413,\n",
       "  949,\n",
       "  819,\n",
       "  861,\n",
       "  291,\n",
       "  211,\n",
       "  75,\n",
       "  432,\n",
       "  425,\n",
       "  753,\n",
       "  772,\n",
       "  742,\n",
       "  82,\n",
       "  674,\n",
       "  643,\n",
       "  607,\n",
       "  765,\n",
       "  460,\n",
       "  500,\n",
       "  400,\n",
       "  889,\n",
       "  683,\n",
       "  940,\n",
       "  839,\n",
       "  513,\n",
       "  177,\n",
       "  408,\n",
       "  248,\n",
       "  790,\n",
       "  97,\n",
       "  131,\n",
       "  544,\n",
       "  234,\n",
       "  578,\n",
       "  250,\n",
       "  980,\n",
       "  873,\n",
       "  687,\n",
       "  42,\n",
       "  541,\n",
       "  710,\n",
       "  663],\n",
       " 15: [197,\n",
       "  380,\n",
       "  28,\n",
       "  728,\n",
       "  134,\n",
       "  254,\n",
       "  8,\n",
       "  566,\n",
       "  216,\n",
       "  962,\n",
       "  314,\n",
       "  277,\n",
       "  6,\n",
       "  708,\n",
       "  829,\n",
       "  796,\n",
       "  701,\n",
       "  515,\n",
       "  779,\n",
       "  114,\n",
       "  2,\n",
       "  368,\n",
       "  832,\n",
       "  287,\n",
       "  823,\n",
       "  763,\n",
       "  642,\n",
       "  243,\n",
       "  66,\n",
       "  15,\n",
       "  535,\n",
       "  272,\n",
       "  391,\n",
       "  548,\n",
       "  205,\n",
       "  983,\n",
       "  858,\n",
       "  808,\n",
       "  265,\n",
       "  720,\n",
       "  26,\n",
       "  327,\n",
       "  570,\n",
       "  709,\n",
       "  527,\n",
       "  789,\n",
       "  868,\n",
       "  581,\n",
       "  151,\n",
       "  421],\n",
       " 16: [647,\n",
       "  956,\n",
       "  111,\n",
       "  47,\n",
       "  418,\n",
       "  469,\n",
       "  937,\n",
       "  688,\n",
       "  356,\n",
       "  289,\n",
       "  615,\n",
       "  286,\n",
       "  170,\n",
       "  617,\n",
       "  511,\n",
       "  986,\n",
       "  313,\n",
       "  364,\n",
       "  896,\n",
       "  974,\n",
       "  119,\n",
       "  22,\n",
       "  133,\n",
       "  987,\n",
       "  163,\n",
       "  679,\n",
       "  431,\n",
       "  483,\n",
       "  550,\n",
       "  738,\n",
       "  517,\n",
       "  712,\n",
       "  818,\n",
       "  963,\n",
       "  897,\n",
       "  261,\n",
       "  564,\n",
       "  96,\n",
       "  539,\n",
       "  828,\n",
       "  863,\n",
       "  916,\n",
       "  41,\n",
       "  294,\n",
       "  132,\n",
       "  299,\n",
       "  652,\n",
       "  336,\n",
       "  718,\n",
       "  168],\n",
       " 17: [675,\n",
       "  73,\n",
       "  25,\n",
       "  276,\n",
       "  809,\n",
       "  386,\n",
       "  127,\n",
       "  257,\n",
       "  442,\n",
       "  331,\n",
       "  245,\n",
       "  417,\n",
       "  786,\n",
       "  572,\n",
       "  891,\n",
       "  995,\n",
       "  485,\n",
       "  113,\n",
       "  456,\n",
       "  841,\n",
       "  412,\n",
       "  152,\n",
       "  235,\n",
       "  481,\n",
       "  599,\n",
       "  338,\n",
       "  596,\n",
       "  646,\n",
       "  650,\n",
       "  824,\n",
       "  396,\n",
       "  330,\n",
       "  316,\n",
       "  24,\n",
       "  745,\n",
       "  454,\n",
       "  115,\n",
       "  707,\n",
       "  784,\n",
       "  61,\n",
       "  952,\n",
       "  508,\n",
       "  498,\n",
       "  184,\n",
       "  866,\n",
       "  213,\n",
       "  927,\n",
       "  150,\n",
       "  900,\n",
       "  558],\n",
       " 18: [648,\n",
       "  999,\n",
       "  624,\n",
       "  203,\n",
       "  146,\n",
       "  182,\n",
       "  585,\n",
       "  704,\n",
       "  906,\n",
       "  670,\n",
       "  482,\n",
       "  984,\n",
       "  785,\n",
       "  503,\n",
       "  486,\n",
       "  296,\n",
       "  239,\n",
       "  875,\n",
       "  252,\n",
       "  492,\n",
       "  537,\n",
       "  99,\n",
       "  335,\n",
       "  957,\n",
       "  200,\n",
       "  506,\n",
       "  108,\n",
       "  193,\n",
       "  588,\n",
       "  359,\n",
       "  657,\n",
       "  373,\n",
       "  94,\n",
       "  60,\n",
       "  960,\n",
       "  366,\n",
       "  14,\n",
       "  3,\n",
       "  810,\n",
       "  951,\n",
       "  583,\n",
       "  142,\n",
       "  761,\n",
       "  637,\n",
       "  505,\n",
       "  711,\n",
       "  339,\n",
       "  35,\n",
       "  851,\n",
       "  743],\n",
       " 19: [50,\n",
       "  349,\n",
       "  156,\n",
       "  853,\n",
       "  251,\n",
       "  620,\n",
       "  160,\n",
       "  822,\n",
       "  275,\n",
       "  4,\n",
       "  792,\n",
       "  767,\n",
       "  472,\n",
       "  577,\n",
       "  907,\n",
       "  580,\n",
       "  723,\n",
       "  611,\n",
       "  147,\n",
       "  992,\n",
       "  172,\n",
       "  998,\n",
       "  348,\n",
       "  521,\n",
       "  575,\n",
       "  21,\n",
       "  651,\n",
       "  854,\n",
       "  591,\n",
       "  176,\n",
       "  837,\n",
       "  918,\n",
       "  635,\n",
       "  571,\n",
       "  976,\n",
       "  56,\n",
       "  826,\n",
       "  174,\n",
       "  311,\n",
       "  271,\n",
       "  496,\n",
       "  913,\n",
       "  855,\n",
       "  557,\n",
       "  139,\n",
       "  209,\n",
       "  552,\n",
       "  369,\n",
       "  638,\n",
       "  218],\n",
       " 20: [748,\n",
       "  690,\n",
       "  545,\n",
       "  756,\n",
       "  95,\n",
       "  730,\n",
       "  649,\n",
       "  405,\n",
       "  526,\n",
       "  993,\n",
       "  130,\n",
       "  399,\n",
       "  426,\n",
       "  764,\n",
       "  300,\n",
       "  440,\n",
       "  477,\n",
       "  655,\n",
       "  85,\n",
       "  322,\n",
       "  452,\n",
       "  395,\n",
       "  304,\n",
       "  91,\n",
       "  490,\n",
       "  175,\n",
       "  83,\n",
       "  445,\n",
       "  835,\n",
       "  702,\n",
       "  931,\n",
       "  104,\n",
       "  726,\n",
       "  865,\n",
       "  178,\n",
       "  794,\n",
       "  522,\n",
       "  727,\n",
       "  640,\n",
       "  501,\n",
       "  698,\n",
       "  967,\n",
       "  988,\n",
       "  120,\n",
       "  434,\n",
       "  664,\n",
       "  641,\n",
       "  51,\n",
       "  886,\n",
       "  12,\n",
       "  433,\n",
       "  102,\n",
       "  122,\n",
       "  714,\n",
       "  32,\n",
       "  31,\n",
       "  371,\n",
       "  344,\n",
       "  157,\n",
       "  38,\n",
       "  922,\n",
       "  880,\n",
       "  16,\n",
       "  961,\n",
       "  930,\n",
       "  363,\n",
       "  136,\n",
       "  555,\n",
       "  909,\n",
       "  696,\n",
       "  559,\n",
       "  543,\n",
       "  667,\n",
       "  382,\n",
       "  191],\n",
       " 21: [567,\n",
       "  817,\n",
       "  383,\n",
       "  116,\n",
       "  68,\n",
       "  888,\n",
       "  944,\n",
       "  33,\n",
       "  401,\n",
       "  430,\n",
       "  881,\n",
       "  499,\n",
       "  260,\n",
       "  754,\n",
       "  372,\n",
       "  919,\n",
       "  185,\n",
       "  821,\n",
       "  905,\n",
       "  123,\n",
       "  732,\n",
       "  90,\n",
       "  273,\n",
       "  705,\n",
       "  871,\n",
       "  141,\n",
       "  551,\n",
       "  836,\n",
       "  671,\n",
       "  27,\n",
       "  93,\n",
       "  563,\n",
       "  936,\n",
       "  639,\n",
       "  488,\n",
       "  487,\n",
       "  328,\n",
       "  774],\n",
       " 22: [470,\n",
       "  258,\n",
       "  378,\n",
       "  509,\n",
       "  459,\n",
       "  887,\n",
       "  246,\n",
       "  520,\n",
       "  438,\n",
       "  601,\n",
       "  856,\n",
       "  343,\n",
       "  143,\n",
       "  280,\n",
       "  597,\n",
       "  140,\n",
       "  183,\n",
       "  444,\n",
       "  681],\n",
       " 23: [894, 538, 253, 468, 194, 367, 173, 632, 479],\n",
       " 24: [800, 46, 882, 799, 874],\n",
       " 25: [169, 806],\n",
       " 0: [297],\n",
       " 26: [755]}"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sbm.block_members"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "2",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[36], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Perform some partition manipulations\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43msbm\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmerge_blocks\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m sbm\u001b[38;5;241m.\u001b[39mmove_node(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m3\u001b[39m)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Compute the new likelihood\u001b[39;00m\n",
      "File \u001b[0;32m~/anon_sbm/src/sbm/sbm.py:159\u001b[0m, in \u001b[0;36mStochasticBlockModel.merge_blocks\u001b[0;34m(self, block_a, block_b)\u001b[0m\n\u001b[1;32m    157\u001b[0m new_block_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmin\u001b[39m(block_a, block_b)\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mblock_members[new_block_idx] \u001b[38;5;241m=\u001b[39m merged_nodes\n\u001b[0;32m--> 159\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mblock_members\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;28;43mmax\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mblock_a\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mblock_b\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;66;03m# Update blocks mapping\u001b[39;00m\n\u001b[1;32m    162\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m node \u001b[38;5;129;01min\u001b[39;00m merged_nodes:\n",
      "\u001b[0;31mKeyError\u001b[0m: 2"
     ]
    }
   ],
   "source": [
    "# Perform some partition manipulations\n",
    "sbm.merge_blocks(1, 2)\n",
    "sbm.move_node(10, 3)\n",
    "\n",
    "# Compute the new likelihood\n",
    "new_likelihood = sbm.compute_likelihood()\n",
    "print(f\"New Likelihood: {new_likelihood}\")\n",
    "\n",
    "# Check minimum block size\n",
    "min_size = sbm.min_block_size()\n",
    "print(f\"Minimum Block Size: {min_size}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anon_sbm",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

================
File: src/sbm/block_data.py
================
from typing import Dict, Set, Optional

from dataclasses import dataclass

import numpy as np
import scipy.sparse as sp
from sbm.graph_data import GraphData
from sbm.sampling import sample_sbm_graph

BlockConn = sp.dok_array 
BlockMembership = Dict[int, Set[int]]  # Block ID to set of node indices

class _BlockDataUpdater:
    """
    Helper class to update edge counts and possible pairs in the block data.
    This class is used to hide bookkeeping of handling directed vs undirected graphs.

    Parameters
    ----------
    bd : BlockData
    """
    def __init__(self, block_data: "BlockData"):
        self.block_data = block_data # B × B integer matrix
    
    # block memberships
    def move_node_to_block(self, node: int, block_id: int, update_sizes=True) -> None:
        # update block assignment
        self.block_data.blocks[node] = block_id # type: ignore

        # update block membersets
        if block_id not in self.block_data.block_members:
            self.block_data.block_members[block_id] = set()
        self.block_data.block_members[block_id].add(node)

        if update_sizes: 
            old_block = self.block_data.blocks[node] # type: ignore
            # update block sizes
            self.block_data.block_sizes[block_id] += 1
            self.block_data.block_sizes[old_block] -= 1

    # ----- edge counts --------------------------------------------------
    def increment_edge_count(self, idx_a: int, idx_b: int, e_delta: int) -> None:
        """ 
        Increment the edge count between two blocks.
        If the graph is undirected, increment both directions.

        e_delta can be negative to decrement the edge count.
        idx_a and idx_b are indices in the block_connectivity matrix.
        """

        self.block_data.block_connectivity[idx_a, idx_b] += e_delta

        if not self.block_data.directed and idx_a != idx_b:
            self.block_data.block_connectivity[idx_b, idx_a] += e_delta


class BlockData:
    """ 
    Class to store block data for the SBM.

    There are two ways to initialize this class:

    Attributes:
        graph_data: The graph data object.
        blocks: A dictionary mapping node indices to block indices.
        block_members: A dictionary mapping block indices to lists of node indices.
        block_sizes: A dictionary mapping block indices to the number of nodes in each block.
        directed: A boolean indicating whether the graph is directed or not.
        block_indices: A dictionary mapping block IDs to indices used in matrices.
        inverse_block_indices: A dictionary mapping indices used in matrices to block IDs.
        block_connectivity: A sparse matrix representing the block connectivity matrix.
    """

    def __init__(self,
                 block_membership: Dict[int, int],
                 graph_data: GraphData,
        ):

        self.block_updater = _BlockDataUpdater(self)

        self.graph_data = graph_data
        self.directed = graph_data.directed

        self.block_members = self._initialize_block_members()
        self.block_sizes = {block: len(nodes) for block, nodes in self.block_members.items()}

        self._update_block_indices()

        self.block_connectivity: BlockConn = self._compute_block_connectivity()
        self.blocks: Dict[int, int] = block_membership # Node to block mapping

        # Recompute block connectivity based on the new graph data
        self.block_connectivity = self._compute_block_connectivity()
        
    
    def increment_edge_count(self, block_a: int, block_b: int, e_delta: int) -> None:
        """ 
        Increment the edge count between two blocks.
        If the graph is undirected, increment both directions.

        e_delta can be negative to decrement the edge count.
        """
        idx_a = self.block_indices[block_a]
        idx_b = self.block_indices[block_b]
        self.block_updater.increment_edge_count(idx_a, idx_b, e_delta)
    
    def get_possible_pairs(self, block_idx_a: int, block_idx_b:int ) -> int:
        """ 
        Compute the possible number of edges between two blocks.
        """
        block_a = self.inverse_block_indices[block_idx_a]
        block_b = self.inverse_block_indices[block_idx_b]

        if block_a == block_b:
            # If the same block, return the number of pairs within the block
            return self.block_sizes[block_a] * (self.block_sizes[block_a] - 1) // 2

        # If different blocks, return the product of their sizes
        return self.block_sizes[block_a] * self.block_sizes[block_b]

    def _initialize_block_members(self) -> BlockMembership:
        """
        Initialize block members from the blocks mapping.

        :return: A dictionary mapping block indices to lists of node indices.
        """
        if self.blocks is None:
            raise ValueError("Blocks mapping is not provided to initialize block members.")

        block_members: BlockMembership = {}

        for node, block in self.blocks.items():
            if block not in block_members:
                block_members[block] = set()
            # Add node to the corresponding block
            block_members[block].add(node)

        return block_members

    def _update_block_indices(self):
        """
        Update mappings between block IDs and indices used in matrices.
        """
        # Sort block IDs to ensure consistent ordering
        sorted_block_ids = sorted(self.block_members.keys())
        self.block_indices = {
            block_id: idx for idx, block_id in enumerate(sorted_block_ids)
            }
        self.inverse_block_indices = {
            idx: block_id for block_id, idx in self.block_indices.items()
            }

    def _compute_block_connectivity(self) -> BlockConn:
        """
        Compute the block connectivity matrix.

        This matrix is a sparse matrix where the entry at (i, j) is number of edges 
        between block i and block j. If the graph is undirected, the matrix is symmetric.
        """

        if self.graph_data is None:
            raise ValueError("Graph data is not set. Cannot compute block connectivity.")
        if self.block_members is None:
            raise ValueError("Block members are not initialized. Cannot compute block connectivity.")
        
        num_blocks = len(self.block_members)
        self._update_block_indices()
        block_connectivity_dok = sp.dok_array((num_blocks, num_blocks), dtype=np.int64)

        if self.directed:
            raise ValueError("Block connectivity computation is not implemented for directed graphs.")
        else:
            for i_block_id, nodes_i in self.block_members.items():
                idx_i = self.block_indices[i_block_id]
                nodes_i = list(nodes_i)
                sub_adj_i = self.graph_data.adjacency[nodes_i]  # type: ignore

                for j_block_id, nodes_j in self.block_members.items():
                    idx_j = self.block_indices[j_block_id]
                    nodes_j = list(nodes_j)
                    # Sum of weights between block i and block j
                    weight = sub_adj_i[:, nodes_j].sum() # type: ignore

                    # If the blocks are the same, we only count pairs
                    if i_block_id == j_block_id:
                        weight = weight // 2

                    block_connectivity_dok[idx_i, idx_j] = weight

            return block_connectivity_dok

    def _remove_block_index(self, block_id: int):
        """
        Remove a block from block_indices and inverse_block_indices.

        Do not use directly, call remove_block instead.

        :param block_id: The block ID to remove.
        """
        idx = self.block_indices.pop(block_id)
        self.inverse_block_indices.pop(idx)

        # Adjust indices of remaining blocks
        for b_id, index in self.block_indices.items():
            if index > idx:
                self.block_indices[b_id] -= 1
                self.inverse_block_indices[self.block_indices[b_id]] = b_id

    def _remove_block_from_connectivity(self, block_id: int):
        """
        Remove the block's row and column from the block connectivity matrix.

        Do not use directly, call remove_block instead.

        :param block_id: The block ID to remove.
        """
        idx = self.block_indices[block_id]
        # Remove the row and column corresponding to idx

        slicable_array = self.block_connectivity.tocsr()
        non_slice_idx = np.arange(self.block_connectivity.shape[1]) != idx # type: ignore

        self.block_connectivity = slicable_array[:, non_slice_idx][non_slice_idx, :].todok()

    def remove_block(self, block_id: int):
        """
        Remove a block from the block data.
        Do not use directly, call remove_block instead.

        :param block_id: The block ID to remove.
        """
        del self.block_sizes[block_id]
        del self.block_members[block_id]
        self._remove_block_from_connectivity(block_id)
        self._remove_block_index(block_id)

    def _add_block_index(self, block_id: int):
        """
        Add a new block index for a new block.

        Do not use directly, call add_block instead.

        :param block_id: The block ID to add.
        """
        new_idx = len(self.block_indices)
        self.block_indices[block_id] = new_idx
        self.inverse_block_indices[new_idx] = block_id

    def _add_block_to_connectivity(self):
        """
        Add a new block to the block connectivity matrix.

        Do not use directly, call add_block instead.

        :param block_id: The block ID to add.
        """
        num_blocks = len(self.block_indices)
        connectivity_lil = sp.lil_matrix(self.block_connectivity)
        connectivity_lil.resize((num_blocks, num_blocks))
        self.block_connectivity = connectivity_lil.todok()
    
    def add_block(self, block_id: int, nodes=[]):
        """
        Add a new block to the block data.

        :param block_id: The block ID to add.
        """
        if self.blocks is None:
            raise ValueError("Blocks mapping is not initialized. Cannot add a block.")

        self.block_sizes[block_id] = len(nodes)
        self.block_members[block_id] = nodes
        for node in nodes:
            self.blocks[node] = block_id

        self._add_block_index(block_id)
        self._add_block_to_connectivity()

================
File: src/sbm/graph_data.py
================
from scipy.sparse import csr_array

class GraphData:
    def __init__(self, adjacency_matrix: csr_array, directed=False):
        if not isinstance(adjacency_matrix, csr_array):
            raise ValueError("Adjacency matrix must be a scipy.sparse.csr_array")

        self.adjacency = adjacency_matrix.astype(int)
        self.directed: bool= directed
        self.num_nodes = self.adjacency.shape[0] # type: ignore
        
        if directed:
            self.total_edges = int(self.adjacency.sum())
        else:
            self.total_edges = int(self.adjacency.sum() / 2)  # For undirected graphs
        
        def __len__(self):
            return self.num_nodes

================
File: src/sbm/initial_partition.py
================
import numpy as np
import scipy.sparse as sp
from scipy.sparse.linalg import eigsh
from typing import Dict, Optional
from sklearn.cluster import KMeans
from scipy.sparse import csr_matrix


class SpectralPartitioner:
    def __init__(self, adjacency: csr_matrix, seed: Optional[int] = None):
        """
        Initialize the SpectralPartitioner.

        :param adjacency: The adjacency matrix of the network (sparse CSR matrix).
        :param seed: Random seed for reproducibility.
        """
        self.adjacency: csr_matrix = adjacency.tocsr()
        self.num_nodes: int = self.adjacency.shape[0]
        self.rng = np.random.default_rng(seed)
        self.degree_vector = np.array(self.adjacency.sum(axis=1)).flatten()
        self.laplacian = self._compute_normalized_laplacian()

    def _compute_normalized_laplacian(self) -> csr_matrix:
        """
        Compute the normalized Laplacian matrix of the graph.

        :return: The normalized Laplacian matrix (sparse CSR matrix).
        """
        # Avoid division by zero
        with np.errstate(divide='ignore'):
            d_inv_sqrt = np.power(self.degree_vector, -0.5)
            d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.0

        D_inv_sqrt = sp.diags(d_inv_sqrt)
        L = sp.eye(self.num_nodes) - D_inv_sqrt @ self.adjacency @ D_inv_sqrt
        return L

    def partition(self, num_blocks: int) -> Dict[int, int]:
        """
        Partition the nodes into blocks using spectral clustering.

        :param num_blocks: The desired number of blocks.
        :return: A dictionary mapping node indices to block indices.
        """
        # Compute the first (num_blocks) eigenvectors of the normalized Laplacian
        # Use 'SM' to find eigenvalues closest to zero
        eigenvalues, eigenvectors = eigsh(
            self.laplacian, k=num_blocks, which='SM', tol=1e-6, maxiter=5000
        )

        # Normalize rows to unit length to improve clustering
        embedding = eigenvectors
        row_norms = np.linalg.norm(embedding, axis=1, keepdims=True)
        row_norms[row_norms == 0] = 1e-10  # Avoid division by zero
        embedding_normalized = embedding / row_norms

        # Use k-means clustering on the spectral embeddings
        kmeans = KMeans(n_clusters=num_blocks, random_state=self.rng.integers(1 << 32))
        labels = kmeans.fit_predict(embedding_normalized)

        # Map nodes to blocks
        blocks = {node: int(label) for node, label in enumerate(labels)}
        return blocks

================
File: src/sbm/likelihood.py
================
from typing import (
    Dict,
    Tuple,
    Literal,
)
import numpy as np
from sbm.block_data import BlockData
from sbm.block_change_proposers import (
    EdgeDelta,
    CombinationDelta,
)

#### aliases ######
LikelihoodType = Literal['bernoulli']

# Bernoulli functions
def _bernoulli_ll_block_pair(e: int, n: int, eps:float= 1e-6) -> float:
    """
    Profile log-likelihood for one block pair (constants dropped).
    e: number of edges between block pair.
    n: number of possible pairs between block pair.
    """
    if n <= 0:
        raise ValueError("Number of possible pairs (n) must be greater than 0.")
    if e == 0: # 0 · log 0 := 0   (limit)
        return 0.0
    
    # clip to avoid overflow in lo
    pos = max(e/n, eps)
    neg = max(1 - e/n, eps)
    
    return e * np.log(pos) - (n-e) * np.log(neg)

def _delta_ll_bernoulli_block_pair(
        e_old: int, e_new: int,
        n_old: int, n_new: int,
        eps: float = 1e-6
        ) -> float:
    """Δℓ for a single block pair.
    e_new: new number of edges between block pair.
    e_old: old number of edges between block pair.
    n_new: new number of possible pairs between block pair.
    n_old: old number of possible pairs between block pair.
    """

    new_ll = _bernoulli_ll_block_pair(e=e_new, n=n_new, eps=eps)
    old_ll = _bernoulli_ll_block_pair(e=e_old, n=n_old, eps=eps)

    return new_ll - old_ll

def compute_delta_ll_from_change_bernoulli(
        delta_e: Dict[Tuple[int, int], int],
        delta_n: Dict[Tuple[int, int], int],
        block_data: BlockData) -> float:
    """
    Incremental change in Bernoulli log-likelihood after a node-swap or move.
    Only the pairs present in `delta_e` or `delta_n` need to be visited.
    delta_e: changes in edge counts between affected blocks.
    delta_n: changes in possible pairs between affected blocks.
    block_data: BlockData object containing edge counts and possible pairs.

    :return: Tuple of (change in log-likelihood, edge counts changes of move delta).
    """
    assert set(delta_e.keys()) == set(delta_n.keys()), \
        "Changes in edge counts and possible edge counts should be passed between identical block set."
    upper_triangle_only = not block_data.directed

    delta_ll = 0.0
    for (r, s) in delta_e.keys() | delta_n.keys():
        if upper_triangle_only and s < r:
            continue
        e_old = int(block_data.block_connectivity[r, s]) # type: ignore
        n_old = block_data.get_possible_pairs(r, s)

        e_new = e_old + delta_e[r, s]
        n_new = n_old + delta_n[r, s]

        delta_ll += _delta_ll_bernoulli_block_pair(
            e_old=e_old,
            e_new=e_new,
            n_old=n_old,
            n_new=n_new
        )

    return delta_ll

def compute_global_bernoulli_ll(
        block_data: BlockData,
) -> float:
    """
    Compute the global log-likelihood of the SBM using Bernoulli likelihood.
    
    :param block_data: The BlockData object containing block connectivity and sizes.
    :param upper_triangle_only: If True, only compute for upper triangle of the connectivity matrix.
    :return: The global log-likelihood.
    """
    upper_triangle_only = not block_data.directed
    ll = 0.0
    for r in range(len(block_data.block_sizes)):

        # if block has less than 2 nodes, skip it: no possible pairs
        size_r = block_data.block_sizes[ block_data.inverse_block_indices[r] ]
        if size_r <= 1:
            continue 

        for s in range(r if upper_triangle_only else 0, len(block_data.block_sizes)):
            e = block_data.block_connectivity[r, s]
            n = block_data.get_possible_pairs(r, s)

            if e < 0 or n < 0:
                raise ValueError(f"Invalid edge count {e} or possible pairs {n} for block pair ({r}, {s}).")
            if e > n:
                raise ValueError(f"Edge count {e} cannot be greater than possible pairs {n} for block pair ({r}, {s}).")

            ll += _bernoulli_ll_block_pair(e, n) # type: ignore

    return ll

#### LikelihoodCalculator class ######
class LikelihoodCalculator:
    def __init__(self,
                 block_data: BlockData,
                 likelihood_type: LikelihoodType = 'bernoulli',
                 ):
        self.block_data = block_data

        self.likelihood_type: LikelihoodType = 'bernoulli'
        self.ll = self.compute_likelihood()

    def compute_likelihood(self) -> float:
        """
        Compute the likelihood of the network given the current partition.

        :return: The log-likelihood of the SBM.
        """
        if self.likelihood_type.lower() == 'bernoulli':
            return compute_global_bernoulli_ll(block_data=self.block_data)
        else:
            raise NotImplementedError("Only Bernoulli likelihood is implemented.")
 
    def _compute_delta_ll_from_changes(self,
                                       delta_e: Dict[Tuple[int, int], int],
                                       delta_n: Dict[Tuple[int, int], int],
    ) ->float:
        """
        efficeintly compute the change in log-likelihood from changes in edge counts and possible pairs.
    
        :param delta_e: Changes in edge counts between blocks.
        :param delta_n: Changes in possible pairs between blocks.
        :param total_edges: Total number of edges in the graph.
        :return: The change in log-likelihood.
        """
        if self.likelihood_type.lower() == 'bernoulli':
            return compute_delta_ll_from_change_bernoulli(
                delta_e=delta_e,
                delta_n=delta_n,
                block_data=self.block_data
            )
        else:
            raise NotImplementedError("Only Bernoulli likelihood is implemented.")

    def compute_delta_ll(self,
                        delta_e: EdgeDelta,
                        delta_n: CombinationDelta,
        ) -> float:
        """
        Compute the change in log-likelihood for a proposed swap of two nodes.

        :param proposed_moves: A list of tuples (node_i, node_j) representing the nodes to swap.
        :return: The change in log-likelihood.
        """
        return self._compute_delta_ll_from_changes(
            delta_e=delta_e,
            delta_n=delta_n
            )

================
File: src/sbm/mcmc.py
================
from typing import Optional, Tuple, Dict
import numpy as np

#from src.sbm.graph_data import GraphData
from sbm.block_data import BlockData
from sbm.likelihood import LikelihoodCalculator
from sbm.block_change_proposers import ChangeProposer
from sbm.node_mover import NodeMover
from sbm.utils.logger import CSVLogger

from sbm.block_change_proposers import ChangeProposer, ChangeProposerName

#### Aliases
ChangeProposerDict = Dict[ChangeProposerName, ChangeProposer] 

class MCMCAlgorithm:
    def __init__(self,
                 block_data: BlockData,
                 likelihood_calculator: LikelihoodCalculator,
                 change_proposer: ChangeProposerDict,
                 rng: np.random.Generator,
                 log: bool = True
                 ):
        self.move_probabilities = { "swap": 1 }

        self.block_data = block_data
        self.likelihood_calculator = likelihood_calculator
        self.change_proposers = change_proposer
        self.node_mover = NodeMover(block_data=block_data)
        self.rng = rng
        self.current_ll = self.likelihood_calculator.ll
        self.log = log # True if logging is enabled, False otherwise.

        # store the best block assignment and likelihood
        self._best_block_assignment = block_data.blocks.copy()
        self._best_block_conn = block_data.block_connectivity.copy()
        self.best_ll = self.likelihood_calculator.ll

    def fit(self,
            num_iterations: int,
            initial_temperature: float = 1,
            cooling_rate: float = 0.99,
            min_block_size: Optional[int] = None,
            max_blocks: Optional[int] = None,
            logger: Optional[CSVLogger] = None,    
        ) -> None:
        """
        Run the adaptive MCMC algorithm to fit the SBM to the network data.

        :param num_iterations: Total number of MCMC iterations to run.
        :param min_block_size: Minimum allowed size for any block.
        :param initial_temperature: Starting temperature for simulated annealing.
        :param cooling_rate: Rate at which temperature decreases.
        :param target_acceptance_rate: Desired acceptance rate for adaptive adjustments (default 25%).
        :param max_blocks: Optional maximum number of blocks allowed.
        """
        temperature = initial_temperature
        current_ll = self.likelihood_calculator.compute_likelihood()
        acceptance_rate = 0 # acceptance rate of moves between logging

        if logger:
            logger.log(0, current_ll, acceptance_rate, temperature)

        for iteration in range(1, num_iterations + 1):
            move_type = self._select_move_type()

            delta_ll, move_accepted = self._attempt_move(
                move_type=move_type,
                min_block_size=min_block_size,
                temperature=temperature,
                max_blocks=max_blocks
                )

            # update likelihood and best assignment so far
            if move_accepted :
                self.current_ll += delta_ll
                if logger:
                    acceptance_rate += 1

                if self.current_ll < self.best_ll:
                    self.best_ll = current_ll
                    self._best_block_assignment = self.block_data.blocks.copy()
                    self._best_block_conn = self.block_data.block_connectivity.copy()

            # Update temperature
            temperature = self._update_temperature(temperature, cooling_rate)

            # Log and adjust proposal probabilities every 100 iterations
            if logger and iteration % logger.log_every == 0:
                acceptance_rate = acceptance_rate / logger.log_every
                logger.log(iteration, self.current_ll, acceptance_rate, temperature)
                acceptance_rate = 0

    def _select_move_type(self) -> str:
        """
        Select a move type based on the current proposal probabilities.

        :return: The selected move type.
        """
        move_type = 'swap'
        return move_type

    def _attempt_move(self,
                      move_type: str,
                      temperature: float,
                      max_blocks: Optional[int] = None,
                      min_block_size: Optional[int] = None,
        ) -> Tuple[float, bool]:
        """
        Attempt a move of the specified type.

        :param move_type: The type of move to attempt ('swap').
        :param min_block_size: Minimum allowed size for any block.
        :param temperature: Current temperature for simulated annealing.
        :param max_blocks: Optional maximum number of blocks allowed.
        :return: Tuple of (delta_ll, move_accepted)
        """
        delta_ll, move_accepted = 0.0, False

        if move_type == 'swap':
            # Propose a swap of two nodes
            proposed_change, proposed_delta_e, proposed_delta_n = \
                self.change_proposers['swap'].propose_change()

            # Compute change in log-likelihood and accept/reject move
            delta_ll = self.likelihood_calculator.compute_delta_ll(
                delta_e=proposed_delta_e,
                delta_n=proposed_delta_n
                )

            move_accepted = self._accept_move(delta_ll, temperature)
            if move_accepted:
                self.node_mover.perform_change(proposed_change, proposed_delta_e)
        else:
            raise ValueError(f"Invalid move type: {move_type}. Only 'swap' is currently supported.")
        
        return delta_ll, move_accepted

    def _accept_move(self, delta_ll: float, temperature: float, eps:float=1e-6) -> bool:
        """
        Determine whether to accept a proposed move based on likelihood change and temperature.

        :param delta_ll: Change in log-likelihood resulting from the proposed move.
        :param temperature: Current temperature for simulated annealing.
        :return: True if move is accepted, False otherwise.
        """
        if delta_ll < 0:
            return True

        temperature = max(temperature, eps)  # Avoid division by zero
        z = min(delta_ll / temperature, 700) # clip to avoid overflow in exp

        return self.rng.uniform() > np.exp(z)

    def _update_temperature(self, current_temperature: float, cooling_rate: float) -> float:
        """
        Update the temperature according to the cooling schedule.

        :param current_temperature: The current temperature.
        :param cooling_rate: The cooling rate.
        :return: The updated temperature.
        """
        return current_temperature * cooling_rate

================
File: .gitignore
================
# --------------------------------------------------------------------
#  Python byte-code / build artefacts
# --------------------------------------------------------------------
__pycache__/
*.py[cod]
*.pyo
*.so
*.dylib
*.egg-info/
build/
dist/

# --------------------------------------------------------------------
#  Virtual-envs
# --------------------------------------------------------------------
.venv/
.env/
.mamba/
*.conda_env/

# --------------------------------------------------------------------
#  Data & model artefacts  (generated by pipeline)
# --------------------------------------------------------------------
data/raw/
data/interim/
data/processed/
models/
logs/
reports/
figures/

# allow a tiny toy graph or sample config if you deliberately commit it
!data/raw/README*
!data/raw/sample_*.*
!configs/**

# --------------------------------------------------------------------
#  Large numpy / scipy files anywhere but src/tests
# --------------------------------------------------------------------
*.npz
*.npy
*.pkl
*.h5
*.parquet

# --------------------------------------------------------------------
#  Jupyter checkpoints
# --------------------------------------------------------------------
.ipynb_checkpoints/

# --------------------------------------------------------------------
#  IDE / OS metadata
# --------------------------------------------------------------------
.idea/
.vscode/
*.swp
.DS_Store
Thumbs.db

# --------------------------------------------------------------------
#  Misc
# --------------------------------------------------------------------
*.bak
*.tmp

================
File: README.md
================
# anon_sbm




================================================================
End of Codebase
================================================================
