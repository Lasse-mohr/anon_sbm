This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: data/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.repomix/
  bundles.json
configs/
  sbm_fit_block_size_experiments.yml
  surrogate_eval.yml
notebooks/
  block_assigner_comparison_01-07-2025.ipynb
  convergence_figures_25-06-2025.ipynb
  likelihood_test.ipynb
  move_type_comparisons_30-06-2025.ipynb
  sbm_block_sizes_26-06-2025.ipynb
  sbm_visualize.ipynb
  surrogate_accuracy_26-06-2025.ipynb
planted_partitions/
  undirected_planted_partitions.py
slurm_scripts/
  fit_sbm.sh
src/
  data_processing/
    process_all.py
    process_caltech.py
    process_congress_twitter.py
    process_email_eu.py
    process_enron_email.py
    process_lastfm_asia.py
    process_wiki_vote.py
  metrics/
    __init__.py
    clustering.py
    degree.py
    shortest_path.py
  pipelines/
    evaluate_surrogates.py
    fit_sbm.py
    generate_and_evaluate_surrogates.py
    run_all.py
  sbm/
    utils/
      logger.py
      pipeline_utils.py
      util.py
    block_assigner.py
    block_change_proposers.py
    block_data.py
    edge_delta.py
    graph_data.py
    initial_partition.py
    io.py
    likelihood.py
    mcmc.py
    model.py
    node_mover.py
    sampling.py
    stopping_criteria.py
  tests/
    likelihood_test.py
    planted_partition_tests.py
    test_block_assigner.py
    test_change_proposer_and_mover.py
    test_edge_delta.py
    test_global_ll.py
    test_greedy_assign_helpers.py
    test_io.py
    test_metrics.py
    test_sampling.py
    test_swaps.py
.gitignore
env_backup.yml
pyproject.toml
README.md
requirements.txt
setup.cfg
tmp_test.py

================================================================
Files
================================================================

================
File: notebooks/block_assigner_comparison_01-07-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "03332c1a",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Notebook for comparing the quality of block-assignment strategies"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": 1,
 14:    "id": "ca236c42",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "from pathlib import Path\n",
 19:     "\n",
 20:     "import numpy as np\n",
 21:     "import pandas as pd\n",
 22:     "import scipy.sparse as sp\n",
 23:     "\n",
 24:     "from sbm.io import GraphLoader\n",
 25:     "from sbm.block_assigner import AssignerConstructor"
 26:    ]
 27:   },
 28:   {
 29:    "cell_type": "code",
 30:    "execution_count": 2,
 31:    "id": "75c16b11",
 32:    "metadata": {},
 33:    "outputs": [],
 34:    "source": [
 35:     "#g = GraphLoader.load(\n",
 36:     "#    Path(\"/Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist\"),\n",
 37:     "#    force_undirected=True, # type: ignore\n",
 38:     "#    )\n",
 39:     "g = GraphLoader.load(\n",
 40:     "    Path(\"/Users/lmmi/anon_sbm/data/processed/lastfm_asia.edgelist\"),\n",
 41:     "    force_undirected=True, # type: ignore\n",
 42:     "    )"
 43:    ]
 44:   },
 45:   {
 46:    "cell_type": "code",
 47:    "execution_count": null,
 48:    "id": "e54ed4ac",
 49:    "metadata": {},
 50:    "outputs": [],
 51:    "source": [
 52:     "rng = np.random.default_rng(1) # type: ignore\n",
 53:     "k = 10"
 54:    ]
 55:   },
 56:   {
 57:    "cell_type": "code",
 58:    "execution_count": 4,
 59:    "id": "e8d0bf40",
 60:    "metadata": {},
 61:    "outputs": [],
 62:    "source": [
 63:     "assigner_const = AssignerConstructor(rng=rng)\n",
 64:     "uniform_assigner = assigner_const.create_assigner(\n",
 65:     "    graph_data=g,\n",
 66:     "    min_block_size=k, # type: ignore\n",
 67:     "    init_method=\"uniform\", # type: ignore\n",
 68:     "    )\n",
 69:     "prone_assigner = assigner_const.create_assigner(\n",
 70:     "    graph_data=g,\n",
 71:     "    min_block_size=k, # type: ignore\n",
 72:     "    init_method=\"prone_and_kmeans\", # type: ignore\n",
 73:     "    )\n",
 74:     "metis_assigner = assigner_const.create_assigner(\n",
 75:     "    graph_data=g,\n",
 76:     "    min_block_size=k, # type: ignore\n",
 77:     "    init_method=\"metis\", # type: ignore\n",
 78:     "    )\n",
 79:     "metis_ref_assigner = assigner_const.create_assigner(\n",
 80:     "    graph_data=g,\n",
 81:     "    min_block_size=k, # type: ignore\n",
 82:     "    init_method=\"metis_refine\", # type: ignore\n",
 83:     "    )"
 84:    ]
 85:   },
 86:   {
 87:    "cell_type": "code",
 88:    "execution_count": 5,
 89:    "id": "6030cfba",
 90:    "metadata": {},
 91:    "outputs": [],
 92:    "source": [
 93:     "uniform_blocks = uniform_assigner.compute_assignment()\n",
 94:     "#prone_blocks = prone_assigner.compute_assignment()\n",
 95:     "metis_blocks = metis_assigner.compute_assignment()\n",
 96:     "metis_ref_blocks = metis_ref_assigner.compute_assignment()"
 97:    ]
 98:   },
 99:   {
100:    "cell_type": "code",
101:    "execution_count": 6,
102:    "id": "8b91f480",
103:    "metadata": {},
104:    "outputs": [
105:     {
106:      "name": "stdout",
107:      "output_type": "stream",
108:      "text": [
109:       "{10, 11}\n",
110:       "{10, 11}\n",
111:       "{10, 11}\n"
112:      ]
113:     }
114:    ],
115:    "source": [
116:     "print(set(uniform_blocks.block_sizes.values()))\n",
117:     "#print(set(prone_blocks.block_sizes.values()))\n",
118:     "print(set(metis_blocks.block_sizes.values()))\n",
119:     "print(set(metis_ref_blocks.block_sizes.values()))"
120:    ]
121:   },
122:   {
123:    "cell_type": "code",
124:    "execution_count": 7,
125:    "id": "399008f8",
126:    "metadata": {},
127:    "outputs": [
128:     {
129:      "name": "stdout",
130:      "output_type": "stream",
131:      "text": [
132:       "\n",
133:       "Small graph likelihood comparison:\n",
134:       "    Uniform assignment likelihood: -98355.50266169311\n",
135:       "    Metis assignment likelihood: -49418.540600798835\n",
136:       "    Metis-refine assignment likelihood: -49862.94430540358\n",
137:       "\n"
138:      ]
139:     }
140:    ],
141:    "source": [
142:     "# compute likelihood of the assignments\n",
143:     "from sbm.likelihood import compute_global_bernoulli_ll_fast\n",
144:     "\n",
145:     "uniform_ll = compute_global_bernoulli_ll_fast(uniform_blocks)\n",
146:     "#prone_ll = compute_global_bernoulli_ll_fast(prone_blocks)\n",
147:     "metis_ll = compute_global_bernoulli_ll_fast(metis_blocks)\n",
148:     "metis_ref_ll = compute_global_bernoulli_ll_fast(metis_ref_blocks)\n",
149:     "\n",
150:     "print(f\"\"\"\n",
151:     "Small graph likelihood comparison:\n",
152:     "    Uniform assignment likelihood: {uniform_ll}\n",
153:     "    Metis assignment likelihood: {metis_ll}\n",
154:     "    Metis-refine assignment likelihood: {metis_ref_ll}\n",
155:     "\"\"\")"
156:    ]
157:   },
158:   {
159:    "cell_type": "code",
160:    "execution_count": null,
161:    "id": "f3633444",
162:    "metadata": {},
163:    "outputs": [],
164:    "source": []
165:   },
166:   {
167:    "cell_type": "code",
168:    "execution_count": null,
169:    "id": "f2c3d8e0",
170:    "metadata": {},
171:    "outputs": [],
172:    "source": []
173:   }
174:  ],
175:  "metadata": {
176:   "kernelspec": {
177:    "display_name": "Python 3",
178:    "language": "python",
179:    "name": "python3"
180:   },
181:   "language_info": {
182:    "codemirror_mode": {
183:     "name": "ipython",
184:     "version": 3
185:    },
186:    "file_extension": ".py",
187:    "mimetype": "text/x-python",
188:    "name": "python",
189:    "nbconvert_exporter": "python",
190:    "pygments_lexer": "ipython3",
191:    "version": "3.12.11"
192:   }
193:  },
194:  "nbformat": 4,
195:  "nbformat_minor": 5
196: }

================
File: notebooks/move_type_comparisons_30-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "code",
  5:    "execution_count": 1,
  6:    "id": "0c56f619",
  7:    "metadata": {},
  8:    "outputs": [],
  9:    "source": [
 10:     "# Notebook for comparing move-types and their resulting likelihood trajectories"
 11:    ]
 12:   },
 13:   {
 14:    "cell_type": "code",
 15:    "execution_count": 2,
 16:    "id": "ca236c42",
 17:    "metadata": {},
 18:    "outputs": [],
 19:    "source": [
 20:     "from pathlib import Path\n",
 21:     "\n",
 22:     "import numpy as np\n",
 23:     "import pandas as pd\n",
 24:     "import scipy.sparse as sp\n",
 25:     "\n",
 26:     "from sbm.io import GraphLoader\n",
 27:     "from sbm.block_assigner import AssignerConstructor\n",
 28:     "from sbm.model import SBMModel\n",
 29:     "\n",
 30:     "from sbm.utils.pipeline_utils import (\n",
 31:     "    sbmfit_folderpath,\n",
 32:     "    FitConfig,\n",
 33:     ")"
 34:    ]
 35:   },
 36:   {
 37:    "cell_type": "code",
 38:    "execution_count": 3,
 39:    "id": "75c16b11",
 40:    "metadata": {},
 41:    "outputs": [],
 42:    "source": [
 43:     "g = GraphLoader.load(\n",
 44:     "    Path(\"/Users/lmmi/anon_sbm/data/processed/congress_twitter.edgelist\"),\n",
 45:     "    force_undirected=True, # type: ignore\n",
 46:     "    )"
 47:    ]
 48:   },
 49:   {
 50:    "cell_type": "code",
 51:    "execution_count": 4,
 52:    "id": "e54ed4ac",
 53:    "metadata": {},
 54:    "outputs": [],
 55:    "source": [
 56:     "rng = np.random.default_rng(1) # type: ignore"
 57:    ]
 58:   },
 59:   {
 60:    "cell_type": "code",
 61:    "execution_count": null,
 62:    "id": "e8d0bf40",
 63:    "metadata": {},
 64:    "outputs": [
 65:     {
 66:      "name": "stdout",
 67:      "output_type": "stream",
 68:      "text": [
 69:       "ProNE embedding took 0.14 seconds for 475 nodes.\n",
 70:       "KMeans with constraints took 0.60 seconds for 475 nodes.\n"
 71:      ]
 72:     }
 73:    ],
 74:    "source": [
 75:     "assigner_const = AssignerConstructor(rng=rng)\n",
 76:     "assigner = assigner_const.create_assigner(\n",
 77:     "    graph_data=g,\n",
 78:     "    min_block_size=5, # type: ignore\n",
 79:     "    init_method=\"uniform\", # type: ignore\n",
 80:     "    )\n",
 81:     "\n",
 82:     "block_data = assigner.compute_assignment()"
 83:    ]
 84:   },
 85:   {
 86:    "cell_type": "code",
 87:    "execution_count": 6,
 88:    "id": "51e49a44",
 89:    "metadata": {},
 90:    "outputs": [],
 91:    "source": [
 92:     "uniform_swap_model = SBMModel(\n",
 93:     "    initial_blocks=block_data,\n",
 94:     "    rng=rng,\n",
 95:     "    change_freq = { # probabilities of trying each move type\n",
 96:     "        \"uniform_swap\": 1,\n",
 97:     "    },\n",
 98:     ")\n",
 99:     "\n",
100:     "edge_swap_model = SBMModel(\n",
101:     "    initial_blocks=block_data,\n",
102:     "    rng=rng,\n",
103:     "    change_freq = { # probabilities of trying each move type\n",
104:     "    \"uniform_swap\": 0.8,\n",
105:     "    \"edge_based_swap\": 0.1,\n",
106:     "    \"triadic_swap\": 0.1,\n",
107:     "    },\n",
108:     ")\n",
109:     "triad_swap_model = SBMModel(\n",
110:     "    initial_blocks=block_data,\n",
111:     "    rng=rng,\n",
112:     "    change_freq = { # probabilities of trying each move type\n",
113:     "    \"triadic_swap\": 1.0,\n",
114:     "    },\n",
115:     ")"
116:    ]
117:   },
118:   {
119:    "cell_type": "code",
120:    "execution_count": 7,
121:    "id": "73af6cbf",
122:    "metadata": {},
123:    "outputs": [],
124:    "source": [
125:     "max_num_iterations = int(1e5)\n",
126:     "min_block_size = 5\n",
127:     "initial_temperature = 1.0\n",
128:     "cooling_rate = 0.999\n",
129:     "max_blocks = None\n",
130:     "patience  = int(1e3)\n",
131:     "return_ll = True"
132:    ]
133:   },
134:   {
135:    "cell_type": "code",
136:    "execution_count": 8,
137:    "id": "bced68cd",
138:    "metadata": {},
139:    "outputs": [
140:     {
141:      "name": "stdout",
142:      "output_type": "stream",
143:      "text": [
144:       "Stopping early after 27012 iterations due to patience limit.\n"
145:      ]
146:     }
147:    ],
148:    "source": [
149:     "uniform_ll = uniform_swap_model.fit(\n",
150:     "    max_num_iterations=max_num_iterations,\n",
151:     "    min_block_size=min_block_size,\n",
152:     "    initial_temperature=initial_temperature,\n",
153:     "    cooling_rate=cooling_rate,\n",
154:     "    max_blocks=max_blocks,\n",
155:     "    patience=patience,\n",
156:     "    return_ll=return_ll,\n",
157:     ")"
158:    ]
159:   },
160:   {
161:    "cell_type": "code",
162:    "execution_count": 9,
163:    "id": "76f33e97",
164:    "metadata": {},
165:    "outputs": [
166:     {
167:      "name": "stdout",
168:      "output_type": "stream",
169:      "text": [
170:       "Stopping early after 2345 iterations due to patience limit.\n"
171:      ]
172:     }
173:    ],
174:    "source": [
175:     "edge_ll = edge_swap_model.fit(\n",
176:     "    max_num_iterations=max_num_iterations,\n",
177:     "    min_block_size=min_block_size,\n",
178:     "    initial_temperature=initial_temperature,\n",
179:     "    cooling_rate=cooling_rate,\n",
180:     "    max_blocks=max_blocks,\n",
181:     "    patience=patience,\n",
182:     "    return_ll=return_ll,\n",
183:     ")"
184:    ]
185:   },
186:   {
187:    "cell_type": "code",
188:    "execution_count": 10,
189:    "id": "96b956a2",
190:    "metadata": {},
191:    "outputs": [
192:     {
193:      "name": "stdout",
194:      "output_type": "stream",
195:      "text": [
196:       "Stopping early after 3040 iterations due to patience limit.\n"
197:      ]
198:     }
199:    ],
200:    "source": [
201:     "triad_ll = triad_swap_model.fit(\n",
202:     "    max_num_iterations=max_num_iterations,\n",
203:     "    min_block_size=min_block_size,\n",
204:     "    initial_temperature=initial_temperature,\n",
205:     "    cooling_rate=cooling_rate,\n",
206:     "    max_blocks=max_blocks,\n",
207:     "    patience=patience,\n",
208:     "    return_ll=return_ll,\n",
209:     ")"
210:    ]
211:   },
212:   {
213:    "cell_type": "code",
214:    "execution_count": 11,
215:    "id": "6dc70577",
216:    "metadata": {},
217:    "outputs": [
218:     {
219:      "name": "stderr",
220:      "output_type": "stream",
221:      "text": [
222:       "/var/folders/y6/j9fbqcvx6lb5l99614n30y4c0000gn/T/ipykernel_29400/3143086871.py:12: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
223:       "  fig.show()\n"
224:      ]
225:     },
226:     {
227:      "data": {
228:       "image/png": "",
229:       "text/plain": [
230:        "<Figure size 800x600 with 1 Axes>"
231:       ]
232:      },
233:      "metadata": {},
234:      "output_type": "display_data"
235:     }
236:    ],
237:    "source": [
238:     "import matplotlib.pyplot as plt\n",
239:     "fig, ax = plt.subplots(figsize=(8,6))\n",
240:     "\n",
241:     "ax.plot(uniform_ll, label=\"Uniform Swap\", color=\"salmon\")\n",
242:     "ax.plot(edge_ll, label=\"Edge Swap\", color=\"teal\")\n",
243:     "ax.plot(triad_ll, label=\"Triadic Swap\", color=\"black\")\n",
244:     "\n",
245:     "ax.set_xlabel(\"Iteration\")\n",
246:     "ax.set_ylabel(\"Log Likelihood\")\n",
247:     "\n",
248:     "ax.legend()\n",
249:     "fig.show()"
250:    ]
251:   },
252:   {
253:    "cell_type": "code",
254:    "execution_count": null,
255:    "id": "6030cfba",
256:    "metadata": {},
257:    "outputs": [],
258:    "source": []
259:   }
260:  ],
261:  "metadata": {
262:   "kernelspec": {
263:    "display_name": "anon_sbm_notebook",
264:    "language": "python",
265:    "name": "python3"
266:   },
267:   "language_info": {
268:    "codemirror_mode": {
269:     "name": "ipython",
270:     "version": 3
271:    },
272:    "file_extension": ".py",
273:    "mimetype": "text/x-python",
274:    "name": "python",
275:    "nbconvert_exporter": "python",
276:    "pygments_lexer": "ipython3",
277:    "version": "3.12.11"
278:   }
279:  },
280:  "nbformat": 4,
281:  "nbformat_minor": 5
282: }

================
File: src/tests/test_global_ll.py
================
  1: """Tests that the *slow* and *fast* global Bernoulli log‑likelihood
  2: implementations are numerically identical on a variety of synthetic block
  3: partitions.
  4: We build *real* ``BlockData`` instances by constructing a synthetic graph
  5: (adjacency matrix) whose edge counts per block pair match a prescribed
  6: connectivity matrix.  This avoids touching the rest of the SBM pipeline
  7: while exercising exactly the code paths used by the likelihood routines.
  8: """
  9: from __future__ import annotations
 10: import random
 11: from typing import List, Sequence, Tuple
 12: import numpy as np
 13: import pytest
 14: import scipy.sparse as sp
 15: # ---------------------------------------------------------------------------
 16: # Functions under test
 17: # ---------------------------------------------------------------------------
 18: from sbm.likelihood import (
 19:     compute_global_bernoulli_ll,
 20:     compute_global_bernoulli_ll_fast,
 21: )
 22: from sbm.graph_data import GraphData
 23: # ---------------------------------------------------------------------------
 24: # Utility to create a BlockData instance whose *block_connectivity* matches a
 25: # given integer matrix ``conn`` (undirected only, because BlockData does not
 26: # implement the directed path).
 27: # ---------------------------------------------------------------------------
 28: try:
 29:     from sbm.block_data import BlockData  # type: ignore
 30: except ModuleNotFoundError:  # local fallback
 31:     from block_data import BlockData  # type: ignore
 32: def _node_ranges(sizes: Sequence[int]) -> List[Tuple[int, int]]:
 33:     """Return (start, stop) index for each block (Python half‑open)."""
 34:     ranges = []
 35:     start = 0
 36:     for sz in sizes:
 37:         ranges.append((start, start + sz))
 38:         start += sz
 39:     return ranges
 40: def build_block_data(
 41:     block_sizes: Sequence[int],
 42:     conn: np.ndarray,
 43:     rng: random.Random,
 44: ) -> BlockData:
 45:     """Construct a *consistent* BlockData (undirected) for testing."""
 46:     B = len(block_sizes)
 47:     assert conn.shape == (B, B)
 48:     assert (conn == conn.T).all(), "Connectivity must be symmetric for undirected graphs."  # noqa: E501
 49:     # Total number of nodes & adjacency matrix
 50:     N = int(sum(block_sizes))
 51:     adj = sp.dok_array((N, N), dtype=np.int64)
 52:     ranges = _node_ranges(block_sizes)
 53:     for r in range(B):
 54:         nodes_r = list(range(*ranges[r]))
 55:         # Diagonal block r==r
 56:         e_rr = int(conn[r, r])
 57:         if e_rr:
 58:             # all unordered pairs inside block
 59:             possible = [(u, v) for i, u in enumerate(nodes_r) for v in nodes_r[i + 1 :]]
 60:             assert e_rr <= len(possible)
 61:             chosen = rng.sample(possible, e_rr)
 62:             for u, v in chosen:
 63:                 adj[u, v] = 1
 64:                 adj[v, u] = 1
 65:         for s in range(r + 1, B):
 66:             e_rs = int(conn[r, s])
 67:             if not e_rs:
 68:                 continue
 69:             nodes_s = list(range(*ranges[s]))
 70:             possible = [(u, v) for u in nodes_r for v in nodes_s]
 71:             assert e_rs <= len(possible)
 72:             chosen = rng.sample(possible, e_rs)
 73:             for u, v in chosen:
 74:                 adj[u, v] = 1
 75:                 adj[v, u] = 1
 76:     adj = adj.tocsr()
 77:     # Blocks mapping: node -> block_id (block IDs are 0..B-1)
 78:     blocks = {node: b for b, (start, stop) in enumerate(ranges) for node in range(start, stop)}
 79:     dummy_graph = GraphData(adj, directed=False)
 80:     return BlockData(initial_blocks=blocks, graph_data=dummy_graph)
 81: # ---------------------------------------------------------------------------
 82: # Sanity helper
 83: # ---------------------------------------------------------------------------
 84: def assert_ll_equal(bd: BlockData):
 85:     ll_slow = compute_global_bernoulli_ll(bd)
 86:     ll_fast = compute_global_bernoulli_ll_fast(bd)
 87:     assert np.isclose(ll_slow, ll_fast, rtol=1e-4, atol=1e-6), f"{ll_slow} != {ll_fast}"
 88: # ==========================================================================
 89: # TEST CASES
 90: # ==========================================================================
 91: # 1) Tiny hand-crafted graph -------------------------------------------------
 92: def test_tiny_example():
 93:     sizes = [3, 4]
 94:     conn = np.array([[2, 5],
 95:                      [5, 1]], dtype=np.int64)
 96:     bd = build_block_data(sizes, conn, rng=random.Random(0))
 97:     assert_ll_equal(bd)
 98: # 2) Singleton block present -------------------------------------------------
 99: def test_singleton_block():
100:     sizes = [1, 5, 2]
101:     conn = np.array([[0, 0, 0],
102:                      [0, 4, 3],
103:                      [0, 3, 1]], dtype=np.int64)
104:     # ensure symmetry
105:     conn = conn + conn.T - np.diag(conn.diagonal())
106:     bd = build_block_data(sizes, conn, rng=random.Random(1))
107:     assert_ll_equal(bd)
108: # 3) Random dense undirected graphs -----------------------------------------
109: @pytest.mark.parametrize("seed,B", [(2, 4), (3, 6)])
110: def test_random_dense(seed: int, B: int):
111:     rng = random.Random(seed)
112:     sizes = [rng.randint(2, 6) for _ in range(B)]
113:     conn = np.zeros((B, B), dtype=np.int64)
114:     for r in range(B):
115:         n_rr = sizes[r] * (sizes[r] - 1) // 2
116:         conn[r, r] = rng.randrange(n_rr + 1)
117:         for s in range(r + 1, B):
118:             n_rs = sizes[r] * sizes[s]
119:             val = rng.randrange(n_rs + 1)
120:             conn[r, s] = conn[s, r] = val
121:     bd = build_block_data(sizes, conn, rng)
122:     assert_ll_equal(bd)

================
File: src/tests/test_greedy_assign_helpers.py
================
  1: import numpy as np
  2: import scipy.sparse as sp
  3: from scipy.sparse import csr_array
  4: import pytest
  5: from collections import Counter, defaultdict
  6: from sbm.block_assigner import (
  7:     _boundary_vertices,
  8:     _movable_vertex,
  9:     _move,
 10:     categorize,
 11:     move_node_to_under,
 12:     move_node_from_over,
 13:     balance_k_plus_1_blocks,
 14:     _rebalance_to_min_size,
 15: )
 16: # ---------------------------------------------------------------------------
 17: # Minimal helper to build a fully connected small graph ---------------------
 18: # ---------------------------------------------------------------------------
 19: def full_graph_csr(n: int) -> csr_array:
 20:     rows, cols = np.triu_indices(n, 1)
 21:     data = np.ones_like(rows)
 22:     A = csr_array((data, (rows, cols)), shape=(n, n))
 23:     A = A + A.T  # undirected
 24:     return A
 25: # ---------------------------------------------------------------------------
 26: # Tests for categorize ------------------------------------------------------
 27: # ---------------------------------------------------------------------------
 28: def test_categorize_basic():
 29:     k = 3
 30:     sizes = {0: 2, 1: 3, 2: 4, 3: 5}
 31:     over2, over1, under = categorize(sizes, k)
 32:     assert over2 == {3}
 33:     assert over1 == {2}
 34:     assert under == {0}
 35: # ---------------------------------------------------------------------------
 36: # Tests for move_node_to_under -------------------------------------------
 37: # ---------------------------------------------------------------------------
 38: def test_move_node_to_under_correct():
 39:     k = 2
 40:     A = full_graph_csr(4)
 41:     # block 0 undersize (1), block 1 oversize (3)
 42:     blocks = {0: 0, 1: 1, 2: 1, 3: 1}
 43:     sizes = Counter(blocks.values())
 44:     members = defaultdict(set)
 45:     for v, b in blocks.items():
 46:         members[b].add(v)
 47:     rng = np.random.default_rng(0)
 48:     over2, over1, under = categorize(sizes, k)
 49:     move_node_to_under(
 50:         under=under,
 51:         over1=over1,
 52:         over2=over2,
 53:         rng=rng,
 54:         sizes=sizes,
 55:         k=k,
 56:         members=members,
 57:         blocks=blocks,
 58:         indptr=A.indptr,
 59:         indices=A.indices,
 60:     )
 61:     # After move, block 0 should have size 2, block 1 size 2
 62:     assert sizes[0] == k
 63:     assert sizes[1] == k
 64:     # No undersized blocks remain
 65:     _, _, under_new = categorize(sizes, k)
 66:     assert not under_new
 67: # ---------------------------------------------------------------------------
 68: # Tests for move_node_from_over --------------------------------------------
 69: # ---------------------------------------------------------------------------
 70: def test_move_node_from_over_shrink():
 71:     k = 3
 72:     A = full_graph_csr(8)
 73:     # block 0 size 2 (<k), block 1 size 6 (>k+1), others size 0
 74:     blocks = {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1}
 75:     sizes = Counter(blocks.values())
 76:     members = defaultdict(set)
 77:     for v, b in blocks.items():
 78:         members[b].add(v)
 79:     rng = np.random.default_rng(1)
 80:     over2, over1, under = categorize(sizes, k)
 81:     move_node_from_over(
 82:         under=under,
 83:         over1=over1,
 84:         over2=over2,
 85:         rng=rng,
 86:         sizes=sizes,
 87:         k=k,
 88:         members=members,
 89:         blocks=blocks,
 90:         indptr=A.indptr,
 91:         indices=A.indices,
 92:         r_target=0,
 93:     )
 94:     # block 0 size should have increased by 1, block1 decreased by1
 95:     assert sizes[0] == 2  # reached k
 96:     assert sizes[1] == 6
 97: # ---------------------------------------------------------------------------
 98: # Tests for balance_k_plus_1_blocks ----------------------------------------
 99: # ---------------------------------------------------------------------------
100: def test_balance_k_plus_1_blocks_shrink_and_enlarge():
101:     k = 2
102:     A = full_graph_csr(6)
103:     # create three blocks: 0 size 3 (k+1), 1 size 3 (k+1), 2 size 0 (empty)
104:     blocks = {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1}
105:     sizes = Counter(blocks.values())
106:     members = defaultdict(set)
107:     for v, b in blocks.items():
108:         members[b].add(v)
109:     rng = np.random.default_rng(3)
110:     r_target = 1  # we want exactly one k+1
111:     over2, over1, under = categorize(sizes, k)
112:     assert len(over1) == 2  # pre‑condition
113:     # no possible balance to achieve
114:     balance_k_plus_1_blocks(
115:         over1=over1,
116:         over2=over2,
117:         rng=rng,
118:         sizes=sizes,
119:         k=k,
120:         members=members,
121:         blocks=blocks,
122:         indptr=A.indptr,
123:         indices=A.indices,
124:         r_target=r_target,
125:     )
126:     # After balancing, over1 should be 1
127:     over2_after, over1_after, under_after = categorize(sizes, k)
128:     assert len(over1_after) == len(over1) # no change made
129:     assert len(over2_after) == len(over2) # no change made
130:     assert not under_after and not under # no undersized introduced
131: # ---------------------------------------------------------------------------
132: # Test safety with empty sets ----------------------------------------------
133: # ---------------------------------------------------------------------------
134: def test_empty_sets_no_crash():
135:     k = 2
136:     A = full_graph_csr(3)
137:     blocks = {0: 0, 1: 0, 2: 0}
138:     sizes = Counter(blocks.values())
139:     members = defaultdict(set)
140:     for v, b in blocks.items():
141:         members[b].add(v)
142:     rng = np.random.default_rng(4)
143:     # empty over/under sets
144:     over2, over1, under = categorize(sizes, k)
145:     # should do nothing and not raise
146:     move_node_to_under(under, over1, over2, rng, sizes, k, members, blocks, A.indptr, A.indices)
147:     move_node_from_over(under, over1, over2, rng, sizes, k, members, blocks, A.indptr, A.indices, r_target=0)
148:     balance_k_plus_1_blocks(over1, over2, rng, sizes, k, members, blocks, A.indptr, A.indices, r_target=0)
149: # ---------------------------------------------------------------------------
150: # Integration test for _rebalance_to_min_size ------------------------------
151: # ---------------------------------------------------------------------------
152: def test_rebalance_removes_all_undersize():
153:     n = 25
154:     k = 3
155:     A = full_graph_csr(n)
156:     rng = np.random.default_rng(10)
157:     # start with random over/under assignment
158:     blocks = {i: rng.integers(0, 8) for i in range(n)}
159:     print(set(Counter(blocks.values()).values()))
160:     balanced = _rebalance_to_min_size(blocks.copy(), A, k, rng)
161:     sizes = Counter(balanced.values())
162:     print(set(sizes.values()))
163:     # No block smaller than k
164:     assert min(sizes.values()) >= k

================
File: .repomix/bundles.json
================
1: {
2:   "bundles": {}
3: }

================
File: notebooks/convergence_figures_25-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "af425169",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Notebook for visualizing the convergence of the MCMC algorithm"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": null,
 14:    "id": "828ee0d9",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "import numpy as np\n",
 19:     "import pandas as pd\n",
 20:     "import matplotlib.pyplot as plt"
 21:    ]
 22:   },
 23:   {
 24:    "cell_type": "code",
 25:    "execution_count": 69,
 26:    "id": "9f091b92",
 27:    "metadata": {},
 28:    "outputs": [],
 29:    "source": [
 30:     "import sys\n",
 31:     "from pathlib import Path\n",
 32:     "logs_path = Path(\"/Users/lmmi/anon_sbm/logs\")\n",
 33:     "\n",
 34:     "# find all log files in the logs directory\n",
 35:     "log_files = list(logs_path.glob(\"*.csv\"))"
 36:    ]
 37:   },
 38:   {
 39:    "cell_type": "code",
 40:    "execution_count": 70,
 41:    "id": "e8adb1d1",
 42:    "metadata": {},
 43:    "outputs": [],
 44:    "source": [
 45:     "def determine_name(file_name, dataset_names):\n",
 46:     "    \"\"\"\n",
 47:     "    Determine the name of the dataset based on the file name.\n",
 48:     "    \"\"\"\n",
 49:     "    for name in dataset_names:\n",
 50:     "        if name in file_name:\n",
 51:     "            return name\n",
 52:     "    return \"unknown\"\n",
 53:     "dataset_names = [ \"congress_twitter\", \"caltech_fb\", \"eu_email\", ]"
 54:    ]
 55:   },
 56:   {
 57:    "cell_type": "code",
 58:    "execution_count": 71,
 59:    "id": "23eabf12",
 60:    "metadata": {},
 61:    "outputs": [],
 62:    "source": [
 63:     "df_list = []\n",
 64:     "\n",
 65:     "for log_file in log_files:\n",
 66:     "    df = pd.read_csv(log_file)\n",
 67:     "    df[\"name\"] = determine_name(log_file.name, dataset_names)\n",
 68:     "\n",
 69:     "    df_list.append(df)\n",
 70:     "\n",
 71:     "df = pd.concat(df_list, ignore_index=True)"
 72:    ]
 73:   },
 74:   {
 75:    "cell_type": "code",
 76:    "execution_count": 72,
 77:    "id": "afc3941c",
 78:    "metadata": {},
 79:    "outputs": [
 80:     {
 81:      "name": "stderr",
 82:      "output_type": "stream",
 83:      "text": [
 84:       "/var/folders/y6/j9fbqcvx6lb5l99614n30y4c0000gn/T/ipykernel_88748/2982452800.py:32: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
 85:       "  fig.show()\n"
 86:      ]
 87:     },
 88:     {
 89:      "data": {
 90:       "image/png": "",
 91:       "text/plain": [
 92:        "<Figure size 1000x600 with 1 Axes>"
 93:       ]
 94:      },
 95:      "metadata": {},
 96:      "output_type": "display_data"
 97:     }
 98:    ],
 99:    "source": [
100:     "marker_styles = {\n",
101:     "    \"congress_twitter\": \"o\",\n",
102:     "    \"caltech_fb\": \"s\",\n",
103:     "    \"eu_email\": \"D\",\n",
104:     "}\n",
105:     "colors = {\n",
106:     "    \"congress_twitter\": \"teal\",\n",
107:     "    \"caltech_fb\": \"salmon\",\n",
108:     "    \"eu_email\": \"black\",\n",
109:     "}\n",
110:     "\n",
111:     "\n",
112:     "fig, ax = plt.subplots(figsize=(10, 6))\n",
113:     "\n",
114:     "for name, group in df.groupby(\"name\"):\n",
115:     "    group = group.sort_values(\"iteration\")\n",
116:     "    ax.plot(\n",
117:     "        group[\"iteration\"],\n",
118:     "        group[\"neg_log_likelihood\"],\n",
119:     "        label=name,\n",
120:     "        linewidth=0,\n",
121:     "        marker=marker_styles[name], # type: ignore\n",
122:     "        )\n",
123:     "\n",
124:     "plt.legend(fontsize=12)\n",
125:     "\n",
126:     "ax.set_ylabel(\"Negative Log Likelihood\", fontsize=14)\n",
127:     "ax.set_xlabel(\"MCMC Iteration\", fontsize=14)\n",
128:     "\n",
129:     "\n",
130:     "ax.spines[['top', 'right']].set_visible(False)\n",
131:     "fig.show()"
132:    ]
133:   },
134:   {
135:    "cell_type": "code",
136:    "execution_count": null,
137:    "id": "666c6cc1",
138:    "metadata": {},
139:    "outputs": [],
140:    "source": []
141:   }
142:  ],
143:  "metadata": {
144:   "kernelspec": {
145:    "display_name": "anon_sbm_notebook",
146:    "language": "python",
147:    "name": "python3"
148:   },
149:   "language_info": {
150:    "codemirror_mode": {
151:     "name": "ipython",
152:     "version": 3
153:    },
154:    "file_extension": ".py",
155:    "mimetype": "text/x-python",
156:    "name": "python",
157:    "nbconvert_exporter": "python",
158:    "pygments_lexer": "ipython3",
159:    "version": "3.13.5"
160:   }
161:  },
162:  "nbformat": 4,
163:  "nbformat_minor": 5
164: }

================
File: notebooks/likelihood_test.ipynb
================
   1: {
   2:  "cells": [
   3:   {
   4:    "cell_type": "code",
   5:    "execution_count": 2,
   6:    "metadata": {},
   7:    "outputs": [],
   8:    "source": [
   9:     "import numpy as np\n",
  10:     "import scipy.sparse as sp\n",
  11:     "from sbm.sbm import StochasticBlockModel"
  12:    ]
  13:   },
  14:   {
  15:    "cell_type": "code",
  16:    "execution_count": 32,
  17:    "metadata": {},
  18:    "outputs": [],
  19:    "source": [
  20:     "num_nodes = 1000\n",
  21:     "block_size = 50\n",
  22:     "# Generate a random sparse adjacency matrix\n",
  23:     "adjacency = sp.random(num_nodes, num_nodes, density=0.01, format='csr')\n",
  24:     "adjacency = adjacency + adjacency.T  # Make it symmetric\n",
  25:     "adjacency.data = np.ones_like(adjacency.data)  # Unweighted graph\n",
  26:     "\n",
  27:     "# Create an initial uniform random partition\n",
  28:     "initial_blocks = StochasticBlockModel.create_uniform_partition(num_nodes, block_size)\n",
  29:     "\n",
  30:     "# Initialize the SBM\n",
  31:     "sbm = StochasticBlockModel(adjacency, initial_blocks)"
  32:    ]
  33:   },
  34:   {
  35:    "cell_type": "code",
  36:    "execution_count": 33,
  37:    "metadata": {},
  38:    "outputs": [
  39:     {
  40:      "name": "stdout",
  41:      "output_type": "stream",
  42:      "text": [
  43:       "Initial Likelihood: -110207.47925966672\n"
  44:      ]
  45:     }
  46:    ],
  47:    "source": [
  48:     "# Compute the initial likelihood\n",
  49:     "initial_likelihood = sbm.compute_likelihood()\n",
  50:     "print(f\"Initial Likelihood: {initial_likelihood}\")"
  51:    ]
  52:   },
  53:   {
  54:    "cell_type": "code",
  55:    "execution_count": 34,
  56:    "metadata": {},
  57:    "outputs": [
  58:     {
  59:      "name": "stdout",
  60:      "output_type": "stream",
  61:      "text": [
  62:       "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n"
  63:      ]
  64:     }
  65:    ],
  66:    "source": [
  67:     "block_0 = sbm.block_members[0]\n",
  68:     "sbm.split_block(0)\n",
  69:     "\n",
  70:     "test = [elem in block_0 for elem in sbm.block_members[0]]\n",
  71:     "print(test)"
  72:    ]
  73:   },
  74:   {
  75:    "cell_type": "code",
  76:    "execution_count": 35,
  77:    "metadata": {},
  78:    "outputs": [
  79:     {
  80:      "name": "stdout",
  81:      "output_type": "stream",
  82:      "text": [
  83:       "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n"
  84:      ]
  85:     }
  86:    ],
  87:    "source": [
  88:     "block_1, block_2 = sbm.block_members[1], sbm.block_members[2]\n",
  89:     "\n",
  90:     "sbm.merge_blocks(1, 2)\n",
  91:     "\n",
  92:     "test = [elem in sbm.block_members[1] for elem in block_1] + [elem in sbm.block_members[1] for elem in block_2]\n",
  93:     "print(test)"
  94:    ]
  95:   },
  96:   {
  97:    "cell_type": "code",
  98:    "execution_count": 62,
  99:    "metadata": {},
 100:    "outputs": [],
 101:    "source": [
 102:     "sbm.split_block(0)"
 103:    ]
 104:   },
 105:   {
 106:    "cell_type": "code",
 107:    "execution_count": 63,
 108:    "metadata": {},
 109:    "outputs": [
 110:     {
 111:      "data": {
 112:       "text/plain": [
 113:        "dict_keys([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 26])"
 114:       ]
 115:      },
 116:      "execution_count": 63,
 117:      "metadata": {},
 118:      "output_type": "execute_result"
 119:     }
 120:    ],
 121:    "source": [
 122:     "sbm.block_members.keys()"
 123:    ]
 124:   },
 125:   {
 126:    "cell_type": "code",
 127:    "execution_count": 64,
 128:    "metadata": {},
 129:    "outputs": [
 130:     {
 131:      "data": {
 132:       "text/plain": [
 133:        "{3: [361,\n",
 134:        "  569,\n",
 135:        "  298,\n",
 136:        "  110,\n",
 137:        "  288,\n",
 138:        "  972,\n",
 139:        "  595,\n",
 140:        "  10,\n",
 141:        "  67,\n",
 142:        "  436,\n",
 143:        "  281,\n",
 144:        "  52,\n",
 145:        "  476,\n",
 146:        "  791,\n",
 147:        "  760,\n",
 148:        "  388,\n",
 149:        "  926,\n",
 150:        "  928,\n",
 151:        "  45,\n",
 152:        "  40,\n",
 153:        "  393,\n",
 154:        "  474,\n",
 155:        "  237,\n",
 156:        "  226,\n",
 157:        "  814,\n",
 158:        "  447,\n",
 159:        "  884,\n",
 160:        "  833,\n",
 161:        "  62,\n",
 162:        "  834,\n",
 163:        "  387,\n",
 164:        "  448,\n",
 165:        "  788,\n",
 166:        "  179,\n",
 167:        "  801,\n",
 168:        "  318,\n",
 169:        "  64,\n",
 170:        "  629,\n",
 171:        "  968,\n",
 172:        "  911,\n",
 173:        "  568,\n",
 174:        "  450,\n",
 175:        "  735,\n",
 176:        "  1,\n",
 177:        "  410,\n",
 178:        "  30,\n",
 179:        "  389,\n",
 180:        "  215,\n",
 181:        "  478,\n",
 182:        "  319],\n",
 183:        " 4: [202,\n",
 184:        "  787,\n",
 185:        "  255,\n",
 186:        "  502,\n",
 187:        "  242,\n",
 188:        "  827,\n",
 189:        "  402,\n",
 190:        "  256,\n",
 191:        "  584,\n",
 192:        "  547,\n",
 193:        "  579,\n",
 194:        "  739,\n",
 195:        "  282,\n",
 196:        "  697,\n",
 197:        "  135,\n",
 198:        "  342,\n",
 199:        "  636,\n",
 200:        "  377,\n",
 201:        "  118,\n",
 202:        "  722,\n",
 203:        "  915,\n",
 204:        "  685,\n",
 205:        "  397,\n",
 206:        "  341,\n",
 207:        "  416,\n",
 208:        "  612,\n",
 209:        "  491,\n",
 210:        "  392,\n",
 211:        "  941,\n",
 212:        "  668,\n",
 213:        "  148,\n",
 214:        "  370,\n",
 215:        "  247,\n",
 216:        "  734,\n",
 217:        "  991,\n",
 218:        "  619,\n",
 219:        "  262,\n",
 220:        "  351,\n",
 221:        "  628,\n",
 222:        "  864,\n",
 223:        "  337,\n",
 224:        "  845,\n",
 225:        "  752,\n",
 226:        "  244,\n",
 227:        "  903,\n",
 228:        "  606,\n",
 229:        "  269,\n",
 230:        "  898,\n",
 231:        "  780,\n",
 232:        "  716],\n",
 233:        " 5: [352,\n",
 234:        "  210,\n",
 235:        "  473,\n",
 236:        "  807,\n",
 237:        "  676,\n",
 238:        "  353,\n",
 239:        "  534,\n",
 240:        "  813,\n",
 241:        "  88,\n",
 242:        "  58,\n",
 243:        "  198,\n",
 244:        "  715,\n",
 245:        "  519,\n",
 246:        "  945,\n",
 247:        "  264,\n",
 248:        "  357,\n",
 249:        "  53,\n",
 250:        "  934,\n",
 251:        "  877,\n",
 252:        "  217,\n",
 253:        "  437,\n",
 254:        "  653,\n",
 255:        "  746,\n",
 256:        "  737,\n",
 257:        "  461,\n",
 258:        "  953,\n",
 259:        "  458,\n",
 260:        "  346,\n",
 261:        "  414,\n",
 262:        "  329,\n",
 263:        "  902,\n",
 264:        "  106,\n",
 265:        "  295,\n",
 266:        "  695,\n",
 267:        "  480,\n",
 268:        "  994,\n",
 269:        "  206,\n",
 270:        "  592,\n",
 271:        "  44,\n",
 272:        "  171,\n",
 273:        "  876,\n",
 274:        "  105,\n",
 275:        "  758,\n",
 276:        "  57,\n",
 277:        "  128,\n",
 278:        "  7,\n",
 279:        "  811,\n",
 280:        "  145,\n",
 281:        "  985,\n",
 282:        "  977],\n",
 283:        " 6: [229,\n",
 284:        "  394,\n",
 285:        "  656,\n",
 286:        "  744,\n",
 287:        "  935,\n",
 288:        "  333,\n",
 289:        "  407,\n",
 290:        "  736,\n",
 291:        "  546,\n",
 292:        "  553,\n",
 293:        "  221,\n",
 294:        "  982,\n",
 295:        "  914,\n",
 296:        "  101,\n",
 297:        "  230,\n",
 298:        "  406,\n",
 299:        "  872,\n",
 300:        "  266,\n",
 301:        "  285,\n",
 302:        "  325,\n",
 303:        "  582,\n",
 304:        "  562,\n",
 305:        "  222,\n",
 306:        "  924,\n",
 307:        "  78,\n",
 308:        "  970,\n",
 309:        "  899,\n",
 310:        "  729,\n",
 311:        "  869,\n",
 312:        "  77,\n",
 313:        "  908,\n",
 314:        "  510,\n",
 315:        "  713,\n",
 316:        "  9,\n",
 317:        "  593,\n",
 318:        "  279,\n",
 319:        "  429,\n",
 320:        "  721,\n",
 321:        "  933,\n",
 322:        "  860,\n",
 323:        "  375,\n",
 324:        "  334,\n",
 325:        "  750,\n",
 326:        "  849,\n",
 327:        "  524,\n",
 328:        "  225,\n",
 329:        "  241,\n",
 330:        "  803,\n",
 331:        "  759,\n",
 332:        "  669],\n",
 333:        " 7: [92,\n",
 334:        "  196,\n",
 335:        "  770,\n",
 336:        "  530,\n",
 337:        "  740,\n",
 338:        "  189,\n",
 339:        "  777,\n",
 340:        "  699,\n",
 341:        "  144,\n",
 342:        "  463,\n",
 343:        "  404,\n",
 344:        "  270,\n",
 345:        "  890,\n",
 346:        "  320,\n",
 347:        "  315,\n",
 348:        "  403,\n",
 349:        "  310,\n",
 350:        "  350,\n",
 351:        "  802,\n",
 352:        "  293,\n",
 353:        "  29,\n",
 354:        "  587,\n",
 355:        "  846,\n",
 356:        "  852,\n",
 357:        "  86,\n",
 358:        "  453,\n",
 359:        "  523,\n",
 360:        "  249,\n",
 361:        "  939,\n",
 362:        "  34,\n",
 363:        "  912,\n",
 364:        "  0,\n",
 365:        "  776,\n",
 366:        "  812,\n",
 367:        "  340,\n",
 368:        "  512,\n",
 369:        "  187,\n",
 370:        "  672,\n",
 371:        "  677,\n",
 372:        "  190,\n",
 373:        "  878,\n",
 374:        "  893,\n",
 375:        "  605,\n",
 376:        "  411,\n",
 377:        "  228,\n",
 378:        "  665,\n",
 379:        "  751,\n",
 380:        "  439,\n",
 381:        "  5,\n",
 382:        "  844],\n",
 383:        " 8: [795,\n",
 384:        "  943,\n",
 385:        "  212,\n",
 386:        "  978,\n",
 387:        "  347,\n",
 388:        "  71,\n",
 389:        "  48,\n",
 390:        "  292,\n",
 391:        "  155,\n",
 392:        "  608,\n",
 393:        "  997,\n",
 394:        "  576,\n",
 395:        "  449,\n",
 396:        "  990,\n",
 397:        "  36,\n",
 398:        "  895,\n",
 399:        "  979,\n",
 400:        "  778,\n",
 401:        "  154,\n",
 402:        "  494,\n",
 403:        "  529,\n",
 404:        "  542,\n",
 405:        "  303,\n",
 406:        "  560,\n",
 407:        "  471,\n",
 408:        "  385,\n",
 409:        "  901,\n",
 410:        "  124,\n",
 411:        "  180,\n",
 412:        "  850,\n",
 413:        "  631,\n",
 414:        "  769,\n",
 415:        "  137,\n",
 416:        "  462,\n",
 417:        "  307,\n",
 418:        "  263,\n",
 419:        "  89,\n",
 420:        "  805,\n",
 421:        "  428,\n",
 422:        "  424,\n",
 423:        "  892,\n",
 424:        "  390,\n",
 425:        "  63,\n",
 426:        "  19,\n",
 427:        "  782,\n",
 428:        "  267,\n",
 429:        "  917,\n",
 430:        "  773,\n",
 431:        "  465,\n",
 432:        "  842],\n",
 433:        " 9: [76,\n",
 434:        "  733,\n",
 435:        "  49,\n",
 436:        "  43,\n",
 437:        "  614,\n",
 438:        "  885,\n",
 439:        "  618,\n",
 440:        "  164,\n",
 441:        "  423,\n",
 442:        "  117,\n",
 443:        "  516,\n",
 444:        "  565,\n",
 445:        "  166,\n",
 446:        "  771,\n",
 447:        "  717,\n",
 448:        "  859,\n",
 449:        "  691,\n",
 450:        "  159,\n",
 451:        "  495,\n",
 452:        "  153,\n",
 453:        "  678,\n",
 454:        "  227,\n",
 455:        "  692,\n",
 456:        "  981,\n",
 457:        "  181,\n",
 458:        "  857,\n",
 459:        "  126,\n",
 460:        "  950,\n",
 461:        "  55,\n",
 462:        "  622,\n",
 463:        "  129,\n",
 464:        "  731,\n",
 465:        "  554,\n",
 466:        "  556,\n",
 467:        "  220,\n",
 468:        "  162,\n",
 469:        "  238,\n",
 470:        "  925,\n",
 471:        "  309,\n",
 472:        "  662,\n",
 473:        "  673,\n",
 474:        "  831,\n",
 475:        "  72,\n",
 476:        "  107,\n",
 477:        "  815,\n",
 478:        "  514,\n",
 479:        "  706,\n",
 480:        "  847,\n",
 481:        "  233,\n",
 482:        "  467],\n",
 483:        " 10: [308,\n",
 484:        "  186,\n",
 485:        "  489,\n",
 486:        "  959,\n",
 487:        "  658,\n",
 488:        "  362,\n",
 489:        "  223,\n",
 490:        "  862,\n",
 491:        "  659,\n",
 492:        "  484,\n",
 493:        "  536,\n",
 494:        "  757,\n",
 495:        "  969,\n",
 496:        "  18,\n",
 497:        "  825,\n",
 498:        "  332,\n",
 499:        "  306,\n",
 500:        "  840,\n",
 501:        "  660,\n",
 502:        "  602,\n",
 503:        "  684,\n",
 504:        "  188,\n",
 505:        "  613,\n",
 506:        "  590,\n",
 507:        "  820,\n",
 508:        "  324,\n",
 509:        "  443,\n",
 510:        "  627,\n",
 511:        "  586,\n",
 512:        "  766,\n",
 513:        "  69,\n",
 514:        "  830,\n",
 515:        "  942,\n",
 516:        "  419,\n",
 517:        "  798,\n",
 518:        "  946,\n",
 519:        "  65,\n",
 520:        "  644,\n",
 521:        "  79,\n",
 522:        "  604,\n",
 523:        "  121,\n",
 524:        "  74,\n",
 525:        "  971,\n",
 526:        "  381,\n",
 527:        "  81,\n",
 528:        "  100,\n",
 529:        "  932,\n",
 530:        "  531,\n",
 531:        "  232,\n",
 532:        "  466],\n",
 533:        " 11: [762,\n",
 534:        "  355,\n",
 535:        "  955,\n",
 536:        "  451,\n",
 537:        "  904,\n",
 538:        "  109,\n",
 539:        "  749,\n",
 540:        "  621,\n",
 541:        "  689,\n",
 542:        "  231,\n",
 543:        "  626,\n",
 544:        "  305,\n",
 545:        "  167,\n",
 546:        "  98,\n",
 547:        "  938,\n",
 548:        "  37,\n",
 549:        "  427,\n",
 550:        "  284,\n",
 551:        "  793,\n",
 552:        "  958,\n",
 553:        "  724,\n",
 554:        "  312,\n",
 555:        "  848,\n",
 556:        "  415,\n",
 557:        "  528,\n",
 558:        "  867,\n",
 559:        "  645,\n",
 560:        "  158,\n",
 561:        "  661,\n",
 562:        "  954,\n",
 563:        "  920,\n",
 564:        "  354,\n",
 565:        "  910,\n",
 566:        "  59,\n",
 567:        "  965,\n",
 568:        "  208,\n",
 569:        "  441,\n",
 570:        "  358,\n",
 571:        "  623,\n",
 572:        "  54,\n",
 573:        "  497,\n",
 574:        "  966,\n",
 575:        "  112,\n",
 576:        "  125,\n",
 577:        "  532,\n",
 578:        "  379,\n",
 579:        "  365,\n",
 580:        "  138,\n",
 581:        "  634,\n",
 582:        "  214],\n",
 583:        " 12: [797,\n",
 584:        "  719,\n",
 585:        "  975,\n",
 586:        "  603,\n",
 587:        "  540,\n",
 588:        "  507,\n",
 589:        "  610,\n",
 590:        "  879,\n",
 591:        "  870,\n",
 592:        "  302,\n",
 593:        "  594,\n",
 594:        "  609,\n",
 595:        "  574,\n",
 596:        "  199,\n",
 597:        "  693,\n",
 598:        "  703,\n",
 599:        "  666,\n",
 600:        "  422,\n",
 601:        "  278,\n",
 602:        "  775,\n",
 603:        "  219,\n",
 604:        "  84,\n",
 605:        "  654,\n",
 606:        "  317,\n",
 607:        "  321,\n",
 608:        "  420,\n",
 609:        "  17,\n",
 610:        "  573,\n",
 611:        "  843,\n",
 612:        "  201,\n",
 613:        "  525,\n",
 614:        "  224,\n",
 615:        "  816,\n",
 616:        "  207,\n",
 617:        "  783,\n",
 618:        "  435,\n",
 619:        "  725,\n",
 620:        "  360,\n",
 621:        "  518,\n",
 622:        "  80,\n",
 623:        "  561,\n",
 624:        "  11,\n",
 625:        "  948,\n",
 626:        "  694,\n",
 627:        "  493,\n",
 628:        "  103,\n",
 629:        "  923,\n",
 630:        "  70,\n",
 631:        "  268,\n",
 632:        "  290],\n",
 633:        " 13: [13,\n",
 634:        "  989,\n",
 635:        "  929,\n",
 636:        "  374,\n",
 637:        "  195,\n",
 638:        "  236,\n",
 639:        "  446,\n",
 640:        "  39,\n",
 641:        "  973,\n",
 642:        "  625,\n",
 643:        "  161,\n",
 644:        "  630,\n",
 645:        "  464,\n",
 646:        "  682,\n",
 647:        "  345,\n",
 648:        "  768,\n",
 649:        "  680,\n",
 650:        "  549,\n",
 651:        "  455,\n",
 652:        "  192,\n",
 653:        "  633,\n",
 654:        "  23,\n",
 655:        "  20,\n",
 656:        "  883,\n",
 657:        "  589,\n",
 658:        "  533,\n",
 659:        "  87,\n",
 660:        "  475,\n",
 661:        "  996,\n",
 662:        "  947,\n",
 663:        "  686,\n",
 664:        "  283,\n",
 665:        "  384,\n",
 666:        "  376,\n",
 667:        "  259,\n",
 668:        "  323,\n",
 669:        "  326,\n",
 670:        "  274,\n",
 671:        "  165,\n",
 672:        "  398,\n",
 673:        "  781,\n",
 674:        "  747,\n",
 675:        "  149,\n",
 676:        "  838,\n",
 677:        "  240,\n",
 678:        "  598,\n",
 679:        "  741,\n",
 680:        "  204,\n",
 681:        "  700,\n",
 682:        "  457],\n",
 683:        " 14: [301,\n",
 684:        "  804,\n",
 685:        "  964,\n",
 686:        "  504,\n",
 687:        "  616,\n",
 688:        "  921,\n",
 689:        "  409,\n",
 690:        "  600,\n",
 691:        "  413,\n",
 692:        "  949,\n",
 693:        "  819,\n",
 694:        "  861,\n",
 695:        "  291,\n",
 696:        "  211,\n",
 697:        "  75,\n",
 698:        "  432,\n",
 699:        "  425,\n",
 700:        "  753,\n",
 701:        "  772,\n",
 702:        "  742,\n",
 703:        "  82,\n",
 704:        "  674,\n",
 705:        "  643,\n",
 706:        "  607,\n",
 707:        "  765,\n",
 708:        "  460,\n",
 709:        "  500,\n",
 710:        "  400,\n",
 711:        "  889,\n",
 712:        "  683,\n",
 713:        "  940,\n",
 714:        "  839,\n",
 715:        "  513,\n",
 716:        "  177,\n",
 717:        "  408,\n",
 718:        "  248,\n",
 719:        "  790,\n",
 720:        "  97,\n",
 721:        "  131,\n",
 722:        "  544,\n",
 723:        "  234,\n",
 724:        "  578,\n",
 725:        "  250,\n",
 726:        "  980,\n",
 727:        "  873,\n",
 728:        "  687,\n",
 729:        "  42,\n",
 730:        "  541,\n",
 731:        "  710,\n",
 732:        "  663],\n",
 733:        " 15: [197,\n",
 734:        "  380,\n",
 735:        "  28,\n",
 736:        "  728,\n",
 737:        "  134,\n",
 738:        "  254,\n",
 739:        "  8,\n",
 740:        "  566,\n",
 741:        "  216,\n",
 742:        "  962,\n",
 743:        "  314,\n",
 744:        "  277,\n",
 745:        "  6,\n",
 746:        "  708,\n",
 747:        "  829,\n",
 748:        "  796,\n",
 749:        "  701,\n",
 750:        "  515,\n",
 751:        "  779,\n",
 752:        "  114,\n",
 753:        "  2,\n",
 754:        "  368,\n",
 755:        "  832,\n",
 756:        "  287,\n",
 757:        "  823,\n",
 758:        "  763,\n",
 759:        "  642,\n",
 760:        "  243,\n",
 761:        "  66,\n",
 762:        "  15,\n",
 763:        "  535,\n",
 764:        "  272,\n",
 765:        "  391,\n",
 766:        "  548,\n",
 767:        "  205,\n",
 768:        "  983,\n",
 769:        "  858,\n",
 770:        "  808,\n",
 771:        "  265,\n",
 772:        "  720,\n",
 773:        "  26,\n",
 774:        "  327,\n",
 775:        "  570,\n",
 776:        "  709,\n",
 777:        "  527,\n",
 778:        "  789,\n",
 779:        "  868,\n",
 780:        "  581,\n",
 781:        "  151,\n",
 782:        "  421],\n",
 783:        " 16: [647,\n",
 784:        "  956,\n",
 785:        "  111,\n",
 786:        "  47,\n",
 787:        "  418,\n",
 788:        "  469,\n",
 789:        "  937,\n",
 790:        "  688,\n",
 791:        "  356,\n",
 792:        "  289,\n",
 793:        "  615,\n",
 794:        "  286,\n",
 795:        "  170,\n",
 796:        "  617,\n",
 797:        "  511,\n",
 798:        "  986,\n",
 799:        "  313,\n",
 800:        "  364,\n",
 801:        "  896,\n",
 802:        "  974,\n",
 803:        "  119,\n",
 804:        "  22,\n",
 805:        "  133,\n",
 806:        "  987,\n",
 807:        "  163,\n",
 808:        "  679,\n",
 809:        "  431,\n",
 810:        "  483,\n",
 811:        "  550,\n",
 812:        "  738,\n",
 813:        "  517,\n",
 814:        "  712,\n",
 815:        "  818,\n",
 816:        "  963,\n",
 817:        "  897,\n",
 818:        "  261,\n",
 819:        "  564,\n",
 820:        "  96,\n",
 821:        "  539,\n",
 822:        "  828,\n",
 823:        "  863,\n",
 824:        "  916,\n",
 825:        "  41,\n",
 826:        "  294,\n",
 827:        "  132,\n",
 828:        "  299,\n",
 829:        "  652,\n",
 830:        "  336,\n",
 831:        "  718,\n",
 832:        "  168],\n",
 833:        " 17: [675,\n",
 834:        "  73,\n",
 835:        "  25,\n",
 836:        "  276,\n",
 837:        "  809,\n",
 838:        "  386,\n",
 839:        "  127,\n",
 840:        "  257,\n",
 841:        "  442,\n",
 842:        "  331,\n",
 843:        "  245,\n",
 844:        "  417,\n",
 845:        "  786,\n",
 846:        "  572,\n",
 847:        "  891,\n",
 848:        "  995,\n",
 849:        "  485,\n",
 850:        "  113,\n",
 851:        "  456,\n",
 852:        "  841,\n",
 853:        "  412,\n",
 854:        "  152,\n",
 855:        "  235,\n",
 856:        "  481,\n",
 857:        "  599,\n",
 858:        "  338,\n",
 859:        "  596,\n",
 860:        "  646,\n",
 861:        "  650,\n",
 862:        "  824,\n",
 863:        "  396,\n",
 864:        "  330,\n",
 865:        "  316,\n",
 866:        "  24,\n",
 867:        "  745,\n",
 868:        "  454,\n",
 869:        "  115,\n",
 870:        "  707,\n",
 871:        "  784,\n",
 872:        "  61,\n",
 873:        "  952,\n",
 874:        "  508,\n",
 875:        "  498,\n",
 876:        "  184,\n",
 877:        "  866,\n",
 878:        "  213,\n",
 879:        "  927,\n",
 880:        "  150,\n",
 881:        "  900,\n",
 882:        "  558],\n",
 883:        " 18: [648,\n",
 884:        "  999,\n",
 885:        "  624,\n",
 886:        "  203,\n",
 887:        "  146,\n",
 888:        "  182,\n",
 889:        "  585,\n",
 890:        "  704,\n",
 891:        "  906,\n",
 892:        "  670,\n",
 893:        "  482,\n",
 894:        "  984,\n",
 895:        "  785,\n",
 896:        "  503,\n",
 897:        "  486,\n",
 898:        "  296,\n",
 899:        "  239,\n",
 900:        "  875,\n",
 901:        "  252,\n",
 902:        "  492,\n",
 903:        "  537,\n",
 904:        "  99,\n",
 905:        "  335,\n",
 906:        "  957,\n",
 907:        "  200,\n",
 908:        "  506,\n",
 909:        "  108,\n",
 910:        "  193,\n",
 911:        "  588,\n",
 912:        "  359,\n",
 913:        "  657,\n",
 914:        "  373,\n",
 915:        "  94,\n",
 916:        "  60,\n",
 917:        "  960,\n",
 918:        "  366,\n",
 919:        "  14,\n",
 920:        "  3,\n",
 921:        "  810,\n",
 922:        "  951,\n",
 923:        "  583,\n",
 924:        "  142,\n",
 925:        "  761,\n",
 926:        "  637,\n",
 927:        "  505,\n",
 928:        "  711,\n",
 929:        "  339,\n",
 930:        "  35,\n",
 931:        "  851,\n",
 932:        "  743],\n",
 933:        " 19: [50,\n",
 934:        "  349,\n",
 935:        "  156,\n",
 936:        "  853,\n",
 937:        "  251,\n",
 938:        "  620,\n",
 939:        "  160,\n",
 940:        "  822,\n",
 941:        "  275,\n",
 942:        "  4,\n",
 943:        "  792,\n",
 944:        "  767,\n",
 945:        "  472,\n",
 946:        "  577,\n",
 947:        "  907,\n",
 948:        "  580,\n",
 949:        "  723,\n",
 950:        "  611,\n",
 951:        "  147,\n",
 952:        "  992,\n",
 953:        "  172,\n",
 954:        "  998,\n",
 955:        "  348,\n",
 956:        "  521,\n",
 957:        "  575,\n",
 958:        "  21,\n",
 959:        "  651,\n",
 960:        "  854,\n",
 961:        "  591,\n",
 962:        "  176,\n",
 963:        "  837,\n",
 964:        "  918,\n",
 965:        "  635,\n",
 966:        "  571,\n",
 967:        "  976,\n",
 968:        "  56,\n",
 969:        "  826,\n",
 970:        "  174,\n",
 971:        "  311,\n",
 972:        "  271,\n",
 973:        "  496,\n",
 974:        "  913,\n",
 975:        "  855,\n",
 976:        "  557,\n",
 977:        "  139,\n",
 978:        "  209,\n",
 979:        "  552,\n",
 980:        "  369,\n",
 981:        "  638,\n",
 982:        "  218],\n",
 983:        " 20: [748,\n",
 984:        "  690,\n",
 985:        "  545,\n",
 986:        "  756,\n",
 987:        "  95,\n",
 988:        "  730,\n",
 989:        "  649,\n",
 990:        "  405,\n",
 991:        "  526,\n",
 992:        "  993,\n",
 993:        "  130,\n",
 994:        "  399,\n",
 995:        "  426,\n",
 996:        "  764,\n",
 997:        "  300,\n",
 998:        "  440,\n",
 999:        "  477,\n",
1000:        "  655,\n",
1001:        "  85,\n",
1002:        "  322,\n",
1003:        "  452,\n",
1004:        "  395,\n",
1005:        "  304,\n",
1006:        "  91,\n",
1007:        "  490,\n",
1008:        "  175,\n",
1009:        "  83,\n",
1010:        "  445,\n",
1011:        "  835,\n",
1012:        "  702,\n",
1013:        "  931,\n",
1014:        "  104,\n",
1015:        "  726,\n",
1016:        "  865,\n",
1017:        "  178,\n",
1018:        "  794,\n",
1019:        "  522,\n",
1020:        "  727,\n",
1021:        "  640,\n",
1022:        "  501,\n",
1023:        "  698,\n",
1024:        "  967,\n",
1025:        "  988,\n",
1026:        "  120,\n",
1027:        "  434,\n",
1028:        "  664,\n",
1029:        "  641,\n",
1030:        "  51,\n",
1031:        "  886,\n",
1032:        "  12,\n",
1033:        "  433,\n",
1034:        "  102,\n",
1035:        "  122,\n",
1036:        "  714,\n",
1037:        "  32,\n",
1038:        "  31,\n",
1039:        "  371,\n",
1040:        "  344,\n",
1041:        "  157,\n",
1042:        "  38,\n",
1043:        "  922,\n",
1044:        "  880,\n",
1045:        "  16,\n",
1046:        "  961,\n",
1047:        "  930,\n",
1048:        "  363,\n",
1049:        "  136,\n",
1050:        "  555,\n",
1051:        "  909,\n",
1052:        "  696,\n",
1053:        "  559,\n",
1054:        "  543,\n",
1055:        "  667,\n",
1056:        "  382,\n",
1057:        "  191],\n",
1058:        " 21: [567,\n",
1059:        "  817,\n",
1060:        "  383,\n",
1061:        "  116,\n",
1062:        "  68,\n",
1063:        "  888,\n",
1064:        "  944,\n",
1065:        "  33,\n",
1066:        "  401,\n",
1067:        "  430,\n",
1068:        "  881,\n",
1069:        "  499,\n",
1070:        "  260,\n",
1071:        "  754,\n",
1072:        "  372,\n",
1073:        "  919,\n",
1074:        "  185,\n",
1075:        "  821,\n",
1076:        "  905,\n",
1077:        "  123,\n",
1078:        "  732,\n",
1079:        "  90,\n",
1080:        "  273,\n",
1081:        "  705,\n",
1082:        "  871,\n",
1083:        "  141,\n",
1084:        "  551,\n",
1085:        "  836,\n",
1086:        "  671,\n",
1087:        "  27,\n",
1088:        "  93,\n",
1089:        "  563,\n",
1090:        "  936,\n",
1091:        "  639,\n",
1092:        "  488,\n",
1093:        "  487,\n",
1094:        "  328,\n",
1095:        "  774],\n",
1096:        " 22: [470,\n",
1097:        "  258,\n",
1098:        "  378,\n",
1099:        "  509,\n",
1100:        "  459,\n",
1101:        "  887,\n",
1102:        "  246,\n",
1103:        "  520,\n",
1104:        "  438,\n",
1105:        "  601,\n",
1106:        "  856,\n",
1107:        "  343,\n",
1108:        "  143,\n",
1109:        "  280,\n",
1110:        "  597,\n",
1111:        "  140,\n",
1112:        "  183,\n",
1113:        "  444,\n",
1114:        "  681],\n",
1115:        " 23: [894, 538, 253, 468, 194, 367, 173, 632, 479],\n",
1116:        " 24: [800, 46, 882, 799, 874],\n",
1117:        " 25: [169, 806],\n",
1118:        " 0: [297],\n",
1119:        " 26: [755]}"
1120:       ]
1121:      },
1122:      "execution_count": 64,
1123:      "metadata": {},
1124:      "output_type": "execute_result"
1125:     }
1126:    ],
1127:    "source": [
1128:     "sbm.block_members"
1129:    ]
1130:   },
1131:   {
1132:    "cell_type": "code",
1133:    "execution_count": 36,
1134:    "metadata": {},
1135:    "outputs": [
1136:     {
1137:      "ename": "KeyError",
1138:      "evalue": "2",
1139:      "output_type": "error",
1140:      "traceback": [
1141:       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
1142:       "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
1143:       "Cell \u001b[0;32mIn[36], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Perform some partition manipulations\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43msbm\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmerge_blocks\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m sbm\u001b[38;5;241m.\u001b[39mmove_node(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m3\u001b[39m)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Compute the new likelihood\u001b[39;00m\n",
1144:       "File \u001b[0;32m~/anon_sbm/src/sbm/sbm.py:159\u001b[0m, in \u001b[0;36mStochasticBlockModel.merge_blocks\u001b[0;34m(self, block_a, block_b)\u001b[0m\n\u001b[1;32m    157\u001b[0m new_block_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmin\u001b[39m(block_a, block_b)\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mblock_members[new_block_idx] \u001b[38;5;241m=\u001b[39m merged_nodes\n\u001b[0;32m--> 159\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mblock_members\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;28;43mmax\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mblock_a\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mblock_b\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;66;03m# Update blocks mapping\u001b[39;00m\n\u001b[1;32m    162\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m node \u001b[38;5;129;01min\u001b[39;00m merged_nodes:\n",
1145:       "\u001b[0;31mKeyError\u001b[0m: 2"
1146:      ]
1147:     }
1148:    ],
1149:    "source": [
1150:     "# Perform some partition manipulations\n",
1151:     "sbm.merge_blocks(1, 2)\n",
1152:     "sbm.move_node(10, 3)\n",
1153:     "\n",
1154:     "# Compute the new likelihood\n",
1155:     "new_likelihood = sbm.compute_likelihood()\n",
1156:     "print(f\"New Likelihood: {new_likelihood}\")\n",
1157:     "\n",
1158:     "# Check minimum block size\n",
1159:     "min_size = sbm.min_block_size()\n",
1160:     "print(f\"Minimum Block Size: {min_size}\")"
1161:    ]
1162:   },
1163:   {
1164:    "cell_type": "code",
1165:    "execution_count": null,
1166:    "metadata": {},
1167:    "outputs": [],
1168:    "source": []
1169:   }
1170:  ],
1171:  "metadata": {
1172:   "kernelspec": {
1173:    "display_name": "anon_sbm",
1174:    "language": "python",
1175:    "name": "python3"
1176:   },
1177:   "language_info": {
1178:    "codemirror_mode": {
1179:     "name": "ipython",
1180:     "version": 3
1181:    },
1182:    "file_extension": ".py",
1183:    "mimetype": "text/x-python",
1184:    "name": "python",
1185:    "nbconvert_exporter": "python",
1186:    "pygments_lexer": "ipython3",
1187:    "version": "3.13.0"
1188:   }
1189:  },
1190:  "nbformat": 4,
1191:  "nbformat_minor": 2
1192: }

================
File: notebooks/sbm_visualize.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "code",
  5:    "execution_count": 2,
  6:    "metadata": {},
  7:    "outputs": [
  8:     {
  9:      "name": "stdout",
 10:      "output_type": "stream",
 11:      "text": [
 12:       "Collecting networkx\n",
 13:       "  Using cached networkx-3.4.2-py3-none-any.whl.metadata (6.3 kB)\n",
 14:       "Using cached networkx-3.4.2-py3-none-any.whl (1.7 MB)\n",
 15:       "Installing collected packages: networkx\n",
 16:       "Successfully installed networkx-3.4.2\n"
 17:      ]
 18:     }
 19:    ],
 20:    "source": [
 21:     "!pip install networkx\n",
 22:     "!pip install matplotlib\n",
 23:     "!pip install numpy"
 24:    ]
 25:   },
 26:   {
 27:    "cell_type": "code",
 28:    "execution_count": 5,
 29:    "metadata": {},
 30:    "outputs": [
 31:     {
 32:      "data": {
 33:       "image/png": "",
 34:       "text/plain": [
 35:        "<Figure size 1200x500 with 3 Axes>"
 36:       ]
 37:      },
 38:      "metadata": {},
 39:      "output_type": "display_data"
 40:     }
 41:    ],
 42:    "source": [
 43:     "import networkx as nx\n",
 44:     "import matplotlib.pyplot as plt\n",
 45:     "import numpy as np\n",
 46:     "\n",
 47:     "def plot_sbm_graph(block_sizes, p_matrix):\n",
 48:     "    # Validate the connectivity matrix\n",
 49:     "    n_blocks = len(block_sizes)\n",
 50:     "    if p_matrix.shape != (n_blocks, n_blocks):\n",
 51:     "        raise ValueError(\"The connectivity matrix dimensions must match the number of blocks.\")\n",
 52:     "    if np.any(p_matrix < 0) or np.any(p_matrix > 1):\n",
 53:     "        raise ValueError(\"All probabilities in the connectivity matrix must be between 0 and 1.\")\n",
 54:     "\n",
 55:     "    # Generate Stochastic Block Model graph\n",
 56:     "    G = nx.stochastic_block_model(block_sizes, p_matrix)\n",
 57:     "\n",
 58:     "    # Get adjacency matrix\n",
 59:     "    adj_matrix = nx.to_numpy_array(G)\n",
 60:     "\n",
 61:     "    # Assign colors based on block membership\n",
 62:     "    colors = [G.nodes[node]['block'] for node in G.nodes]\n",
 63:     "\n",
 64:     "    # Plotting the graph\n",
 65:     "    pos = nx.spring_layout(G, seed=42)  # For consistent layout\n",
 66:     "    plt.figure(figsize=(12, 5))\n",
 67:     "\n",
 68:     "    # Subplot 1: SBM graph\n",
 69:     "    plt.subplot(1, 2, 1)\n",
 70:     "    nx.draw(G, pos, node_color=colors, cmap=plt.cm.tab10, with_labels=False,\n",
 71:     "            node_size=100, edge_color='gray')\n",
 72:     "    plt.title('Stochastic Block Model')\n",
 73:     "\n",
 74:     "    # Subplot 2: Adjacency matrix with visible block structure\n",
 75:     "    plt.subplot(1, 2, 2)\n",
 76:     "    plt.imshow(adj_matrix, cmap='Greys', interpolation='none')\n",
 77:     "    plt.colorbar(label='Edge Weight')\n",
 78:     "    plt.title('Adjacency Matrix')\n",
 79:     "    plt.xlabel('Nodes')\n",
 80:     "    plt.ylabel('Nodes')\n",
 81:     "\n",
 82:     "    # Overlay block boundaries for visual separation\n",
 83:     "    block_boundaries = np.cumsum([0] + block_sizes)\n",
 84:     "    for boundary in block_boundaries:\n",
 85:     "        plt.axhline(boundary - 0.5, color='red', linestyle='--', linewidth=0.5)\n",
 86:     "        plt.axvline(boundary - 0.5, color='red', linestyle='--', linewidth=0.5)\n",
 87:     "\n",
 88:     "    plt.tight_layout()\n",
 89:     "    plt.show()\n",
 90:     "\n",
 91:     "# Example usage\n",
 92:     "block_sizes = [5, 8, 10]  # Sizes of each block\n",
 93:     "p_matrix = np.array([[0, 0.1, 0.5],\n",
 94:     "                     [0.1, 0.6, 0.1],\n",
 95:     "                     [0.5, 0.1, 0.8]])  # Full inter-block connectivity matrix\n",
 96:     "\n",
 97:     "plot_sbm_graph(block_sizes, p_matrix)\n"
 98:    ]
 99:   },
100:   {
101:    "cell_type": "code",
102:    "execution_count": null,
103:    "metadata": {},
104:    "outputs": [],
105:    "source": []
106:   }
107:  ],
108:  "metadata": {
109:   "kernelspec": {
110:    "display_name": "anon_sbm",
111:    "language": "python",
112:    "name": "python3"
113:   },
114:   "language_info": {
115:    "codemirror_mode": {
116:     "name": "ipython",
117:     "version": 3
118:    },
119:    "file_extension": ".py",
120:    "mimetype": "text/x-python",
121:    "name": "python",
122:    "nbconvert_exporter": "python",
123:    "pygments_lexer": "ipython3",
124:    "version": "3.13.0"
125:   }
126:  },
127:  "nbformat": 4,
128:  "nbformat_minor": 2
129: }

================
File: notebooks/surrogate_accuracy_26-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "2b29dd78",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Notebook for investigating network accuracy of surrogates"
  9:    ]
 10:   },
 11:   {
 12:    "cell_type": "code",
 13:    "execution_count": 1,
 14:    "id": "dfb246da",
 15:    "metadata": {},
 16:    "outputs": [],
 17:    "source": [
 18:     "import numpy as np\n",
 19:     "import pandas as pd\n",
 20:     "import matplotlib.pyplot as plt"
 21:    ]
 22:   },
 23:   {
 24:    "cell_type": "code",
 25:    "execution_count": 2,
 26:    "id": "fc84799c",
 27:    "metadata": {},
 28:    "outputs": [],
 29:    "source": [
 30:     "import sys\n",
 31:     "from pathlib import Path\n",
 32:     "\n",
 33:     "### Load all surrogate statistics\n",
 34:     "folder_path = Path('/Users/lmmi/anon_sbm/results/surrogate_statistics')\n",
 35:     "\n",
 36:     "# find all log files in the logs directory\n",
 37:     "stat_files = list(folder_path.glob(\"*.csv\"))"
 38:    ]
 39:   },
 40:   {
 41:    "cell_type": "code",
 42:    "execution_count": 3,
 43:    "id": "707ac12e",
 44:    "metadata": {},
 45:    "outputs": [
 46:     {
 47:      "data": {
 48:       "text/plain": [
 49:        "12"
 50:       ]
 51:      },
 52:      "execution_count": 3,
 53:      "metadata": {},
 54:      "output_type": "execute_result"
 55:     }
 56:    ],
 57:    "source": [
 58:     "len(stat_files)"
 59:    ]
 60:   },
 61:   {
 62:    "cell_type": "code",
 63:    "execution_count": 4,
 64:    "id": "8ee87d6c",
 65:    "metadata": {},
 66:    "outputs": [],
 67:    "source": [
 68:     "def determine_block_size(stat_file):\n",
 69:     "    \"\"\"\n",
 70:     "    Determine min_block_size from the filename.\n",
 71:     "\n",
 72:     "    min_block_size is encoded in filename as *min_block_size_{min_block_size}*.csv\n",
 73:     "    \"\"\"\n",
 74:     "\n",
 75:     "    # find location of substring 'min_block_size_'\n",
 76:     "    index = stat_file.name.find('min_block_size_')\n",
 77:     "\n",
 78:     "    tail = stat_file.name[index + len('min_block_size_'):]\n",
 79:     "    size = tail.split('_')[0]\n",
 80:     "\n",
 81:     "    # check if size is a digit\n",
 82:     "    if not size.isdigit():\n",
 83:     "        raise ValueError(f\"Invalid size in filename: {stat_file.name}\")\n",
 84:     "    return int(size)"
 85:    ]
 86:   },
 87:   {
 88:    "cell_type": "code",
 89:    "execution_count": 5,
 90:    "id": "f5f8ac7e",
 91:    "metadata": {},
 92:    "outputs": [],
 93:    "source": [
 94:     "df_list = []\n",
 95:     "\n",
 96:     "for stat_file in stat_files:\n",
 97:     "    df = pd.read_csv(stat_file)\n",
 98:     "    df[\"block_size\"] = determine_block_size(stat_file)\n",
 99:     "    df['surrogate'] = [int(surrogate_str.split(\"_\")[1]) for surrogate_str in df['surrogate']]\n",
100:     "\n",
101:     "    df_list.append(df)\n",
102:     "\n",
103:     "df = pd.concat(df_list, ignore_index=True)"
104:    ]
105:   },
106:   {
107:    "cell_type": "code",
108:    "execution_count": null,
109:    "id": "782cc864",
110:    "metadata": {},
111:    "outputs": [],
112:    "source": []
113:   },
114:   {
115:    "cell_type": "code",
116:    "execution_count": 6,
117:    "id": "0ddc127e",
118:    "metadata": {},
119:    "outputs": [],
120:    "source": [
121:     "marker_styles = {\n",
122:     "    \"congress_twitter\": \"o\",\n",
123:     "    \"caltech_fb\": \"s\",\n",
124:     "    \"eu_email\": \"D\",\n",
125:     "}\n",
126:     "colors = {\n",
127:     "    \"congress_twitter\": \"teal\",\n",
128:     "    \"caltech_fb\": \"salmon\",\n",
129:     "    \"eu_email\": \"black\",\n",
130:     "}"
131:    ]
132:   },
133:   {
134:    "cell_type": "code",
135:    "execution_count": null,
136:    "id": "57a9d87f",
137:    "metadata": {},
138:    "outputs": [
139:     {
140:      "name": "stderr",
141:      "output_type": "stream",
142:      "text": [
143:       "/var/folders/y6/j9fbqcvx6lb5l99614n30y4c0000gn/T/ipykernel_39806/3647360340.py:79: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
144:       "  fig.show()\n"
145:      ]
146:     },
147:     {
148:      "data": {
149:       "image/png": "",
150:       "text/plain": [
151:        "<Figure size 1000x300 with 3 Axes>"
152:       ]
153:      },
154:      "metadata": {},
155:      "output_type": "display_data"
156:     }
157:    ],
158:    "source": [
159:     "### Visualize reconstruction error across block sizes and datasets\n",
160:     "fig, ax = plt.subplots(\n",
161:     "    figsize=(10, 3),\n",
162:     "    ncols = 3,\n",
163:     "    sharex=True,\n",
164:     "    sharey=False,\n",
165:     "    # set spacing between subplots\n",
166:     "    gridspec_kw={'wspace': 0.7}\n",
167:     "    )\n",
168:     "\n",
169:     "for group in df.groupby(['block_size', 'dataset']):\n",
170:     "    block_size, dataset = group[0]\n",
171:     "    group_data = group[1]\n",
172:     "\n",
173:     "    marker = marker_styles[dataset]\n",
174:     "    color = colors[dataset]\n",
175:     "\n",
176:     "    # plot the shortest-path reconstruction error for each surrogate\n",
177:     "    path_errors = group_data['shortest_path'].mean()\n",
178:     "    ax[0].plot(\n",
179:     "        [block_size],\n",
180:     "        [path_errors],\n",
181:     "        label=f\"{dataset}\",\n",
182:     "        marker=marker,\n",
183:     "        linewidth=0,\n",
184:     "        color=color\n",
185:     "    )\n",
186:     "\n",
187:     "    # plot the degree-dist reconstruction error for each surrogate\n",
188:     "    degree_errors = group_data['degree'].mean()\n",
189:     "    ax[1].plot(\n",
190:     "        [block_size],\n",
191:     "        [degree_errors],\n",
192:     "        marker=marker,\n",
193:     "        linewidth=0,\n",
194:     "        color=color\n",
195:     "    )\n",
196:     "\n",
197:     "    clustering_errors = group_data['clustering'].mean()\n",
198:     "    ax[2].plot(\n",
199:     "        [block_size],\n",
200:     "        [clustering_errors],\n",
201:     "        marker=marker,\n",
202:     "        linewidth=0,\n",
203:     "        color=color\n",
204:     "    )\n",
205:     "        \n",
206:     "ax[0].set_ylabel('Shortest-path distribution error', fontsize=12)\n",
207:     "ax[1].set_ylabel('Degree distribution error', fontsize=12)\n",
208:     "ax[2].set_ylabel('Clustering distribution error', fontsize=12)\n",
209:     "\n",
210:     "xticks = df['block_size'].unique()[::3]\n",
211:     "for axis in ax:\n",
212:     "    axis.set_xscale('log')\n",
213:     "    axis.set_xticks(xticks)\n",
214:     "    axis.set_xticklabels(xticks, fontsize=12)\n",
215:     "    axis.spines[['top', 'right']].set_visible(False)\n",
216:     "    axis.set_xlabel('Block size', fontsize=12)\n",
217:     "\n",
218:     "    axis.set_xlabel('Block Size')\n",
219:     "\n",
220:     "\n",
221:     "### Construct legend from single axis\n",
222:     "handles, labels = ax[0].get_legend_handles_labels()\n",
223:     "legend_set = set(zip(labels, handles))\n",
224:     "\n",
225:     "by_label = dict(legend_set)\n",
226:     "ax[0].legend(\n",
227:     "    by_label.values(),\n",
228:     "    by_label.keys(),\n",
229:     "    loc='lower left',\n",
230:     "    bbox_to_anchor=(0, -0.7),\n",
231:     "    fontsize=10,\n",
232:     "    )\n",
233:     "\n",
234:     "fig.show()"
235:    ]
236:   },
237:   {
238:    "cell_type": "code",
239:    "execution_count": null,
240:    "id": "1f49754b",
241:    "metadata": {},
242:    "outputs": [],
243:    "source": []
244:   }
245:  ],
246:  "metadata": {
247:   "kernelspec": {
248:    "display_name": "anon_sbm_notebook",
249:    "language": "python",
250:    "name": "python3"
251:   },
252:   "language_info": {
253:    "codemirror_mode": {
254:     "name": "ipython",
255:     "version": 3
256:    },
257:    "file_extension": ".py",
258:    "mimetype": "text/x-python",
259:    "name": "python",
260:    "nbconvert_exporter": "python",
261:    "pygments_lexer": "ipython3",
262:    "version": "3.12.11"
263:   }
264:  },
265:  "nbformat": 4,
266:  "nbformat_minor": 5
267: }

================
File: planted_partitions/undirected_planted_partitions.py
================
  1: #!/usr/bin/env python3
  2: """
  3: undirected_planted_partition.py
  4: --------------------------------
  5: Simple smoke-test for the swap-only MCMC implementation.
  6: For each of 100 independent repetitions we
  7: 1.  Draw an undirected 100-node SBM with
  8:         – B = 10 blocks of size 10
  9:         – p_in  = 0.30   (within-block connection probability)
 10:         – p_out = 0.05   (between-block probability)
 11: 2.  Build an initial *random* equal-size partition with
 12:         UniformSmallBlockAssigner(min_block_size=10)             (code in block_assigner.py)
 13: 3.  Run the adaptive swap-only MCMC for `n_iter` iterations.
 14: 4.  Compute the Jaccard index between
 15:         – the set of node pairs co-clustered in the *final* state, and
 16:         – the same set for the planted partition.
 17: The script prints the mean, standard deviation and a histogram
 18: of the 100 Jaccard scores so you can eyeball whether the sampler
 19: typically finds the planted structure.
 20: Dependencies
 21: ------------
 22: Only `numpy`, `scipy` and the local `sbm` package (already required by
 23: your project).
 24: Author: Von Nøgenmand
 25: """
 26: from typing import Sequence, Hashable
 27: from collections.abc import Sequence
 28: import numpy as np
 29: from scipy.sparse import csr_array
 30: from scipy.optimize import linear_sum_assignment
 31: from sklearn.metrics import (
 32:     adjusted_rand_score,
 33:     normalized_mutual_info_score,
 34: )
 35: from tqdm import tqdm
 36: from sbm.graph_data import GraphData
 37: from sbm.block_assigner import (
 38:     UniformSmallBlockAssigner,
 39:     MetisBlockAssigner,
 40: )
 41: from sbm.model import SBMModel
 42: ###############################################################################
 43: # utility helpers
 44: ###############################################################################
 45: def planted_blocks(n_nodes: int, block_size: int, rng) -> dict[int, int]:
 46:     """Random planted partition: block 0 → nodes 0–9, block 1 → 10–19, …"""
 47:     random_nodes = rng.permutation(n_nodes)
 48:     # generate a random list of blocks for the nodes ensuring the correct block size
 49:     random_blocks = np.arange(n_nodes) // block_size
 50:     random_blocks = rng.permutation(random_blocks)
 51:     return {v: block for (v, block) in zip(random_nodes, random_blocks)}
 52: def sample_sbm(rng: np.random.Generator,
 53:                blocks: dict[int, int],
 54:                p_in: float,
 55:                p_out: float) -> csr_array:
 56:     """Generate an undirected loop-free adjacency matrix for a binary SBM."""
 57:     n = len(blocks)
 58:     adj = np.zeros((n, n), dtype=np.int8)
 59:     # probability matrix look-up
 60:     for u in range(n):
 61:         for v in range(u + 1, n):          # u < v → strict upper triangle
 62:             p = p_in if blocks[u] == blocks[v] else p_out
 63:             if rng.random() < p:
 64:                 adj[u, v] = adj[v, u] = 1  # symmetrise
 65:     return csr_array(adj)                 # sparse CSR
 66: def misclassification_rate(
 67:     true_labels: Sequence[Hashable],
 68:     est_labels: Sequence[Hashable],
 69: ) -> float:
 70:     """
 71:     Percentage of vertices whose community label is wrong *after*
 72:     optimally permuting the estimated labels to match the true ones.
 73:     Parameters
 74:     ----------
 75:     true_labels : sequence
 76:         Ground-truth block labels – length N.
 77:     est_labels  : sequence
 78:         Estimated block labels  – length N.
 79:     Returns
 80:     -------
 81:     float
 82:         Mis-classification rate in the interval [0, 1].
 83:     Notes
 84:     -----
 85:     * Label sets may use arbitrary hashables (str, int, …) and need not
 86:       have the same cardinality.  Any surplus estimated or true blocks
 87:       are matched to “dummy” columns/rows filled with zeros.
 88:     * Uses the Hungarian algorithm (via `scipy.optimize.linear_sum_assignment`)
 89:       to maximise the number of correctly matched vertices.
 90:     """
 91:     true = np.asarray(true_labels)
 92:     est  = np.asarray(est_labels)
 93:     if true.shape != est.shape:
 94:         raise ValueError("true_labels and est_labels must have the same length")
 95:     # Map arbitrary labels to contiguous integers 0..T-1 and 0..E-1
 96:     true_ids,  true_inv  = np.unique(true, return_inverse=True)
 97:     est_ids,   est_inv   = np.unique(est,  return_inverse=True)
 98:     T, E = len(true_ids), len(est_ids)
 99:     N    = len(true)
100:     # Build contingency matrix C[e, t] = |{ i : est_i=e and true_i=t }|
101:     C = np.zeros((E, T), dtype=int)
102:     np.add.at(C, (est_inv, true_inv), 1)
103:     # Pad to square (Hungarian implementation needs it or we need to
104:     # maximise on rectangles by padding zeros).
105:     if E != T:
106:         dim = max(E, T)
107:         C_padded = np.zeros((dim, dim), dtype=int)
108:         C_padded[:E, :T] = C
109:         C = C_padded
110:     # Maximise trace(C[perm])  →  minimise −C for Hungarian
111:     row_ind, col_ind = linear_sum_assignment(-C)
112:     matched = C[row_ind, col_ind].sum()
113:     return 1.0 - matched / N
114: ###############################################################################
115: # main loop
116: ###############################################################################
117: def main(
118:     n_nodes = 100,
119:     block_size = 10,
120:     p_in = 0.30,
121:     p_out = 0.05,
122:     n_experiments = 10,
123:     n_iter = 3_000,
124:     rng_master = np.random.default_rng(42),
125:     temperature: float = 1
126: ):
127:     init_scores = []
128:     final_scores = []
129:     for rep in tqdm(range(n_experiments)):
130:         rng = np.random.default_rng(rng_master.integers(2**32))
131:         # --- 1. plant graph -----------------------------------------------------
132:         planted = planted_blocks(n_nodes, block_size, rng)
133:         adj     = sample_sbm(rng, planted, p_in, p_out)
134:         # --- 2. initial random partition ---------------------------------------
135:         gdata    = GraphData(adjacency_matrix=adj, directed=False)
136:         assigner = MetisBlockAssigner(graph_data=gdata,
137:                                             rng=rng,
138:                                             min_block_size=block_size
139:                                         )
140:         init_blocks = assigner.compute_assignment()
141:         init_scores.append(
142:             misclassification_rate(
143:                 true_labels=list(planted.values()),
144:                 est_labels=list(init_blocks.blocks.values())
145:             )
146:         )
147:         sbm = SBMModel(
148:                 initial_blocks=init_blocks,
149:                 rng=rng,
150:                 log=True,  # no logging
151:             )
152:         print(f"Initial ll {sbm.likelihood_calculator.ll:.3f}")
153:         sbm.fit(num_iterations=n_iter,
154:                 min_block_size=block_size,
155:                 initial_temperature=temperature,
156:                 cooling_rate=0.999)
157:         final_blocks = sbm.get_block_assignments()
158:         # --- 4. score -----------------------------------------------------------
159:         final_scores.append(
160:             misclassification_rate(
161:                 true_labels=list(planted.values()),
162:                 est_labels=list(final_blocks.values())
163:             )
164:         )
165:     # --- print results ----------------------------------------------------------
166:     print(f"Initial misclassification rate: {np.mean(init_scores):.3f} ± {np.std(init_scores):.3f}")
167:     print(f"Final misclassification rate:   {np.mean(final_scores):.3f} ± {np.std(final_scores):.3f}")
168: if __name__ == "__main__":
169:     main(
170:         n_nodes=300,
171:         block_size=3,
172:         p_in=0.5,
173:         p_out=0.01,
174:         n_experiments=1,
175:         n_iter=5_000,
176:         rng_master=np.random.default_rng(42),
177:         temperature=1e-2
178:     )

================
File: slurm_scripts/fit_sbm.sh
================
 1: #!/bin/sh
 2: ### General options
 3: #BSUB -q gpua100
 4: #BSUB -J anon_sbm_fit
 5: #BSUB -n 1
 6: #BSUB -R "span[hosts=1]"
 7: #BSUB -R "rusage[mem=10GB]"
 8: #BSUB -M 20GB
 9: #BSUB -W 12:00
10: #BSUB -o slurm_outputs/anon_sbm_fit_%J.out
11: #BSUB -e slurm_outputs/anon_sbm_fit_%J.err
12: module purge
13: module load python3/3.12.11
14: source /zhome/c1/2/109045/anon_sbm/bin/activate
15: python3 src/pipelines/run_all.py

================
File: src/data_processing/process_caltech.py
================
 1: """
 2: Script for converting caltech-facebook data to simple edgelist format
 3: change from format:
 4:     %MatrixMarket matrix coordinate pattern symmetric 
 5:     769 769 16656
 6:     5 1
 7:     31 1
 8: to format:
 9:     769 769 16656
10:     5 1
11:     31 1
12: """
13: from pathlib import Path
14: if __name__ == "__main__":
15:     file_path = Path("data/raw/socfb-Caltech36/socfb-Caltech36.mtx")
16:     # read file
17:     with file_path.open("r") as f:
18:         lines = f.readlines()
19:     # process lines
20:     processed_lines = []
21:     # skip first two lines (Matrix Market header)
22:     for idx, line in enumerate(lines):
23:         if idx < 2:
24:             continue
25:         parts = line.split()
26:         if len(parts) >= 2:
27:             processed_lines.append(f"{parts[0]} {parts[1]}\n")
28:     # processed data goes in the "processed" folder in the parent-folder
29:     out_folder_path = Path("data/processed")
30:     out_file_path = out_folder_path / "caltech_fb.edgelist"
31:     # write to output file
32:     out_folder_path.mkdir(parents=True, exist_ok=True)
33:     with out_file_path.open("w") as f:
34:         f.writelines(processed_lines)
35:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_congress_twitter.py
================
 1: """
 2: Script for converting congress data to simple edgelist format
 3: change from format:
 4:   0 4 {'weight': 0.002105263157894737}
 5:   0 12 {'weight': 0.002105263157894737}
 6:   0 18 {'weight': 0.002105263157894737}
 7:   0 25 {'weight': 0.004210526315789474}
 8: to format:
 9:   0 4
10:   0 12
11:   0 18
12:   0 25
13: """
14: from pathlib import Path
15: if __name__ == "__main__":
16:     file_path = Path("data/raw/congress_twitter/congress.edgelist")
17:     # read file
18:     with file_path.open("r") as f:
19:         lines = f.readlines()
20:     # process lines
21:     processed_lines = []
22:     for line in lines:
23:         parts = line.split()
24:         if len(parts) >= 2:
25:             processed_lines.append(f"{parts[0]} {parts[1]}\n")
26:     # processed data goes in the "processed" folder in the parent-folder
27:     out_folder_path = Path("data/processed")
28:     out_file_path = out_folder_path / "congress_twitter.edgelist"
29:     # write to output file
30:     out_folder_path.mkdir(parents=True, exist_ok=True)
31:     with out_file_path.open("w") as f:
32:         f.writelines(processed_lines)
33:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_email_eu.py
================
 1: """
 2: Script for converting email-eu data to simple edgelist format
 3: change from format:
 4:     582 364 0
 5:     168 472 2797
 6:     168 912 3304
 7:     2 790 4523
 8: to format:
 9:     582 364
10:     168 472
11:     168 912
12:     2 790
13: while removing self-loops and duplicate edges.
14: """
15: from pathlib import Path
16: if __name__ == "__main__":
17:     file_path = Path("data/raw/email_eu/email-Eu-core-temporal.txt")
18:     # read file
19:     with file_path.open("r") as f:
20:         lines = f.readlines()
21:     # process lines
22:     processed_lines = []
23:     edgeset = set()
24:     for line in lines:
25:         parts = line.split()
26:         edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
27:         if edge not in edgeset:
28:             edgeset.add(edge)
29:             # only keep the first two parts of the line
30:             # and ignore the third part (weight)
31:             # also ignore self-loops
32:             if len(parts) >= 2 and parts[0] != parts[1]:
33:                 processed_lines.append(f"{parts[0]} {parts[1]}\n")
34:     # processed data goes in the "processed" folder in the parent-folder
35:     out_folder_path = Path("data/processed")
36:     out_file_path = out_folder_path / "eu_email.edgelist"
37:     # write to output file
38:     out_folder_path.mkdir(parents=True, exist_ok=True)
39:     with out_file_path.open("w") as f:
40:         f.writelines(processed_lines)
41:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_enron_email.py
================
 1: """
 2: Script for converting enron-email data to simple edgelist format
 3: change from format:
 4:     # Directed graph (each unordered pair of nodes is saved once): Email-Enron.txt 
 5:     # Enron email network (edge indicated that email was exchanged, undirected edges)
 6:     # Nodes: 36692 Edges: 367662
 7:     # FromNodeId	ToNodeId
 8:     0	1
 9:     1	0
10:     1	2
11:     1	3
12: to format:
13:     0	1
14:     1	0
15:     1	2
16:     1	3
17: while removing self-loops and duplicate edges.
18: """
19: from pathlib import Path
20: if __name__ == "__main__":
21:     file_path = Path("data/raw/enron_email/email-Enron.txt")
22:     # read file
23:     with file_path.open("r") as f:
24:         lines = f.readlines()
25:     # process lines
26:     processed_lines = []
27:     edgeset = set()
28:     for index, line in enumerate(lines):
29:         if index >= 4:
30:             parts = line.split()
31:             edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
32:             if edge not in edgeset:
33:                 edgeset.add(edge)
34:                 if parts[0] != parts[1]:
35:                     processed_lines.append(f"{parts[0]} {parts[1]}\n")
36:     # processed data goes in the "processed" folder in the parent-folder
37:     out_folder_path = Path("data/processed")
38:     out_file_path = out_folder_path / "enron_email.edgelist"
39:     # write to output file
40:     out_folder_path.mkdir(parents=True, exist_ok=True)
41:     with out_file_path.open("w") as f:
42:         f.writelines(processed_lines)
43:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_lastfm_asia.py
================
 1: """
 2: Script for converting lastfm-asia data to simple edgelist format
 3: remove the header and remove self-loops and duplicate edges.
 4: """
 5: from pathlib import Path
 6: if __name__ == "__main__":
 7:     file_path = Path("data/raw/lastfm_asia/lastfm_asia_edges.csv")
 8:     # read file
 9:     with file_path.open("r") as f:
10:         lines = f.readlines()
11:     # process lines
12:     processed_lines = []
13:     edgeset = set()
14:     for index, line in enumerate(lines):
15:         if index >= 1:
16:             parts = line.split(",")
17:             edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
18:             if edge not in edgeset:
19:                 edgeset.add(edge)
20:                 if len(parts) >= 1 and parts[0] != parts[1]:
21:                     processed_lines.append(f"{parts[0]} {parts[1]}\n")
22:     # processed data goes in the "processed" folder in the parent-folder
23:     out_folder_path = Path("data/processed")
24:     out_file_path = out_folder_path / "lastfm_asia.edgelist"
25:     # write to output file
26:     out_folder_path.mkdir(parents=True, exist_ok=True)
27:     with out_file_path.open("w") as f:
28:         f.writelines(processed_lines)
29:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/data_processing/process_wiki_vote.py
================
 1: """
 2: Script for converting wiki-voce data to simple edgelist format
 3: change from format:
 4:     # Directed graph (each unordered pair of nodes is saved once): Wiki-Vote.txt 
 5:     # Wikipedia voting on promotion to administratorship (till January 2008). Directed edge A->B means user A voted on B becoming Wikipedia administrator.
 6:     # Nodes: 7115 Edges: 103689
 7:     # FromNodeId	ToNodeId
 8:     30	1412
 9:     30	3352
10:     30	5254
11: to format:
12:     30	1412
13:     30	3352
14:     30	5254
15: while removing self-loops and duplicate edges.
16: """
17: from pathlib import Path
18: if __name__ == "__main__":
19:     file_path = Path("data/raw/wiki_vote/wiki-vote.txt")
20:     # read file
21:     with file_path.open("r") as f:
22:         lines = f.readlines()
23:     # process lines
24:     processed_lines = []
25:     edgeset = set()
26:     for index, line in enumerate(lines):
27:         if index >= 4:
28:             parts = line.split()
29:             edge = tuple(sorted(( int(parts[0]), int(parts[1]) )))
30:             if edge not in edgeset:
31:                 edgeset.add(edge)
32:                 # only keep the first two parts of the line
33:                 # and ignore the third part (weight)
34:                 # also ignore self-loops
35:                 if parts[0] != parts[1]:
36:                     processed_lines.append(f"{parts[0]} {parts[1]}\n")
37:     # processed data goes in the "processed" folder in the parent-folder
38:     out_folder_path = Path("data/processed")
39:     out_file_path = out_folder_path / "wiki_vote.edgelist"
40:     # write to output file
41:     out_folder_path.mkdir(parents=True, exist_ok=True)
42:     with out_file_path.open("w") as f:
43:         f.writelines(processed_lines)
44:     print(f"Processed edgelist saved to {out_file_path}")

================
File: src/metrics/__init__.py
================
1: from .shortest_path import shortest_path_distance
2: from .degree import degree_distance
3: from .clustering import clustering_distance
4: # registry maps a short name -> call-able
5: REGISTRY = {
6:     "shortest_path": shortest_path_distance,
7:     "degree": degree_distance,
8:     "clustering": clustering_distance,
9: }

================
File: src/pipelines/generate_and_evaluate_surrogates.py
================
 1: """
 2:     Generate surrogate SBM graphs and evaluate them against empirical data.
 3: """
 4: from typing import TypedDict, List, Union
 5: import argparse
 6: import yaml
 7: import csv
 8: from pathlib import Path
 9: import numpy as np
10: from metrics import REGISTRY
11: from sbm.io import SBMWriter
12: from sbm.sampling import sample_sbm_graph_from_fit
13: from sbm.io import GraphLoader
14: from sbm.utils.pipeline_utils import (
15:     sbmfit_folderpath,
16:     surrogate_statistics_filename,
17:     FitConfig,
18:     EvalConfig,
19: )
20: #######################
21: ### Configuration Types 
22: #######################
23: ############################################
24: ### main function
25: ############################################
26: def main(fit_config: str, eval_config: str): # type: ignore
27:     fit_config: FitConfig = yaml.safe_load(Path(fit_config).read_text())
28:     rng = np.random.default_rng(fit_config["seed"])
29:     data_config = fit_config["datasets"] # type: ignore
30:     eval_config: EvalConfig = yaml.safe_load(Path(eval_config).read_text())
31:     for sbm_config in fit_config["sbm"]:
32:         for ds in data_config:
33:             # Load empirical graph
34:             g = GraphLoader.load(
35:                     Path(ds["path"]),
36:                     force_undirected=sbm_config["force_undirected"], # type: ignore
37:                 )
38:             emp = g.adjacency
39:             # load fitted model
40:             fit_folder_path = sbmfit_folderpath(
41:                 base_dir=Path("results/sbm_fits"),
42:                 sbm_config=sbm_config,# type: ignore
43:                 data_spec=ds,
44:             )
45:             # load the sbm fit
46:             sbm_fit = SBMWriter.load(fit_folder_path)
47:             # check if metrics have been cached earlier
48:             out = surrogate_statistics_filename(
49:                 base_dir=Path("results/surrogate_statistics"),
50:                 eval_configs=eval_config,
51:                 sbm_config=sbm_config,# type: ignore
52:                 data_spec=ds,
53:             )
54:             out.parent.mkdir(exist_ok=True)
55:             if out.exists() and not eval_config["overwrite"]:
56:                 continue
57:             # Generate surrogates and campare metrics
58:             results = []
59:             for i in range(eval_config["n_surrogates"]):
60:                 surr = sample_sbm_graph_from_fit(
61:                     sbm_fit=sbm_fit,
62:                     rng=rng,
63:                 )
64:                 surr = surr.adjacency
65:                 row = {"dataset": ds["name"], "surrogate": f'surr_{i}'}
66:                 for m in eval_config["metrics"]:
67:                     row[m] = REGISTRY[m](emp, surr)
68:                 results.append(row)
69:             with out.open("w", newline="") as f:
70:                 w = csv.DictWriter(f, fieldnames=results[0].keys())
71:                 w.writeheader(); w.writerows(results)
72: if __name__ == "__main__":
73:     p = argparse.ArgumentParser()
74:     p.add_argument("--fit_config", type=str, help="Path to the configuration file.")
75:     p.add_argument("--eval_config", type=str, help="Path to the configuration file.")
76:     args = p.parse_args()
77:     main(
78:         fit_config=args.fit_config,
79:         eval_config=args.eval_config
80:     )

================
File: src/sbm/utils/logger.py
================
 1: # sbm/utils/logger.py
 2: import csv
 3: import time
 4: from pathlib import Path
 5: from typing import Union, TextIO
 6: class CSVLogger:
 7:     """
 8:     Minimal CSV logger for long-running SBM fits.
 9:     Each row contains:
10:         iteration, elapsed_seconds, neg_log_likelihood,
11:         accept_rate_window, temperature
12:     Parameters
13:     ----------
14:     file : str | pathlib.Path | TextIO
15:         Where to write.  If a path is given and the file does not yet
16:         exist, a header row is written automatically.
17:     log_every : int
18:         Only rows for which ``iteration % log_every == 0`` are written.
19:     """
20:     header = [
21:         "iteration",
22:         "elapsed_seconds",
23:         "neg_log_likelihood",
24:         "accept_rate_window",
25:         "temperature",
26:     ]
27:     def __init__(self,
28:                  file: Union[str, Path, TextIO],
29:                  *,
30:                  log_every: int = 1000,
31:                  ):
32:         self.log_every = int(log_every)
33:         self._start = time.time()
34:         # if prior log file exists, delete
35:         if isinstance(file, (str, Path)):
36:             file = Path(file)
37:             if file.exists():
38:                 file.unlink()
39:         # open the handle
40:         if isinstance(file, (str, Path)):
41:             self._own_handle = True
42:             path = Path(file)
43:             path.parent.mkdir(parents=True, exist_ok=True)
44:             first = not path.exists()
45:             self._fh = path.open("a", newline="")
46:             self._writer = csv.writer(self._fh)
47:             if first:
48:                 self._writer.writerow(self.header)
49:         else:                                  # file-like object supplied
50:             self._own_handle = False
51:             self._fh: TextIO = file
52:             self._writer = csv.writer(self._fh)
53:             # assume caller already wrote header
54:     # -----------------------------------------------------------------
55:     def log(self,
56:             iteration: int,
57:             neg_loglike: float,
58:             accept_rate_window: float,
59:             temperature: float,
60:             ) -> None:
61:         """
62:         Append a row
63:         """
64:         elapsed = time.time() - self._start
65:         self._writer.writerow([
66:             iteration,
67:             f"{elapsed:.3f}",
68:             f"{neg_loglike:.6f}",
69:             f"{accept_rate_window:.6f}",
70:             f"{temperature:.6f}",
71:         ])
72:         self._fh.flush()
73:     # -----------------------------------------------------------------
74:     def close(self):
75:         if self._own_handle:
76:             self._fh.close()
77:     # allow usage as a context manager -------------------------------
78:     def __enter__(self):
79:         return self
80:     def __exit__(self, exc_type, exc, tb):
81:         self.close()

================
File: src/sbm/utils/pipeline_utils.py
================
  1: from typing import Dict, Union, TypedDict, List, Literal
  2: from pathlib import Path
  3: import numpy as np
  4: import scipy.sparse as sp
  5: def load_csr_npz(fn: Path):
  6:     with np.load(fn) as z:
  7:         return sp.csr_matrix(
  8:             (z["data"], z["indices"], z["indptr"]),
  9:             shape=z["shape"]
 10:         )
 11: InitMethodName = Literal["metis", "random", "ProneKMeans"]
 12: class DatasetSpec(TypedDict):
 13:     name: str
 14:     path: str
 15: class SBMConfig(TypedDict):
 16:     force_undirected: bool
 17:     min_block_size: int
 18:     n_iter: int
 19:     temperature: float
 20:     cooling_rate: float
 21:     init_method: InitMethodName
 22: class LoggingConfig(TypedDict):
 23:     logging_folder: str
 24:     log_every: int
 25: class FitConfig(TypedDict):
 26:     seed: int
 27:     sbm: SBMConfig
 28:     logging: LoggingConfig
 29:     datasets: List[DatasetSpec]
 30: class EvalConfig(TypedDict):
 31:     n_surrogates: int
 32:     overwrite: bool
 33:     metrics: List[str]
 34: def clean_filename(name: str) -> str:
 35:     """
 36:     Clean the name of all special characters and spaces, replacing them with underscores.
 37:     """
 38:     name = name.replace(":", "_")
 39:     name = name.replace(".", "_")
 40:     name = name.replace(",", "_")
 41:     return name
 42: def sbmfit_folderpath(
 43:     base_dir: Path,
 44:     sbm_config: SBMConfig,
 45:     data_spec: DatasetSpec,
 46: ) -> Path:
 47:     """
 48:     Generate the folderpath for storing a fitted SBM model based on the fit configuration.
 49:     Filename is created by unrolling the fit_config dictionary, using all fields and their values. 
 50:     :param name: Name of the dataset. 
 51:     """
 52:     folder_name = data_spec["name"] + "_" + "_".join(
 53:         f"{k}_{v}" for k, v in sorted(sbm_config.items())
 54:     )
 55:     folder_name = clean_filename(folder_name)
 56:     return base_dir / f"sbm_fit_{folder_name}"
 57: def surrogate_statistics_filename(
 58:     base_dir: Path,
 59:     eval_configs: EvalConfig,
 60:     sbm_config: SBMConfig,
 61:     data_spec: DatasetSpec,
 62: ) -> Path:
 63:     """
 64:     Generate the folfor surrogate statistics based on evaluation and fit configurations.
 65:     :param eval_configs: Evaluation configuration dictionary.
 66:     :param fit_config: Fit configuration dictionary.
 67:     :return: Path object representing the filename.
 68:     """
 69:     file_name = (
 70:         f"{data_spec['name']}_"
 71:         f"surrogates_{eval_configs['n_surrogates']}_"
 72:         f"{'_'.join(eval_configs['metrics'])}_"
 73:         f"{'_'.join(f'{k}_{v}' for k, v in sorted(sbm_config.items()))}"
 74:     )
 75:     file_name = clean_filename(file_name)
 76:     return base_dir / f"{file_name}.csv"
 77: def dataset_filepath(
 78:     base_dir: Path,
 79:     dataset_name: str,
 80: )-> Path:
 81:     """
 82:     Generate the filepath for a dataset based on its name.
 83:     :param base_dir: Base directory where datasets are stored.
 84:     :param dataset_name: Name of the dataset.
 85:     :return: Path object representing the dataset file path.
 86:     """
 87:     dataset_name = clean_filename(dataset_name)
 88:     return base_dir / f"{dataset_name}.npz"
 89: ##### Helper functions #####
 90: def fit_config_to_dicts(fit_config: FitConfig) -> List[dict[str, str]]:
 91:     """ 
 92:     Convert FitConfig to a list of DatasetSpec dictionaries.
 93:     One dictionary per dataset.
 94:     """
 95:     configs = [
 96:         {
 97:             "name": ds["name"],
 98:             "path": ds["path"],
 99:             **fit_config["sbm"],
100:         }
101:         for ds in fit_config["datasets"]
102:     ]
103:     for config in configs:
104:         if "seed" in config:
105:             config["seed"] = str(fit_config["seed"])
106:     return configs
107: def eval_config_to_dict(eval_config: EvalConfig) -> dict[str, str]:
108:     """
109:     Convert EvalConfig to a dictionary.
110:     """
111:     return {
112:         "n_surrogates": str(eval_config["n_surrogates"]),
113:         "metrics": "_".join(
114:                 eval_config["metrics"]    
115:             )
116:     }

================
File: src/sbm/edge_delta.py
================
  1: """
  2: Classes to build and hold changes in edge counts between blocks in a Stochastic Block Model (SBM).
  3: """
  4: from typing import DefaultDict, Tuple, List, Literal, Tuple, Iterator, Iterable, Literal
  5: from collections import defaultdict, Counter
  6: import numpy as np
  7: from numba import jit
  8: EdgeDeltas = Literal["PythonEdgeDelta", "NumpyEdgeDelta"]
  9: #### Pure python class for edge deltas #######
 10: class EdgeDelta: # edge-count changes between blocks
 11:     def __init__(self, n_blocks: int):
 12:         self._deltas: DefaultDict[Tuple[int, int], int] = defaultdict(int)
 13:     def _increment(self, count: int, block_i: int, block_j: int,
 14:      ) -> None:
 15:         """
 16:         Increment the edge count delta for a pair of blocks.
 17:         :param count: The change in edge count.
 18:         :param block_i: The first block index.
 19:         :param block_j: The second block index.
 20:         :return: Updated edge count delta.
 21:         """
 22:         if block_i < block_j:
 23:             self._deltas[(block_i, block_j)] = count
 24:         else:
 25:             self._deltas[(block_j, block_i)] = count
 26:     def __getitem__(self, pair: Tuple[int, int]) -> int:
 27:         """
 28:         Get the edge count delta for a pair of blocks.
 29:         :param pair: A tuple containing the block indices (i, j).
 30:         :return: The edge count delta for the pair.
 31:         """
 32:         if pair[0] < pair[1]:
 33:             return self._deltas.get(pair, 0)
 34:         else:
 35:             return self._deltas.get((pair[1], pair[0]), 0)
 36:     def __len__(self) -> int:
 37:         """
 38:         Return the number of non-zero edge count deltas.
 39:         :return: The number of non-zero edge count deltas.
 40:         """
 41:         return len([v for v in self._deltas.values() if v != 0])
 42:     def items(self) -> Iterator[Tuple[Tuple[int, int], int]]:
 43:         """
 44:         Yield tuple ((i, j), delta_e) for all stored pairs.
 45:         :return: An iterator over tuples of (block_i, block_j, delta_e).
 46:         """
 47:         for (i, j), delta_e in self._deltas.items():
 48:             yield (i, j), delta_e
 49:     def increment(self,
 50:                   counts: Iterable[int],
 51:                   blocks_i: Iterable[int],
 52:                   blocks_j: Iterable[int],
 53:      ) -> None:
 54:         """
 55:         Increment the edge counts deltas for a list of block pairs.
 56:         :param counts: List of changes in edge counts.
 57:         :param blocks_i: List of first block indices.
 58:         :param blocks_j: List of second block indices.
 59:         """
 60:         for count, block_i, block_j in zip(counts, blocks_i, blocks_j):
 61:             self._increment(count, block_i, block_j)
 62: ##### NumPy class for edge deltas ######
 63: class NumpyEdgeDelta(EdgeDelta):
 64:     """Sparse, symmetric (i <= j) container for edge‑count deltas.
 65:     Overwrites the pure‑Python :py:class:`EdgeDelta` class
 66:     Internally stores three *contiguous* one‑dimensional NumPy arrays
 67:     (`rows`, `cols`, `data`) in **COO** fashion as well as a Python
 68:     ``dict`` that maps the linearised pair key ``i * n_blocks + j`` to the
 69:     corresponding position in the arrays.  Only the *active* prefix
 70:     (``self.size``) of the arrays is considered valid – this makes the
 71:     structure friendly to Numba‐JIT’d consumers that expect fixed‑size
 72:     buffers.
 73:     The class focuses on *fast incremental updates* (``O(1)`` expected)
 74:     and cheap vector export; memory usage is proportional to the number
 75:     of *non‑zero* block pairs actually visited by the MCMC chain.
 76:     """
 77:     __slots__ = ("n_blocks", "rows", "cols", "data", "size", "_key2idx")
 78:     def __init__(self,
 79:                  n_blocks: int,
 80:                  initial_capacity: int = 64
 81:     ):
 82:         self.n_blocks: int = int(n_blocks)
 83:         cap = max(1, initial_capacity)
 84:         self.rows: np.ndarray = np.empty(cap, dtype=np.int32)
 85:         self.cols: np.ndarray = np.empty(cap, dtype=np.int32)
 86:         self.data: np.ndarray = np.zeros(cap, dtype=np.int32)
 87:         self.size: int = 0
 88:         # auxiliary map for *O(1)* lookup – not accessed inside JIT code
 89:         self._key2idx: dict[int, int] = {}
 90:     ### function for printing the object
 91:     def __repr__(self) -> str:
 92:         """Return a string representation of the NumpyEdgeDelta object."""
 93:         return (f"NumpyEdgeDelta(n_blocks={self.n_blocks}, "
 94:                 f"size={self.size}, "
 95:                 f"rows={self.rows[:self.size]}, "
 96:                 f"cols={self.cols[:self.size]}, "
 97:                 f"data={self.data[:self.size]})")
 98:     # ------------------------------------------------------------------
 99:     # Private helpers
100:     # ------------------------------------------------------------------
101:     def _encode(self, i: int, j: int) -> int:
102:         """Encode an ordered pair (i ≤ j) into a unique scalar."""
103:         return i * self.n_blocks + j
104:     def _ensure_capacity(self):
105:         if self.size == len(self.rows):
106:             # double in‑place (amortised O(1))
107:             new_cap = len(self.rows) * 2
108:             self.rows = np.resize(self.rows, new_cap)
109:             self.cols = np.resize(self.cols, new_cap)
110:             self.data = np.resize(self.data, new_cap)
111:     def _increment(self, count: int, block_i: int, block_j: int):
112:         """Add *value* to entry (i, j) (symmetric pair)."""
113:         if block_i > block_j:
114:             block_i, block_j = block_j, block_i
115:         key = self._encode(block_i, block_j)
116:         idx = self._key2idx.get(key)
117:         if idx is None:
118:             self._ensure_capacity()
119:             idx = self.size
120:             self.size += 1
121:             self.rows[idx] = block_i
122:             self.cols[idx] = block_j
123:             self.data[idx] = count
124:             self._key2idx[key] = idx
125:         else:
126:             self.data[idx] += count
127:     # ------------------------------------------------------------------
128:     # Public API
129:     # ------------------------------------------------------------------
130:     def __getitem__(self, pair: Tuple[int, int]) -> int:
131:         i, j = pair
132:         if i > j:
133:             i, j = j, i
134:         idx = self._key2idx.get(self._encode(i, j))
135:         return 0 if idx is None else int(self.data[idx])
136:     def __len__(self) -> int:
137:         """Return the number of non-zero and *active* pairs."""
138:         #return self.size
139:         active_pairs = self.data[:self.size]
140:         print(f"Active pairs: {active_pairs}")
141:         return active_pairs[active_pairs != 0].shape[0]
142:     def __setitem__(self, pair: Tuple[int, int], value: int):
143:         i, j = pair
144:         current = self[pair]
145:         self._increment(i, j, value - current)
146:     def items(self) -> Iterator[Tuple[Tuple[int, int], int]]:
147:         """Yield triples ``(i, j, delta_e)`` for all stored pairs."""
148:         for k in range(self.size):
149:             yield (int(self.rows[k]), int(self.cols[k])), int(self.data[k])
150:     def to_coo(self) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
151:         """Return the *active* COO view (no copying)."""
152:         return (self.rows[:self.size], self.cols[:self.size], self.data[:self.size])
153:     def increment(self,
154:             counts: Iterable[int],
155:             blocks_i: Iterable[int],
156:             blocks_j: Iterable[int],
157:      ) -> None:
158:         """Vectorised equivalent of ``increment`` for ``NumpyEdgeDelta``.
159:         Parameters
160:         ----------
161:         counts : 1‑D ``int`` array
162:             Changes in edge counts (positive or negative).
163:         blocks_i, blocks_j : 1‑D ``int`` arrays
164:             Block indices *parallel* to ``counts``.
165:         Notes
166:         -----
167:         The function works fully in **NumPy** space – no Python loops – by
168:         linearising the symmetric pair ``(i, j)`` into a *key* and then
169:         accumulating duplicate keys with :pyfunc:`numpy.add.at`.
170:         """
171:         # ------------------------------------------------------------------
172:         # Ensure ndarray inputs (copy=False promotes views)
173:         # ------------------------------------------------------------------
174:         assert isinstance(counts, (list, np.ndarray)) and \
175:                 isinstance(blocks_i, (list, np.ndarray)) and \
176:                 isinstance(blocks_j, (list, np.ndarray)), \
177:             "Counts and block indices must be list or ndarray."
178:         counts = np.asarray(counts, dtype=np.int32)
179:         blocks_i = np.asarray(blocks_i, dtype=np.int32)
180:         blocks_j = np.asarray(blocks_j, dtype=np.int32)
181:         # ------------------------------------------------------------------
182:         # Normalise the pair ordering so that i ≤ j
183:         # ------------------------------------------------------------------
184:         swap_mask = blocks_i > blocks_j
185:         if swap_mask.any():
186:             blocks_i, blocks_j = blocks_i.copy(), blocks_j.copy()  # avoid aliasing
187:             blocks_i[swap_mask], blocks_j[swap_mask] = blocks_j[swap_mask], blocks_i[swap_mask]
188:         # ------------------------------------------------------------------
189:         # Encode pairs → scalar keys and reduce duplicates in *one* pass
190:         # ------------------------------------------------------------------
191:         n_blocks = self.n_blocks
192:         keys = blocks_i.astype(np.int64) * n_blocks + blocks_j
193:         # ``np.unique`` already sorts – good for cache locality
194:         uniq_keys, inverse = np.unique(keys, return_inverse=True)
195:         reduced = np.zeros_like(uniq_keys, dtype=np.int32)
196:         np.add.at(reduced, inverse, counts)
197:         # ------------------------------------------------------------------
198:         # Decode unique keys and perform bulk update via the fast method
199:         # ------------------------------------------------------------------
200:         rows = (uniq_keys // n_blocks).astype(np.int32)
201:         cols = (uniq_keys %  n_blocks).astype(np.int32)
202:         for r, c, dv in zip(rows, cols, reduced):
203:             if dv != 0:
204:                 self._increment(block_i=int(r), block_j=int(c), count=int(dv))

================
File: src/sbm/initial_partition.py
================
 1: import numpy as np
 2: import scipy.sparse as sp
 3: from scipy.sparse.linalg import eigsh
 4: from typing import Dict, Optional
 5: from sklearn.cluster import KMeans
 6: from scipy.sparse import csr_matrix
 7: class SpectralPartitioner:
 8:     def __init__(self, adjacency: csr_matrix, seed: Optional[int] = None):
 9:         """
10:         Initialize the SpectralPartitioner.
11:         :param adjacency: The adjacency matrix of the network (sparse CSR matrix).
12:         :param seed: Random seed for reproducibility.
13:         """
14:         self.adjacency: csr_matrix = adjacency.tocsr()
15:         self.num_nodes: int = self.adjacency.shape[0]
16:         self.rng = np.random.default_rng(seed)
17:         self.degree_vector = np.array(self.adjacency.sum(axis=1)).flatten()
18:         self.laplacian = self._compute_normalized_laplacian()
19:     def _compute_normalized_laplacian(self) -> csr_matrix:
20:         """
21:         Compute the normalized Laplacian matrix of the graph.
22:         :return: The normalized Laplacian matrix (sparse CSR matrix).
23:         """
24:         # Avoid division by zero
25:         with np.errstate(divide='ignore'):
26:             d_inv_sqrt = np.power(self.degree_vector, -0.5)
27:             d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.0
28:         D_inv_sqrt = sp.diags(d_inv_sqrt)
29:         L = sp.eye(self.num_nodes) - D_inv_sqrt @ self.adjacency @ D_inv_sqrt
30:         return L
31:     def partition(self, num_blocks: int) -> Dict[int, int]:
32:         """
33:         Partition the nodes into blocks using spectral clustering.
34:         :param num_blocks: The desired number of blocks.
35:         :return: A dictionary mapping node indices to block indices.
36:         """
37:         # Compute the first (num_blocks) eigenvectors of the normalized Laplacian
38:         # Use 'SM' to find eigenvalues closest to zero
39:         eigenvalues, eigenvectors = eigsh(
40:             self.laplacian, k=num_blocks, which='SM', tol=1e-6, maxiter=5000
41:         )
42:         # Normalize rows to unit length to improve clustering
43:         embedding = eigenvectors
44:         row_norms = np.linalg.norm(embedding, axis=1, keepdims=True)
45:         row_norms[row_norms == 0] = 1e-10  # Avoid division by zero
46:         embedding_normalized = embedding / row_norms
47:         # Use k-means clustering on the spectral embeddings
48:         kmeans = KMeans(n_clusters=num_blocks, random_state=self.rng.integers(1 << 32))
49:         labels = kmeans.fit_predict(embedding_normalized)
50:         # Map nodes to blocks
51:         blocks = {node: int(label) for node, label in enumerate(labels)}
52:         return blocks

================
File: src/sbm/sampling.py
================
  1: """ 
  2: Functions for sampling graph from SBM model
  3: """
  4: # sbm/sampling.py
  5: from typing import List, Optional
  6: import numpy as np
  7: from scipy.sparse import csr_array, coo_matrix
  8: from sbm.graph_data import GraphData
  9: from sbm.io import SBMFit
 10: def sample_adjacency_matrix(
 11:     block_sizes: List[int],
 12:     block_connectivity: csr_array,
 13:     rng: np.random.Generator,
 14:     directed: bool = False,
 15: ) -> csr_array:
 16:     """
 17:     Draw a random graph from the *profile* Bernoulli SBM specified by
 18:     `block_edge_counts` (edge counts m_rs) and `block_sizes`.
 19:     :param block_sizes: Sizes of the blocks.
 20:     :param block_connectivity: Sparse matrix of edge counts m_rs between blocks.
 21:     :param directed: Whether the graph is directed or undirected.
 22:     :param rng: Random number generator for reproducibility.
 23:     :return: Sparse adjacency matrix of the sampled graph.
 24:     """
 25:     block_sizes = list(map(int, block_sizes))
 26:     B = len(block_sizes)
 27:     N = sum(block_sizes)
 28:     # cumulative offsets → map local idx → global idx
 29:     offsets = np.cumsum([0] + block_sizes)
 30:     rows: list[int] = []
 31:     cols: list[int] = []
 32:     # ------------------------------------------------------------------
 33:     for r in range(B):
 34:         n_r = block_sizes[r]
 35:         off_r = offsets[r]
 36:         # -- diagonal block -------------------------------------------
 37:         m_rr = int(block_connectivity[r, r]) # type: ignore
 38:         if m_rr:
 39:             if directed:
 40:                 n_poss = n_r * (n_r - 1)
 41:                 p = m_rr / n_poss
 42:                 mask = (rng.random((n_r, n_r)) < p).astype(int)
 43:                 mask[np.diag_indices(n_r)] = 0
 44:                 rr, cc = np.nonzero(mask)
 45:                 rows.extend(off_r + rr)
 46:                 cols.extend(off_r + cc)
 47:             else:
 48:                 n_poss = n_r * (n_r - 1) // 2
 49:                 p = m_rr / n_poss
 50:                 triu_mask = rng.random((n_r, n_r)) < p
 51:                 tri_r, tri_c = np.triu_indices(n_r, k=1)
 52:                 sel = triu_mask[tri_r, tri_c]
 53:                 rr = tri_r[sel]; cc = tri_c[sel]
 54:                 rows.extend(off_r + rr); cols.extend(off_r + cc)
 55:                 rows.extend(off_r + cc); cols.extend(off_r + rr)
 56:         # -- off-diagonal blocks --------------------------------------
 57:         s_iter = range(B) if directed else range(r + 1, B)
 58:         for s in s_iter:
 59:             if s == r:
 60:                 continue
 61:             if not directed and s <= r:
 62:                 continue
 63:             m_rs = int(block_connectivity[r, s]) # type: ignore
 64:             if m_rs == 0:
 65:                 continue
 66:             n_s = block_sizes[s]
 67:             off_s = offsets[s]
 68:             n_poss = n_r * n_s
 69:             p = m_rs / n_poss
 70:             mask = rng.random((n_r, n_s)) < p
 71:             rr, cc = np.nonzero(mask)
 72:             rows.extend(off_r + rr)
 73:             cols.extend(off_s + cc)
 74:             if not directed:
 75:                 # mirror block
 76:                 rows.extend(off_s + cc)
 77:                 cols.extend(off_r + rr)
 78:     data = np.ones(len(rows), dtype=np.int8)
 79:     adj = coo_matrix((data, (rows, cols)), shape=(N, N))
 80:     # ensure no duplicate edge
 81:     adj.sum_duplicates() 
 82:     adj.data.fill(1)
 83:     # convert to csr format
 84:     adj = csr_array(adj)
 85:     adj.sort_indices()
 86:     return adj
 87: def sample_sbm_graph(
 88:             block_sizes: List[int],
 89:             block_connectivity: csr_array,
 90:             directed:bool,
 91:             rng: np.random.Generator,
 92:             metadata: Optional[dict] = None
 93:     )->GraphData:
 94:     """
 95:     Sample a graph from a Stochastic Block Model (SBM) given block sizes and connectivity.
 96:     :param block_sizes: List of sizes for each block.
 97:     :param block_connectivity: Sparse matrix representing connectivity between blocks.
 98:     :param directed: Whether the graph is directed or undirected.
 99:     :param rng: Random number generator for reproducibility.
100:     :param metadata: Optional metadata to include in the graph data.
101:     :return: GraphData object containing the sampled graph.
102:     """
103:     if metadata is None:
104:         metadata = {}
105:     # Validate inputs
106:     if not isinstance(block_sizes, list) or not all(isinstance(size, int) for size in block_sizes):
107:         raise ValueError("block_sizes must be a list of integers.")
108:     if not isinstance(block_connectivity, csr_array):
109:         raise ValueError("block_connectivity must be a scipy.sparse.csr_array.")
110:     if len(block_sizes) != block_connectivity.shape[0] or len(block_sizes) != block_connectivity.shape[1]: #type: ignore
111:         raise ValueError("block_sizes length must match the dimensions of block_connectivity.")
112:     if not isinstance(directed, bool):
113:         raise ValueError("directed must be a boolean value.")
114:     if not isinstance(rng, np.random.Generator):
115:         raise ValueError("rng must be a numpy random Generator instance.")    
116:     adj = sample_adjacency_matrix(
117:         block_sizes=block_sizes,
118:         block_connectivity=block_connectivity,
119:         directed=directed,
120:         rng=rng
121:     )
122:     return GraphData(adjacency_matrix=adj, directed=directed)
123: def sample_sbm_graph_from_fit(sbm_fit: SBMFit, rng: np.random.Generator) -> GraphData:
124:     """
125:     Sample a graph from a Stochastic Block Model (SBM) fit.
126:     :param sbm_fit: SBMFit object containing block sizes and connectivity.
127:     :param rng: Random number generator for reproducibility.
128:     :return: GraphData object containing the sampled graph.
129:     """
130:     return sample_sbm_graph(
131:         block_sizes=sbm_fit.block_sizes,
132:         block_connectivity=sbm_fit.block_conn,
133:         directed=sbm_fit.directed_graph,
134:         rng=rng,
135:         metadata=sbm_fit.metadata
136:     )

================
File: src/sbm/stopping_criteria.py
================
 1: """ 
 2: Stopping criteria for the MCMC algorithm in the Stochastic Block Model (SBM).
 3: """
 4: class StoppingCriteria:
 5:     """
 6:     Base class for stopping criteria in the MCMC algorithm.
 7:     """
 8:     def __init__(self, stopping_configs: dict):
 9:         pass
10:     def should_stop(self, iteration: int, current_ll: float) -> bool:
11:         """
12:         Check if the stopping criteria are met.
13:         :param iteration: Current iteration number.
14:         :param current_ll: Current log-likelihood value.
15:         :return: True if the algorithm should stop, False otherwise.
16:         """
17:         raise NotImplementedError("Subclasses should implement this method.")

================
File: src/tests/planted_partition_tests.py
================
 1: # src/tests/test_regressions.py
 2: """
 3: Targeted regression tests for issues uncovered in the planted‐partition script.
 4: * size-1 blocks must not crash likelihood computation
 5: * Δ-dicts must use *matrix indices*, not block-IDs
 6: """
 7: import numpy as np
 8: import pytest
 9: from scipy.sparse import csr_array
10: from sbm.block_data import BlockData
11: from sbm.likelihood import compute_global_bernoulli_ll
12: from sbm.block_change_proposers import NodeSwapProposer
13: from sbm.block_data import BlockData
14: from sbm.graph_data import GraphData
15: # -------------------------------------------------------------------
16: # 1. size-1 diagonal must be ignored (or handled gracefully)
17: # -------------------------------------------------------------------
18: @pytest.mark.parametrize("singletons", [1, 3])
19: def test_singleton_blocks_allowed(singletons):
20:     """
21:     A partition containing blocks of size 1 must not raise or return NaN.
22:     """
23:     n = 6
24:     # make a path graph (any sparse graph works)
25:     rows = np.arange(n-1)
26:     cols = rows + 1
27:     data = np.ones(n-1, dtype=int)
28:     A = csr_array((data, (rows, cols)), shape=(n, n))
29:     A = A + A.T
30:     # put the first `singletons` nodes into their own blocks
31:     blocks = {v: v if v < singletons else singletons for v in range(n)}
32:     bd = BlockData(
33:         initial_blocks=blocks,
34:         graph_data=GraphData(adjacency_matrix=A, directed=False)
35:     )
36:     ll = compute_global_bernoulli_ll(bd)
37:     assert np.isfinite(ll), "likelihood should be finite even with size-1 blocks"
38: # -------------------------------------------------------------------
39: # 2. Δ-dicts must reference matrix indices, not block-IDs
40: # -------------------------------------------------------------------
41: def test_delta_keys_are_matrix_indices():
42:     """
43:     When block IDs are non-contiguous (e.g. {0,10}), the delta_e keys
44:     must still be *matrix indices* (0 or 1), otherwise the likelihood
45:     updater crashes with an IndexError.
46:     """
47:     # two blocks with ids 0 and 10, one edge across
48:     adj = csr_array([[0,1],[1,0]])
49:     blocks = {0: 0, 1: 10}
50:     bd = BlockData(
51:         initial_blocks=blocks,
52:         graph_data=GraphData(adjacency_matrix=adj, directed=False)
53:     )
54:     proposer = NodeSwapProposer(bd)
55:     swap = [(0, 10)]  # move node 0 to block 10 -> will create a singleton & trigger Δ
56:     _, delta_e, _ = proposer.propose_change(swap)
57:     # the only valid matrix indices are 0 and 1
58:     valid = {0,1}
59:     for (r, s) in delta_e:
60:         assert r in valid and s in valid, (
61:             "delta_e must use matrix indices (0..B-1), "
62:             "not raw block IDs"
63:         )

================
File: src/tests/test_block_assigner.py
================
  1: """PyTest suites for structural block‑model code.
  2: These unit tests focus on two invariants that *must* hold for the current
  3: pipeline:
  4: 1. **MetisBlockAssigner should only emit blocks whose sizes are either
  5:    `min_block_size` or `min_block_size + 1`.**  (Because the assigner first
  6:    builds blocks of exactly `min_block_size` vertices and then distributes any
  7:    leftovers one‑by‑one.)
  8: 2. **A SWAP move in the MCMC sampler must leave every block size unchanged.**
  9: The tests rely only on public APIs plus `_attempt_move`, which is part of the
 10: MCMC sampler’s stable interface (it is used by `fit` internally).  If the
 11: names or module paths differ in your codebase, tweak the imports at the top of
 12: each file – the assertions themselves should stay valid.
 13: Run with::
 14:     pytest -q tests/
 15: """
 16: # ──────────────────────────────────────────────────────────────────────────────
 17: # tests/test_block_assigner.py
 18: # ──────────────────────────────────────────────────────────────────────────────
 19: import networkx as nx
 20: import numpy as np
 21: import pytest
 22: # Adjust the import path to wherever MetisBlockAssigner lives in your project
 23: from sbm.block_assigner import MetisBlockAssigner
 24: from sbm.block_assigner import ProNEAndConstrKMeansAssigner
 25: from sbm.graph_data import gd_from_networkx
 26: @pytest.mark.parametrize(
 27:     "num_nodes,num_blocks,min_block_size,edge_p",
 28:     [
 29:         (97, 10, 8, 0.05),
 30:         (50, 5, 6, 0.10),
 31:         (23, 4, 5, 0.30),
 32:         (128, 16, 7, 0.02),
 33:     ],
 34: )
 35: def test_metis_block_sizes_are_balanced(num_nodes, num_blocks, min_block_size, edge_p):
 36:     """The initial partition must use only *min* and *min+1* sized blocks."""
 37:     G = nx.erdos_renyi_graph(
 38:             n=num_nodes,
 39:             p=edge_p,
 40:             seed=1,
 41:             directed=False
 42:         )
 43:     graph_data = gd_from_networkx(G)
 44:     assigner = MetisBlockAssigner(
 45:         graph_data=graph_data,
 46:         num_blocks=num_blocks,
 47:         min_block_size=min_block_size,
 48:         rng=np.random.default_rng(42),
 49:     )
 50:     block_data = assigner.compute_assignment()
 51:     # ensure that block_sizes correspond to 
 52:     # Ensure every vertex received exactly one label
 53:     assert len(block_data.blocks) == num_nodes
 54:     # Compute block‑size histogram
 55:     _, counts = np.unique(
 56:         list(block_data.blocks.values()),
 57:         return_counts=True
 58:         )
 59:     # All block sizes must be either min_block_size or min_block_size+1
 60:     assert (counts >= min_block_size).all(), \
 61:         (
 62:             "MetisBlockAssigner produced illegal block sizes: "
 63:             f"{sorted(set(counts))}. Expected larger than {min_block_size}."
 64:         )
 65:     # The partition must contain exactly *num_blocks* non‑empty blocks.
 66:     assert len(counts) == num_blocks
 67: def test_ProNEKMeans_block_sizes_are_balanced():
 68:     """The ProNEKMeans assigner must also use only *min* and *min+1* sized blocks."""
 69:     num_nodes = 100
 70:     min_block_size = 8
 71:     num_blocks = num_nodes // min_block_size
 72:     edge_p = 0.05
 73:     G = nx.erdos_renyi_graph(
 74:             n=num_nodes,
 75:             p=edge_p,
 76:             seed=1,
 77:             directed=False
 78:         )
 79:     graph_data = gd_from_networkx(G)
 80:     assigner = ProNEAndConstrKMeansAssigner(
 81:         graph_data=graph_data,
 82:         min_block_size=min_block_size,
 83:         rng=np.random.default_rng(42),
 84:     )
 85:     block_data = assigner.compute_assignment()
 86:     # ensure that block_sizes correspond to 
 87:     # Ensure every vertex received exactly one label
 88:     assert len(block_data.blocks) == num_nodes, \
 89:         "ProNEKMeansBlockAssigner did not assign a label to every vertex."
 90:     # ensure that block sizes correspond to the number of blocks
 91:     assert len(block_data.block_sizes) == num_blocks  \
 92:         and len(set(block_data.blocks.values())) == num_blocks, \
 93:         "ProNEKMeansBlockAssigner did not produce the expected number of blocks."
 94:     # Compute block‑size histogram
 95:     _, counts = np.unique(
 96:         list(block_data.blocks.values()),
 97:         return_counts=True
 98:         )
 99:     # All block sizes must be either min_block_size or min_block_size+1
100:     assert (counts >= min_block_size).all(), \
101:         (
102:             "ProNEKMeansBlockAssigner produced illegal block sizes: "
103:             f"{sorted(set(counts))}. Expected larger than {min_block_size}."
104:         )
105:     count_set = set(counts)
106:     # Ensure that the block sizes are either min_block_size or min_block_size + 1
107:     assert count_set.issubset({min_block_size, min_block_size + 1})
108:     # The partition must contain exactly *num_blocks* non‑empty blocks.
109:     assert len(counts) == num_blocks

================
File: src/tests/test_edge_delta.py
================
  1: # tests/test_edge_delta_equivalence.py
  2: """
  3: Unit tests that compare behaviour of sbm.edge_delta.EdgeDelta
  4: and its NumPy-accelerated subclass NumpyEdgeDelta.
  5: The tests are written against the public API actually used by
  6: block-change proposers and the likelihood calculator:
  7:     • increment(counts, blocks_i, blocks_j)              :contentReference[oaicite:0]{index=0}
  8:     • __getitem__, __len__, items                       :contentReference[oaicite:1]{index=1}
  9: """
 10: from __future__ import annotations
 11: import random
 12: from collections import defaultdict
 13: from itertools import combinations
 14: import numpy as np
 15: import pytest
 16: from sbm.edge_delta import EdgeDelta, NumpyEdgeDelta
 17: # --------------------------------------------------------------------------- #
 18: # helpers                                                                     #
 19: # --------------------------------------------------------------------------- #
 20: def _random_updates(
 21:     n_blocks: int,
 22:     n_updates: int,
 23:     *, rng: random.Random
 24: ) -> tuple[list[int], list[int], list[int]]:
 25:     """
 26:     Create a *single* batch of updates without duplicate (i, j) pairs
 27:     – this mirrors how `_compute_delta_edge_counts` builds its argument
 28:     lists before calling ``increment`` once per batch.                   :contentReference[oaicite:2]{index=2}
 29:     """
 30:     pairs = random.sample(list(combinations(range(n_blocks), 2)), k=n_updates)
 31:     counts = [rng.randint(-5, 5) for _ in range(n_updates)]
 32:     blocks_i, blocks_j = zip(*pairs)   # already i < j
 33:     return counts, list(blocks_i), list(blocks_j)
 34: def _build_two_deltas(
 35:     n_blocks: int,
 36:     counts: list[int],
 37:     blocks_i: list[int],
 38:     blocks_j: list[int],
 39: ) -> tuple[EdgeDelta, NumpyEdgeDelta]:
 40:     """
 41:     Convenience wrapper: build and *increment once* – just like the
 42:     real code does.                                                      :contentReference[oaicite:3]{index=3}
 43:     """
 44:     d_py  = EdgeDelta(n_blocks)
 45:     d_np  = NumpyEdgeDelta(n_blocks)
 46:     d_py.increment(counts, blocks_i, blocks_j)
 47:     d_np.increment(counts, blocks_i, blocks_j)
 48:     return d_py, d_np
 49: # --------------------------------------------------------------------------- #
 50: # public API parity tests                                                     #
 51: # --------------------------------------------------------------------------- #
 52: @pytest.mark.parametrize("n_blocks, n_updates, seed", [
 53:     (5,  6,  1),
 54:     (7, 10, 42),
 55:     (3,  2, 99),
 56: ])
 57: def test_increment_equivalence(n_blocks: int, n_updates: int, seed: int) -> None:
 58:     """After an identical batch update, both classes hold exactly the same deltas."""
 59:     rng = random.Random(seed)
 60:     counts, bi, bj = _random_updates(n_blocks, n_updates, rng=rng)
 61:     d_py, d_np = _build_two_deltas(n_blocks, counts, bi, bj)
 62:     # compare through the *public* interface ─ not private storage
 63:     pairs = set(d_py.items()) | set(d_np.items())
 64:     for (i, j), _ in pairs:
 65:         assert d_py[i, j] == d_np[i, j], \
 66:             f"Mismatch on pair {(i, j)}: python={d_py[i, j]}, numpy={d_np[i, j]}"
 67:     assert len(d_py) == len(d_np), \
 68:         f"__len__ diverged: python={len(d_py)}, numpy={len(d_np)}"
 69:     # full dict comparison (order-independent)
 70:     assert dict(d_py.items()) == dict(d_np.items())
 71: def test_getitem_default_zero() -> None:
 72:     """Both classes must return 0 for unseen (i,j) pairs."""
 73:     d_py  = EdgeDelta(4)
 74:     d_np  = NumpyEdgeDelta(4)
 75:     for pair in ((0, 0), (0, 1), (2, 3)):
 76:         assert d_py[pair] == d_np[pair] == 0
 77: def test_negative_and_positive_counts() -> None:
 78:     """Signed counts stay intact and are *not* silently truncated."""
 79:     counts  = [  5, -3,  2]
 80:     blocks_i = [0, 0, 1]
 81:     blocks_j = [1, 2, 2]
 82:     d_py, d_np = _build_two_deltas(3, counts, blocks_i, blocks_j)
 83:     assert dict(d_py.items()) == { (0, 1): 5, (0, 2): -3, (1, 2): 2 }
 84:     assert dict(d_py.items()) == dict(d_np.items())
 85: # --------------------------------------------------------------------------- #
 86: # integration smoke test – reproduces the exact public call-sequence used
 87: # by `_compute_delta_edge_counts`                                            #
 88: # --------------------------------------------------------------------------- #
 89: def test_two_step_update_matches() -> None:
 90:     """
 91:     `_compute_delta_edge_counts` issues *two* successive ``increment`` calls
 92:     on the *same* EdgeDelta instance.  Here we reproduce that pattern and make
 93:     sure the NumPy implementation yields identical final deltas after both
 94:     steps.                                                                   :contentReference[oaicite:4]{index=4}
 95:     """
 96:     n_blocks = 4
 97:     # step-1: neighbour blocks
 98:     counts1  = [ 2, -1]
 99:     blocks1a = [0, 1]
100:     blocks1b = [2, 2]
101:     # step-2: intra / inter old blocks
102:     counts2  = [ 7, -4, -3]
103:     blocks2a = [0, 0, 1]
104:     blocks2b = [1, 0, 1]
105:     py = EdgeDelta(n_blocks)
106:     npd = NumpyEdgeDelta(n_blocks)
107:     py.increment(counts1, blocks1a, blocks1b)
108:     py.increment(counts2, blocks2a, blocks2b)
109:     npd.increment(counts1, blocks1a, blocks1b)
110:     npd.increment(counts2, blocks2a, blocks2b)
111:     assert dict(py.items()) == dict(npd.items())

================
File: src/tests/test_io.py
================
  1: # tests/test_io.py
  2: import json
  3: from pathlib import Path
  4: import numpy as np
  5: import scipy.sparse as sp
  6: from scipy.io import mmwrite
  7: import networkx as nx
  8: import pytest
  9: from sbm.io import SBMFit, SBMWriter, GraphLoader
 10: # ---------------------------------------------------------------------
 11: # helpers
 12: # ---------------------------------------------------------------------
 13: def _simple_adj(undirected: bool = True) -> sp.csr_array:
 14:     """
 15:     3-node graph:
 16:         0 — 1   and  (optionally) 1 → 2
 17:     """
 18:     rows, cols = [0, 1], [1, 0]            # 0–1 edge
 19:     if not undirected:
 20:         rows.append(1); cols.append(2)     # add 1→2 (makes it directed)
 21:     data = np.ones(len(rows), dtype=np.int8)
 22:     return sp.csr_array(sp.coo_matrix((data, (rows, cols)), shape=(3, 3)))
 23: def _assert_same_csr(a: sp.csr_array, b: sp.csr_array):
 24:     a.sort_indices()
 25:     b.sort_indices()
 26:     assert np.array_equal(a.data, b.data), f'Data arrays differ: {a.data} != {b.data}'
 27:     assert np.array_equal(a.indices, b.indices), f'Indices differ: {a.indices} != {b.indices}'
 28:     assert a.shape == b.shape, f'Shape differs: {a.shape} != {b.shape}'
 29: # ---------------------------------------------------------------------
 30: # 1. SBMWriter round-trip
 31: # ---------------------------------------------------------------------
 32: def test_sbmwriter_roundtrip(tmp_path: Path):
 33:     # --- build a tiny SBMFit ----------------------------------------
 34:     #adj = _simple_adj()
 35:     #blocks = {0: 0, 1: 0, 2: 1}
 36:     fit = SBMFit(
 37:         block_sizes   = [2, 1],
 38:         block_conn    = sp.csr_array([[1, .2],[.2, .1]]),
 39:         directed_graph= False,
 40:         neg_loglike   = -12.34,
 41:         metadata      = {"foo": "bar"},
 42:     )
 43:     # --- save & load ------------------------------------------------
 44:     SBMWriter.save(tmp_path, fit)
 45:     fit2 = SBMWriter.load(tmp_path)
 46:     # basic checks
 47:     assert fit2.block_sizes == [2, 1], f"Block sizes do not match: {fit2.block_sizes} != [2, 1]"
 48:     _assert_same_csr(fit.block_conn, fit2.block_conn)
 49:     assert fit2.neg_loglike == pytest.approx(fit.neg_loglike), "Negative log-likelihood does not match"
 50:     assert fit2.metadata["foo"] == "bar", "Metadata does not match"
 51: # ---------------------------------------------------------------------
 52: # 2. GraphLoader built-in formats
 53: # ---------------------------------------------------------------------
 54: @pytest.mark.parametrize("undirected", [True, False])
 55: def test_graphloader_npz(tmp_path: Path, undirected: bool):
 56:     adj = _simple_adj(undirected)
 57:     f = tmp_path / "g.npz"
 58:     sp.save_npz(f, adj)
 59:     g = GraphLoader.load(f)
 60:     _assert_same_csr(adj, g.adjacency)
 61:     assert g.directed == (not undirected)
 62: def test_graphloader_edges(tmp_path: Path):
 63:     # plain edge list (space-sep)
 64:     f = tmp_path / "toy.edges"
 65:     f.write_text("0 1\n1 2\n")  # unsymmetrised → directed
 66:     g = GraphLoader.load(f)
 67:     assert g.directed
 68:     assert g.num_nodes == 3
 69:     assert g.adjacency[1, 2] == 1
 70: def test_graphloader_mtx(tmp_path: Path):
 71:     adj = _simple_adj()
 72:     f = tmp_path / "toy.mtx"
 73:     mmwrite(str(f), adj)
 74:     g = GraphLoader.load(f)
 75:     _assert_same_csr(adj, g.adjacency)
 76:     assert not g.directed
 77: def test_graphloader_gml(tmp_path: Path):
 78:     # build with networkx
 79:     G = nx.Graph()
 80:     G.add_edge(0, 1); G.add_edge(1, 2)
 81:     f = tmp_path / "toy.gml"
 82:     nx.write_gml(G, f)
 83:     g = GraphLoader.load(f)
 84:     assert not g.directed
 85:     assert g.adjacency.nnz == 4      # undirected ⇒ 2 edges ×2
 86: # ---------------------------------------------------------------------
 87: # 3. Registry decorator sanity check
 88: # ---------------------------------------------------------------------
 89: def test_register_new_loader(tmp_path: Path):
 90:     # create a fake extension ".foo"
 91:     ext = ".foo"
 92:     @GraphLoader.register(ext)
 93:     def _load_foo(path: Path):
 94:         # loader that ignores content, returns 2-node edge
 95:         rows, cols = [0], [1]
 96:         adj = sp.coo_matrix((np.ones(1, int), (rows, cols)), shape=(2, 2)).tocsr()
 97:         return adj, True
 98:     # create dummy file and load
 99:     f = tmp_path / f"dummy{ext}"
100:     f.write_text("ignored")
101:     g = GraphLoader.load(f)
102:     assert g.directed
103:     assert g.adjacency[0, 1] == 1
104:     assert f.suffix.lower() in GraphLoader.registry

================
File: src/tests/test_sampling.py
================
  1: import numpy as np
  2: import scipy.sparse as sp
  3: import pytest
  4: from sbm.sampling import (
  5:     sample_adjacency_matrix,
  6:     sample_sbm_graph_from_fit,
  7: )
  8: from sbm.io import SBMFit
  9: from sbm.graph_data import GraphData
 10: @pytest.fixture(scope="module")
 11: def rng():
 12:     return np.random.default_rng(12345)
 13: # --------------------------------------------------------------------
 14: # helpers
 15: # --------------------------------------------------------------------
 16: def csr_edges_between(adj: sp.csr_array, idx_a, idx_b, directed:bool = False):
 17:     """number of non-zero entries with row in A and col in B"""
 18:     sub = adj[idx_a][:, idx_b] # type: ignore
 19:     if (idx_a == idx_b) and not directed:
 20:         # self-edges, count only upper triangle
 21:         return sub.count_nonzero() // 2 # type: ignore
 22:     if directed:
 23:         # directed, count all edges
 24:         print('')
 25:         print(sub.toarray().tolist())
 26:         print(adj.toarray().tolist())
 27:         print('')
 28:     return sub.sum() # type: ignore
 29: def complete_block_edges(n, directed):
 30:     return n * (n - 1) if directed else n * (n - 1) // 2
 31: # --------------------------------------------------------------------
 32: # 1. full connectivity should yield a complete bipartite/clique
 33: # --------------------------------------------------------------------
 34: @pytest.mark.parametrize("directed", [False, True])
 35: def test_full_connectivity(rng, directed):
 36:     n1, n2 = 3, 4
 37:     sizes = [n1, n2]
 38:     # maximum possible edges
 39:     B = 2
 40:     conn = sp.csr_array((B, B), dtype=int)
 41:     conn[0, 0] = complete_block_edges(n1, directed)
 42:     conn[1, 1] = complete_block_edges(n2, directed)
 43:     conn[0, 1] = conn[1, 0] = n1 * n2
 44:     adj = sample_adjacency_matrix(sizes, conn, directed=directed, rng=rng)
 45:     idx0 = slice(0, n1)
 46:     idx1 = slice(n1, n1 + n2)
 47:     # --- within-block ------------------------------------------------
 48:     assert csr_edges_between(adj, idx0, idx0, directed) == conn[0, 0], \
 49:         (
 50:             f"expected {conn[0, 0]} edges within block 0. Got {csr_edges_between(adj, idx0, idx0)}. "
 51:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
 52:         )
 53:     assert csr_edges_between(adj, idx1, idx1, directed) == conn[1, 1], \
 54:         (
 55:             f"expected {conn[1, 1]} edges within block 1"
 56:             f"sizes: {sizes}, conn: {conn}, directed: {directed}"
 57:         )
 58:     # --- between blocks ---------------------------------------------
 59:     expect = conn[0, 1]
 60:     assert csr_edges_between(adj, idx0, idx1, directed) == expect ,\
 61:         (
 62:             f"expected {expect} edges between blocks 0 and 1. Got {csr_edges_between(adj, idx0, idx1)}. "
 63:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
 64:         )
 65:     assert csr_edges_between(adj, idx1, idx0, directed) == expect, \
 66:         (
 67:             f"expected {expect} edges between blocks 1 and 0. Got {csr_edges_between(adj, idx1, idx0)}. "
 68:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
 69:         )
 70:     if directed:
 71:         # both directions filled
 72:         assert csr_edges_between(adj, idx1, idx0, directed) == expect, \
 73:                 f"expected {expect} edges between blocks 1 and 0. Got {csr_edges_between(adj, idx1, idx0)}. "
 74:     # --- no self-loops ----------------------------------------------
 75:     assert adj.diagonal().sum() == 0, \
 76:                 "expected no self-loops in the adjacency matrix"
 77: # --------------------------------------------------------------------
 78: # 2. zero connectivity must yield zero edges between blocks
 79: # --------------------------------------------------------------------
 80: def test_zero_connectivity(rng):
 81:     n1, n2 = 5, 6
 82:     sizes = [n1, n2]
 83:     conn = sp.csr_array([[10, 0],
 84:                          [0, 15]], dtype=int)
 85:     adj = sample_adjacency_matrix(sizes, conn, directed=False, rng=rng)
 86:     idx0 = slice(0, n1)
 87:     idx1 = slice(n1, n1 + n2)
 88:     assert csr_edges_between(adj, idx0, idx1) == 0
 89:     assert csr_edges_between(adj, idx1, idx0) == 0
 90: # --------------------------------------------------------------------
 91: # 3. large probabilistic block matches expected count ±3σ
 92: # --------------------------------------------------------------------
 93: def test_statistical_match(rng):
 94:     n1, n2 = 100, 200
 95:     sizes = [n1, n2]
 96:     p = 0.15
 97:     m = int(p * n1 * n2)
 98:     conn = sp.csr_array((2, 2), dtype=int)
 99:     conn[0, 1] = conn[1, 0] = m
100:     trials = 10
101:     errs = []
102:     for _ in range(trials):
103:         adj = sample_adjacency_matrix(sizes, conn, directed=False, rng=rng)
104:         idx0 = slice(0, n1)
105:         idx1 = slice(n1, n1 + n2)
106:         observed = csr_edges_between(adj, idx0, idx1)
107:         errs.append(observed - m)
108:     std = np.sqrt(n1 * n2 * p * (1 - p))
109:     assert max(map(abs, errs)) < 3 * std, \
110:         (
111:             f"expected observed edge counts to match {m} ± 3σ. Got {errs}. "
112:         )
113: # --------------------------------------------------------------------
114: # 4. directed vs undirected symmetry
115: # --------------------------------------------------------------------
116: def test_directed_flag(rng):
117:     sizes = [10, 10]
118:     B = 2
119:     conn = sp.csr_array((B, B), dtype=int)
120:     conn[0, 1] = conn[1, 0] = 10 * 10 / 2   # p = 0.5
121:     adj_d = sample_adjacency_matrix(sizes, conn, directed=True, rng=rng)
122:     assert (adj_d != adj_d.T).nnz > 0, \
123:         "expected directed graph to be asymmetric"
124:     adj_u = sample_adjacency_matrix(sizes, conn, directed=False, rng=rng)
125:     assert (adj_u != adj_u.T).nnz == 0
126: # --------------------------------------------------------------------
127: # 5. sampling via SBMFit wrapper
128: # --------------------------------------------------------------------
129: def test_sample_from_fit(rng):
130:     sizes = [2, 2]
131:     conn = sp.csr_array([[1, 2],
132:                          [2, 1]], dtype=int)
133:     fit = SBMFit(
134:         block_sizes    = sizes,
135:         block_conn     = conn,
136:         directed_graph = False,
137:         neg_loglike    = -1.0,
138:         metadata       = {},
139:     )
140:     g = sample_sbm_graph_from_fit(fit, rng)
141:     assert isinstance(g, GraphData)
142:     assert g.adjacency.shape == (4, 4)

================
File: src/tests/test_swaps.py
================
 1: # ──────────────────────────────────────────────────────────────────────────────
 2: # tests/test_swap_move.py
 3: # ──────────────────────────────────────────────────────────────────────────────
 4: import networkx as nx
 5: import numpy as np
 6: import pytest
 7: from sbm.block_assigner import MetisBlockAssigner
 8: from sbm.block_change_proposers import NodeSwapProposer
 9: from sbm.likelihood import LikelihoodCalculator
10: from sbm.mcmc import MCMCAlgorithm
11: from sbm.graph_data import gd_from_networkx
12: from sbm.block_data import BlockData
13: def _sizes_from_block_data(block_data: BlockData, num_blocks):
14:     """Helper used in both reference and post‑move checks."""
15:     sizes = np.zeros(num_blocks, dtype=int)
16:     for bid, nodes in block_data.block_members.items():
17:         if bid < num_blocks:
18:             sizes[bid] = len(nodes)
19:     return sizes
20: @pytest.mark.parametrize(
21:     "num_nodes,num_blocks,min_block_size,iterations,edge_p",
22:     [
23:         (80, 8, 8, 250, 0.05),
24:         (30, 6, 4, 100, 0.25),
25:         (10, 5, 2, 100, 0.25),
26:     ],
27: )
28: def test_swap_move_preserves_block_sizes(num_nodes, num_blocks, min_block_size, iterations, edge_p):
29:     """After *every* accepted SWAP move, block‑size vector must be unchanged."""
30:     rng = np.random.default_rng(42)
31:     # old version of networkx can't take rng so use seed instead
32:     G = nx.erdos_renyi_graph(num_nodes, edge_p, seed=42, directed=False)
33:     graph_data = gd_from_networkx(G)
34:     # ── Build initial state ────────────────────────────────────────────────
35:     block_data = MetisBlockAssigner(
36:         graph_data=graph_data,
37:         num_blocks=num_blocks,
38:         min_block_size=min_block_size,
39:         rng=rng,
40:     ).compute_assignment()
41:     likelihood_calculator = LikelihoodCalculator(block_data=block_data)
42:     swap_proposer = NodeSwapProposer(block_data=block_data, rng=rng)
43:     mcmc = MCMCAlgorithm(
44:         block_data=block_data,
45:         likelihood_calculator=likelihood_calculator,
46:         change_proposer={"swap": swap_proposer},
47:         rng=rng,
48:     )
49:     reference_sizes = _sizes_from_block_data(block_data, num_blocks)
50:     # ── Run many candidate swap moves ──────────────────────────────────────
51:     for iter in range(iterations):
52:         _delta_ll, accepted = mcmc._attempt_move(move_type="swap", temperature=1.0)
53:         if accepted:
54:             current_sizes = _sizes_from_block_data(mcmc.block_data, num_blocks)
55:             assert np.array_equal(reference_sizes, current_sizes), (
56:                 f"SWAP move {iter} changed block sizes:", reference_sizes, "→", current_sizes
57:             )
58:     # Final safeguard: after *all* moves sizes are still identical.
59:     final_sizes = _sizes_from_block_data(mcmc.block_data, num_blocks)
60:     assert np.array_equal(reference_sizes, final_sizes)

================
File: env_backup.yml
================
  1: name: anon_sbm
  2: channels:
  3:   - conda-forge
  4:   - defaults
  5: dependencies:
  6:   - bzip2=1.0.8
  7:   - ca-certificates=2024.9.24
  8:   - libexpat=2.6.4
  9:   - libffi=3.4.4
 10:   - libmpdec=4.0.0
 11:   - libsqlite=3.47.0
 12:   - libzlib=1.3.1
 13:   - ncurses=6.5
 14:   - openssl=3.4.0
 15:   - pip=24.3.1
 16:   - python=3.13.0
 17:   - python_abi=3.13
 18:   - readline=8.2
 19:   - tk=8.6.13
 20:   - xz=5.4.6
 21:   - pip:
 22:     - absl-py==2.3.0
 23:     - anon-sbm==0.1.0
 24:     - anyio==4.6.2.post1
 25:     - appnope==0.1.4
 26:     - argon2-cffi==23.1.0
 27:     - argon2-cffi-bindings==21.2.0
 28:     - arrow==1.3.0
 29:     - asttokens==2.4.1
 30:     - async-lru==2.0.4
 31:     - attrs==24.2.0
 32:     - babel==2.16.0
 33:     - beautifulsoup4==4.12.3
 34:     - bleach==6.2.0
 35:     - certifi==2024.8.30
 36:     - cffi==1.17.1
 37:     - charset-normalizer==3.4.0
 38:     - comm==0.2.2
 39:     - contourpy==1.3.1
 40:     - cycler==0.12.1
 41:     - debugpy==1.8.9
 42:     - decorator==5.1.1
 43:     - defusedxml==0.7.1
 44:     - executing==2.1.0
 45:     - fastjsonschema==2.20.0
 46:     - fonttools==4.55.0
 47:     - fqdn==1.5.1
 48:     - h11==0.14.0
 49:     - httpcore==1.0.7
 50:     - httpx==0.27.2
 51:     - idna==3.10
 52:     - immutabledict==4.2.1
 53:     - iniconfig==2.0.0
 54:     - ipykernel==6.29.5
 55:     - ipython==8.29.0
 56:     - ipywidgets==8.1.5
 57:     - isoduration==20.11.0
 58:     - jedi==0.19.2
 59:     - jinja2==3.1.4
 60:     - joblib==1.5.1
 61:     - json5==0.9.28
 62:     - jsonpointer==3.0.0
 63:     - jsonschema==4.23.0
 64:     - jsonschema-specifications==2024.10.1
 65:     - jupyter==1.1.1
 66:     - jupyter-client==8.6.3
 67:     - jupyter-console==6.6.3
 68:     - jupyter-core==5.7.2
 69:     - jupyter-events==0.10.0
 70:     - jupyter-lsp==2.2.5
 71:     - jupyter-server==2.14.2
 72:     - jupyter-server-terminals==0.5.3
 73:     - jupyterlab==4.2.6
 74:     - jupyterlab-pygments==0.3.0
 75:     - jupyterlab-server==2.27.3
 76:     - jupyterlab-widgets==3.0.13
 77:     - k-means-constrained==0.7.3
 78:     - kiwisolver==1.4.7
 79:     - markupsafe==3.0.2
 80:     - matplotlib==3.9.2
 81:     - matplotlib-inline==0.1.7
 82:     - mistune==3.0.2
 83:     - nbclient==0.10.0
 84:     - nbconvert==7.16.4
 85:     - nbformat==5.10.4
 86:     - nest-asyncio==1.6.0
 87:     - networkx==3.4.2
 88:     - notebook==7.2.2
 89:     - notebook-shim==0.2.4
 90:     - numpy==1.26.4
 91:     - ortools==9.14.6206
 92:     - overrides==7.7.0
 93:     - packaging==24.2
 94:     - pandas==2.3.0
 95:     - pandocfilters==1.5.1
 96:     - parso==0.8.4
 97:     - pathlib==1.0.1
 98:     - pexpect==4.9.0
 99:     - pillow==11.0.0
100:     - platformdirs==4.3.6
101:     - pluggy==1.5.0
102:     - prometheus-client==0.21.0
103:     - prompt-toolkit==3.0.48
104:     - protobuf==6.31.1
105:     - psutil==6.1.0
106:     - ptyprocess==0.7.0
107:     - pure-eval==0.2.3
108:     - pycparser==2.22
109:     - pygments==2.18.0
110:     - pymetis==2025.1.1
111:     - pyparsing==3.2.0
112:     - pytest==8.3.4
113:     - python-dateutil==2.9.0.post0
114:     - python-json-logger==2.0.7
115:     - pytz==2025.2
116:     - pyyaml==6.0.2
117:     - pyzmq==26.2.0
118:     - referencing==0.35.1
119:     - requests==2.32.3
120:     - rfc3339-validator==0.1.4
121:     - rfc3986-validator==0.1.1
122:     - rpds-py==0.21.0
123:     - scikit-learn==1.7.0
124:     - scipy==1.14.1
125:     - send2trash==1.8.3
126:     - setuptools==75.6.0
127:     - six==1.16.0
128:     - sniffio==1.3.1
129:     - soupsieve==2.6
130:     - stack-data==0.6.3
131:     - terminado==0.18.1
132:     - threadpoolctl==3.6.0
133:     - tinycss2==1.4.0
134:     - tornado==6.4.2
135:     - tqdm==4.67.1
136:     - traitlets==5.14.3
137:     - types-python-dateutil==2.9.0.20241003
138:     - typing-extensions==4.14.0
139:     - tzdata==2025.2
140:     - uri-template==1.3.0
141:     - urllib3==2.2.3
142:     - wcwidth==0.2.13
143:     - webcolors==24.11.1
144:     - webencodings==0.5.1
145:     - websocket-client==1.8.0
146:     - widgetsnbextension==4.0.13
147: prefix: /opt/anaconda3/envs/anon_sbm

================
File: pyproject.toml
================
1: [build-system]
2: requires = ["setuptools", "wheel"]
3: build-backend = "setuptools.build_meta"

================
File: README.md
================
1: # anon_sbm

================
File: requirements.txt
================
 1: pytest
 2: numpy==1.26.4
 3: scipy==1.12.0
 4: networkx
 5: metis
 6: ortools
 7: tqdm
 8: pyyaml
 9: nodevectors
10: scikit-learn
11: k-means-constrained

================
File: tmp_test.py
================
 1: import numpy as np
 2: import scipy.sparse as sp
 3: import pytest
 4: from sbm.sampling import (
 5:     sample_adjacency_matrix,
 6:     sample_sbm_graph_from_fit,
 7: )
 8: from sbm.io import SBMFit
 9: from sbm.graph_data import GraphData
10: # --------------------------------------------------------------------
11: # helpers
12: # --------------------------------------------------------------------
13: def csr_edges_between(adj: sp.csr_array, idx_a, idx_b, directed:bool = False):
14:     """number of non-zero entries with row in A and col in B"""
15:     sub = adj[idx_a][:, idx_b] # type: ignore
16:     if idx_a == idx_b and not directed:
17:         # self-edges, count only upper triangle
18:         return sub.count_nonzero() // 2 # type: ignore
19:     elif not directed:
20:         # undirected, count both directions
21:         return sub.count_nonzero() // 2 + sub[idx_a][:, idx_b].T.count_nonzero() // 2 # type: ignore
22:     else:
23:         return sub.count_nonzero() # type: ignore
24: def complete_block_edges(n, directed):
25:     return n * (n - 1) if directed else n * (n - 1) // 2
26: # --------------------------------------------------------------------
27: # 1. full connectivity should yield a complete bipartite/clique
28: # --------------------------------------------------------------------
29: def test_full_connectivity(rng, directed):
30:     n1, n2 = 3, 4
31:     sizes = [n1, n2]
32:     # maximum possible edges
33:     B = 2
34:     conn = sp.csr_array((B, B), dtype=int)
35:     conn[0, 0] = complete_block_edges(n1, directed)
36:     conn[1, 1] = complete_block_edges(n2, directed)
37:     conn[0, 1] = conn[1, 0] = n1 * n2
38:     adj = sample_adjacency_matrix(sizes, conn, directed=directed, rng=rng)
39:     idx0 = slice(0, n1)
40:     idx1 = slice(n1, n1 + n2)
41:     # --- within-block ------------------------------------------------
42:     assert csr_edges_between(adj, idx0, idx0, directed) == conn[0, 0], \
43:         (
44:             f"expected {conn[0, 0]} edges within block 0. Got {csr_edges_between(adj, idx0, idx0)}. "
45:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
46:         )
47:     assert csr_edges_between(adj, idx1, idx1) == conn[1, 1], \
48:         (
49:             f"expected {conn[1, 1]} edges within block 1"
50:             f"sizes: {sizes}, conn: {conn}, directed: {directed}"
51:         )
52:     # --- between blocks ---------------------------------------------
53:     expect = conn[0, 1]
54:     assert csr_edges_between(adj, idx0, idx1) == expect,\
55:         (
56:             f"expected {expect} edges between blocks 0 and 1. Got {csr_edges_between(adj, idx0, idx1)}. "
57:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
58:         )
59:     assert csr_edges_between(adj, idx1, idx0) == expect, \
60:         (
61:             f"expected {expect} edges between blocks 1 and 0. Got {csr_edges_between(adj, idx1, idx0)}. "
62:             f"sizes: {sizes}, conn: {conn.toarray().flatten()}, directed: {directed}"
63:         )
64:     if directed:
65:         # both directions filled
66:         assert csr_edges_between(adj, idx1, idx0) == expect, \
67:                 f"expected {expect} edges between blocks 1 and 0. Got {csr_edges_between(adj, idx1, idx0)}"
68:     # --- no self-loops ----------------------------------------------
69:     assert adj.diagonal().sum() == 0, \
70:                 "expected no self-loops in the adjacency matrix"
71: if __name__ == "__main__":
72:     rng = np.random.default_rng(42)  # For reproducibility
73:     for directed in [False, True]:
74:         test_full_connectivity(rng, directed)
75:         print(f"Test for {'directed' if directed else 'undirected'} graph passed.")

================
File: configs/sbm_fit_block_size_experiments.yml
================
 1: # -------------------------------------------------------------------
 2: #  Global defaults
 3: # -------------------------------------------------------------------
 4: seed: 42
 5: # -------------------------------------------------------------------
 6: #  Configuration for the SBM models fitting as list of dicts
 7: # Each item needs:
 8: #    min_block_size: minimum size of the blocks
 9: #    n_iter: number of iterations for the fitting
10: #    temperature: initial temperature for the simulated annealing
11: #    cooling_rate: cooling rate for the simulated annealing
12: #    force_undirected: whether to treat the graph as undirected
13: # -------------------------------------------------------------------
14: sbm:
15:   - min_block_size: 3
16:     max_n_iter: 1_000_000_000
17:     temperature: 1.0
18:     cooling_rate: 0.9999
19:     force_undirected: true
20:     init_method: "ProneKMeans"
21:     patience: 1000
22:   #- min_block_size: 6
23:   #  max_n_iter: 10_000
24:   #  temperature: 1.0
25:   #  cooling_rate: 0.9999
26:   #  force_undirected: true
27:   #  init_method: "ProneKMeans"
28:   #  patience: 1000
29:   #- min_block_size: 12
30:   #  max_n_iter: 10_000
31:   #  temperature: 1.0
32:   #  cooling_rate: 0.9999
33:   #  force_undirected: true
34:   #  init_method: "ProneKMeans"
35:   #  patience: 1000
36:   #- min_block_size: 25
37:   #  max_n_iter: 10_000
38:   #  temperature: 1.0
39:   #  cooling_rate: 0.9999
40:   #  force_undirected: true
41:   #  init_method: "ProneKMeans"
42:   #  patience: 1000
43: # -------------------------------------------------------------------
44: #  Configuration for the logging
45: #  - logging_folder: folder to save the logs
46: #  - overwirte: set true to ignore cached results
47: #  - log_every: how often to log the results (in number of iterations)
48: # -------------------------------------------------------------------
49: logging:
50:   - logging_folder: "./logs/"
51:     overwrite: true           # set true to ignore cached results
52:     log_every: 1_000
53: # -------------------------------------------------------------------
54: #  List of empirical graphs to process
55: #  Each item needs:
56: #    name : label used for output folder (models/sbm/<name>/)
57: #    path : relative or absolute path to the processed graph file
58: # -------------------------------------------------------------------
59: datasets:
60: # small datasets (< 1000 nodes)
61:   - name: congress_twitter
62:     path: data/processed/congress_twitter.edgelist # undirected GML
63:   - name: caltech_fb 
64:     path: data/processed/caltech_fb.edgelist # undirected GML
65:   - name: eu_email
66:     path: data/processed/eu_email.edgelist # undirected GML
67: # medium datasets (1000 - 10_000 nodes):
68:   #- name: lastfm_asia
69:   #  path: data/processed/lastfm_asia.edgelist # undirected GML
70:   #- name: wiki_vote
71:   #  path: data/processed/wiki_vote.edgelist # undirected GML
72: # large datasets (10_000-100_000 nodes):
73:   #- name: enron_email 
74:   #  path: data/processed/enron_email.edgelist # undirected GML

================
File: notebooks/sbm_block_sizes_26-06-2025.ipynb
================
  1: {
  2:  "cells": [
  3:   {
  4:    "cell_type": "markdown",
  5:    "id": "09dbb184",
  6:    "metadata": {},
  7:    "source": [
  8:     "# Investigate SBM block sizes\n",
  9:     "We are attempting to learn SBM representations with a min-block size constraint.\n",
 10:     "\n",
 11:     "Optimally, we would like all blocks to have minimum size (gives smallest expected reconstruction error).\n",
 12:     "\n",
 13:     "The current implementation (Metis asigner) creates initial blocks, and their sizes never change. However, these initial blocks are not all minimum block size.\n",
 14:     "\n",
 15:     "Here we plot the actual block-size distributions and compare with pre-specified min-block-size."
 16:    ]
 17:   },
 18:   {
 19:    "cell_type": "code",
 20:    "execution_count": 1,
 21:    "id": "7097892b",
 22:    "metadata": {},
 23:    "outputs": [],
 24:    "source": [
 25:     "from pathlib import Path\n",
 26:     "import numpy as np\n",
 27:     "import pandas as pd\n",
 28:     "import matplotlib.pyplot as plt"
 29:    ]
 30:   },
 31:   {
 32:    "cell_type": "code",
 33:    "execution_count": 2,
 34:    "id": "8cb75b7b",
 35:    "metadata": {},
 36:    "outputs": [],
 37:    "source": [
 38:     "def get_min_block_size(string):\n",
 39:     "    # find index of substring 'min_block_size'\n",
 40:     "    index = string.find('min_block_size')\n",
 41:     "\n",
 42:     "    tail_string = string[index + len('min_block_size_'):]\n",
 43:     "    block_size = tail_string.split(\"_\")[0]\n",
 44:     "\n",
 45:     "    return int(block_size)"
 46:    ]
 47:   },
 48:   {
 49:    "cell_type": "code",
 50:    "execution_count": 4,
 51:    "id": "968e6b67",
 52:    "metadata": {},
 53:    "outputs": [
 54:     {
 55:      "name": "stdout",
 56:      "output_type": "stream",
 57:      "text": [
 58:       "Loading fit from /Users/lmmi/anon_sbm/data/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_max_n_iter_10000_min_block_size_3_patience_1000_temperature_1_0\n"
 59:      ]
 60:     },
 61:     {
 62:      "ename": "FileNotFoundError",
 63:      "evalue": "[Errno 2] No such file or directory: '/Users/lmmi/anon_sbm/data/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_max_n_iter_10000_min_block_size_3_patience_1000_temperature_1_0/block_sizes.json'",
 64:      "output_type": "error",
 65:      "traceback": [
 66:       "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
 67:       "\u001b[31mFileNotFoundError\u001b[39m                         Traceback (most recent call last)",
 68:       "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 21\u001b[39m\n\u001b[32m     19\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mLoading fit from \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfit_folder_path\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m     20\u001b[39m min_block_size = get_min_block_size(\u001b[38;5;28mstr\u001b[39m(fit_folder_path))\n\u001b[32m---> \u001b[39m\u001b[32m21\u001b[39m sbm_fit = \u001b[43mSBMWriter\u001b[49m\u001b[43m.\u001b[49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfit_folder_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msilence\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[32m     23\u001b[39m min_block_sizes.append([min_block_size] * \u001b[38;5;28mlen\u001b[39m(sbm_fit.block_sizes))\n\u001b[32m     24\u001b[39m block_sizes.append(sbm_fit.block_sizes)\n",
 69:       "\u001b[36mFile \u001b[39m\u001b[32m~/anon_sbm/src/sbm/io.py:51\u001b[39m, in \u001b[36mSBMWriter.load\u001b[39m\u001b[34m(path, silence)\u001b[39m\n\u001b[32m     48\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m silence:\n\u001b[32m     49\u001b[39m     \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mLoading SBM fit from \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m---> \u001b[39m\u001b[32m51\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m \u001b[49m\u001b[43m/\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mblock_sizes.json\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mr\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m sizes_file:\n\u001b[32m     52\u001b[39m     block_sizes = json.load(sizes_file)\n\u001b[32m     53\u001b[39m block_sizes = [\u001b[38;5;28mint\u001b[39m(size) \u001b[38;5;28;01mfor\u001b[39;00m size \u001b[38;5;129;01min\u001b[39;00m block_sizes]\n",
 70:       "\u001b[31mFileNotFoundError\u001b[39m: [Errno 2] No such file or directory: '/Users/lmmi/anon_sbm/data/sbm_fits/sbm_fit_congress_twitter_cooling_rate_0_999_force_undirected_True_init_method_ProneKMeans_max_n_iter_10000_min_block_size_3_patience_1000_temperature_1_0/block_sizes.json'"
 71:      ]
 72:     }
 73:    ],
 74:    "source": [
 75:     "import yaml\n",
 76:     "from sbm.utils.pipeline_utils import sbmfit_folderpath\n",
 77:     "from sbm.io import SBMWriter\n",
 78:     "\n",
 79:     "fit_config = yaml.safe_load(Path(\"/Users/lmmi/anon_sbm/configs/sbm_fit_block_size_experiments.yml\").read_text())\n",
 80:     "data_config = fit_config[\"datasets\"] # type: ignore\n",
 81:     "\n",
 82:     "min_block_sizes = []\n",
 83:     "block_sizes = []\n",
 84:     "for sbm_config in fit_config[\"sbm\"]:\n",
 85:     "    for ds in data_config:\n",
 86:     "\n",
 87:     "        # load fitted model\n",
 88:     "        fit_folder_path = sbmfit_folderpath(\n",
 89:     "            base_dir=Path(\"/Users/lmmi/anon_sbm/data/sbm_fits\"),\n",
 90:     "            sbm_config=sbm_config,# type: ignore\n",
 91:     "            data_spec=ds,\n",
 92:     "        )\n",
 93:     "        print(f\"Loading fit from {fit_folder_path}\")\n",
 94:     "        min_block_size = get_min_block_size(str(fit_folder_path))\n",
 95:     "        sbm_fit = SBMWriter.load(fit_folder_path, silence=True)\n",
 96:     "\n",
 97:     "        min_block_sizes.append([min_block_size] * len(sbm_fit.block_sizes))\n",
 98:     "        block_sizes.append(sbm_fit.block_sizes)\n"
 99:    ]
100:   },
101:   {
102:    "cell_type": "code",
103:    "execution_count": 35,
104:    "id": "7d83487f",
105:    "metadata": {},
106:    "outputs": [],
107:    "source": [
108:     "# flatten the lists\n",
109:     "min_block_sizes = np.array([ item for sublist in min_block_sizes for item in sublist ])\n",
110:     "block_sizes = np.array([ item for sublist in block_sizes for item in sublist ])"
111:    ]
112:   },
113:   {
114:    "cell_type": "code",
115:    "execution_count": 36,
116:    "id": "545352fa",
117:    "metadata": {},
118:    "outputs": [
119:     {
120:      "name": "stderr",
121:      "output_type": "stream",
122:      "text": [
123:       "/var/folders/y6/j9fbqcvx6lb5l99614n30y4c0000gn/T/ipykernel_92149/2968653449.py:7: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
124:       "  fig.show()\n"
125:      ]
126:     },
127:     {
128:      "data": {
129:       "image/png": "",
130:       "text/plain": [
131:        "<Figure size 1000x600 with 1 Axes>"
132:       ]
133:      },
134:      "metadata": {},
135:      "output_type": "display_data"
136:     }
137:    ],
138:    "source": [
139:     "fig, ax = plt.subplots(figsize=(10, 6))\n",
140:     "\n",
141:     "ax.plot(min_block_sizes, block_sizes, marker='o', linestyle='-', color='b')\n",
142:     "ax.set_xlabel(\"Minimum Block Size\")\n",
143:     "ax.set_ylabel(\"Block Sizes\")\n",
144:     "\n",
145:     "fig.show()\n"
146:    ]
147:   },
148:   {
149:    "cell_type": "code",
150:    "execution_count": 49,
151:    "id": "879ee57b",
152:    "metadata": {},
153:    "outputs": [
154:     {
155:      "data": {
156:       "text/plain": [
157:        "<matplotlib.legend.Legend at 0x11ffcd6d0>"
158:       ]
159:      },
160:      "execution_count": 49,
161:      "metadata": {},
162:      "output_type": "execute_result"
163:     },
164:     {
165:      "data": {
166:       "image/png": "",
167:       "text/plain": [
168:        "<Figure size 800x500 with 1 Axes>"
169:       ]
170:      },
171:      "metadata": {},
172:      "output_type": "display_data"
173:     }
174:    ],
175:    "source": [
176:     "fig, ax = plt.subplots(figsize=(8, 5))\n",
177:     "\n",
178:     "values, counts  = np.unique(min_block_sizes - block_sizes, return_counts=True)\n",
179:     "\n",
180:     "ax.plot(values, counts/counts.sum(), marker='o', linestyle='-', color='salmon')\n",
181:     "\n",
182:     "ax.fill_betweenx(y=[0, 1], x1=min(values), x2=0, color='#dddddd', alpha=0.5, label='Block size > min block size')\n",
183:     "\n",
184:     "fig.legend(fontsize=12)\n",
185:     "\n",
186:     "\n"
187:    ]
188:   },
189:   {
190:    "cell_type": "code",
191:    "execution_count": null,
192:    "id": "b8a60bad",
193:    "metadata": {},
194:    "outputs": [],
195:    "source": []
196:   },
197:   {
198:    "cell_type": "code",
199:    "execution_count": null,
200:    "id": "ec731210",
201:    "metadata": {},
202:    "outputs": [],
203:    "source": []
204:   },
205:   {
206:    "cell_type": "code",
207:    "execution_count": null,
208:    "id": "8198ec2d",
209:    "metadata": {},
210:    "outputs": [],
211:    "source": []
212:   },
213:   {
214:    "cell_type": "code",
215:    "execution_count": 1,
216:    "id": "fbbae561",
217:    "metadata": {},
218:    "outputs": [],
219:    "source": [
220:     "import numpy as np"
221:    ]
222:   },
223:   {
224:    "cell_type": "code",
225:    "execution_count": 2,
226:    "id": "995a8d86",
227:    "metadata": {},
228:    "outputs": [],
229:    "source": [
230:     "def fun(B, delta=0.05, Delta=10**3):\n",
231:     "    return np.log((B+B**2)/delta)*Delta"
232:    ]
233:   },
234:   {
235:    "cell_type": "code",
236:    "execution_count": null,
237:    "id": "17749985",
238:    "metadata": {},
239:    "outputs": [
240:     {
241:      "data": {
242:       "text/plain": [
243:        "np.float64(14615.015756511137)"
244:       ]
245:      },
246:      "execution_count": 3,
247:      "metadata": {},
248:      "output_type": "execute_result"
249:     }
250:    ],
251:    "source": [
252:     "fun()"
253:    ]
254:   },
255:   {
256:    "cell_type": "code",
257:    "execution_count": 4,
258:    "id": "e6fc7922",
259:    "metadata": {},
260:    "outputs": [
261:     {
262:      "data": {
263:       "text/plain": [
264:        "333"
265:       ]
266:      },
267:      "execution_count": 4,
268:      "metadata": {},
269:      "output_type": "execute_result"
270:     }
271:    ],
272:    "source": [
273:     "1000//3"
274:    ]
275:   },
276:   {
277:    "cell_type": "code",
278:    "execution_count": null,
279:    "id": "509dda70",
280:    "metadata": {},
281:    "outputs": [],
282:    "source": []
283:   }
284:  ],
285:  "metadata": {
286:   "kernelspec": {
287:    "display_name": "anon_sbm_notebook",
288:    "language": "python",
289:    "name": "python3"
290:   },
291:   "language_info": {
292:    "codemirror_mode": {
293:     "name": "ipython",
294:     "version": 3
295:    },
296:    "file_extension": ".py",
297:    "mimetype": "text/x-python",
298:    "name": "python",
299:    "nbconvert_exporter": "python",
300:    "pygments_lexer": "ipython3",
301:    "version": "3.13.5"
302:   }
303:  },
304:  "nbformat": 4,
305:  "nbformat_minor": 5
306: }

================
File: src/data_processing/process_all.py
================
 1: # src/data_processing/process_all.py
 2: """ 
 3: Script to run all processing steps of all datasets.
 4: """
 5: import subprocess
 6: import sys
 7: def run(cmd):
 8:     print(">>", " ".join(cmd))
 9:     subprocess.check_call(cmd)
10: datasets = [
11:     "data_processing.process_congress_twitter",
12:     "data_processing.process_email_eu",
13:     "data_processing.process_caltech",
14:     "data_processing.process_wiki_vote",
15:     "data_processing.process_enron_email",
16:     "data_processing.process_lastfm_asia",
17: ]
18: if __name__ == "__main__":
19:     python = sys.executable
20:     for dataset in datasets:
21:         run([python, "-m", dataset])

================
File: src/metrics/clustering.py
================
 1: """ 
 2: Implementation of the clustering coefficient distance metric.
 3: This module computes the absolute difference in the clustering coefficients
 4: between two graphs represented by their adjacency matrices.
 5: """
 6: # metrics/clustering.py
 7: from typing import Optional
 8: import numpy as np
 9: import networkx as nx
10: from scipy.sparse import csr_array
11: def clustering_distance(
12:         emp_adj: csr_array,
13:         sur_adj: csr_array,
14:         directed: Optional[bool] = False,
15:         rng: np.random.Generator = np.random.default_rng(1)
16:     ) -> float:
17:     """ 
18:     Compute absolute 
19:     Parameters
20:     ----------
21:     emp_adj, sur_adj : scipy.sparse.csr_matrix
22:         Adjacency of empirical and surrogate graphs (directed or undirected).
23:     directed : bool, optional
24:         If True, compute directed degree distribution.
25:         If False, compute undirected degree distribution.
26:     rng : np.random.Generator, optional
27:         Random number generator for sampling (default: np.random.default_rng(1)).
28:     Returns
29:     -------
30:     float
31:         Distance (lower = more similar).
32:     """
33:     if directed:
34:         raise NotImplementedError(
35:             "Directed clustering coefficient is not implemented yet."
36:         )
37:     else:
38:         # Undirected clustering coefficient
39:         emp_graph = nx.from_scipy_sparse_matrix(emp_adj)
40:         sur_graph = nx.from_scipy_sparse_matrix(sur_adj)
41:         emp_clustering = nx.average_clustering(emp_graph)
42:         sur_clustering = nx.average_clustering(sur_graph)
43:         return abs(emp_clustering - sur_clustering)

================
File: src/metrics/degree.py
================
 1: """ 
 2: Implementation of the degree distribution distance metric.
 3: This module computes the Earth-mover distance (1-D Wasserstein distance)
 4: between the degree distributions in two graphs represented by
 5: their adjacency matrices.
 6: """
 7: # metrics/degree.py
 8: from typing import Optional
 9: import numpy as np
10: from scipy.stats import wasserstein_distance #  1-D EMD
11: from scipy.sparse import csr_array
12: def degree_distance(
13:         emp_adj: csr_array,
14:         sur_adj: csr_array,
15:         directed: Optional[bool] = False,
16:         in_degree: Optional[bool] = False,
17:         out_degree: Optional[bool] = False,
18:         rng: np.random.Generator = np.random.default_rng(1)
19:     ) -> float:
20:     """ 
21:     Earth-mover (1-D Wasserstein) distance between the degree distributions
22:     of two graphs.
23:     Parameters
24:     ----------
25:     emp_adj, sur_adj : scipy.sparse.csr_matrix
26:         Adjacency of empirical and surrogate graphs (directed or undirected).
27:     directed : bool, optional
28:         If True, compute directed degree distribution.
29:         If False, compute undirected degree distribution.
30:     in_degree : bool, optional
31:         If True, compute in-degree distribution (for directed graphs).
32:         Ignored if `directed` is False.
33:     out_degree : bool, optional
34:         If True, compute out-degree distribution (for directed graphs).
35:         Ignored if `directed` is False.
36:     rng : np.random.Generator, optional
37:         Random number generator for sampling (default: np.random.default_rng(1)).
38:     Returns
39:     -------
40:     float
41:         Distance (lower = more similar).
42:     """
43:     if directed:
44:         raise NotImplementedError(
45:             "Directed degree distribution is not implemented yet."
46:         )
47:     else:
48:         if in_degree or out_degree:
49:             raise Warning(
50:                 "in_degree and out_degree are ignored for undirected graphs."
51:             )
52:         # Undirected degree distribution
53:         emp_degrees = np.asarray(emp_adj.sum(axis=0)).flatten()
54:         sur_degrees = np.asarray(sur_adj.sum(axis=0)).flatten()
55:         emp_dist = np.bincount(emp_degrees)
56:         sur_dist = np.bincount(sur_degrees)
57:         # Normalize distributions
58:         emp_dist = emp_dist / emp_dist.sum()
59:         sur_dist = sur_dist / sur_dist.sum()
60:         # Compute Earth-mover distance
61:         distance = wasserstein_distance(emp_dist, sur_dist)
62:         return distance

================
File: src/metrics/shortest_path.py
================
  1: """ 
  2: Implementation of the shortest path distribution distance metric.
  3: This module computes the Earth-mover distance (1-D Wasserstein distance)
  4: between the distributions of all-pairs shortest-path lengths
  5: in two graphs represented by their adjacency matrices.
  6: """
  7: # metrics/shortest_path.py
  8: from typing import Optional
  9: import numpy as np
 10: import networkx as nx
 11: from scipy.stats import wasserstein_distance #  1-D EMD
 12: from scipy.sparse import csr_array
 13: from scipy.sparse.csgraph import shortest_path
 14: from sbm.utils.util import restrict_to_lcc
 15: import networkx as nx
 16: from typing import Iterable, Hashable, List, Union
 17: Number = Union[int, float]
 18: def all_unique_shortest_distances(
 19:     G: nx.Graph,
 20:     weight: str | None = None,
 21:     cutoff: Number | None = None
 22: ) -> List[Number]:
 23:     """
 24:     Return a list containing the length of every unique shortest path in *G*.
 25:     Parameters
 26:     ----------
 27:     G : networkx.Graph
 28:         The input graph (directed or undirected, weighted or unweighted).
 29:     weight : str or None, default=None
 30:         Edge-attribute key to use as weight.  ``None`` ⇒ treat edges as unit-weight.
 31:     cutoff : int | float | None, default=None
 32:         Ignore paths longer than *cutoff* (same semantics as NetworkX).
 33:     Returns
 34:     -------
 35:     distances : list[Number]
 36:         One entry per unordered, connected node pair.  
 37:         Unreachable pairs are silently skipped.
 38:     """
 39:     # 1.  Choose the correct all-pairs iterator
 40:     if weight is None:
 41:         # Unweighted ⇢ multi-source breadth-first search
 42:         iterator = nx.all_pairs_shortest_path_length(G, cutoff=cutoff)  # :contentReference[oaicite:0]{index=0}
 43:     else:
 44:         # Weighted ⇢ repeated Dijkstra
 45:         iterator = nx.all_pairs_dijkstra_path_length(G, cutoff=cutoff, weight=weight)  # :contentReference[oaicite:1]{index=1}
 46:     # 2.  Collect unique unordered pairs
 47:     seen: set[frozenset[Hashable]] = set()
 48:     distances: List[Number] = []
 49:     for u, length_dict in iterator:
 50:         for v, d in length_dict.items():
 51:             if u == v:                       # skip self-loops (distance 0)
 52:                 continue
 53:             pair = frozenset((u, v))         # unordered representation
 54:             if pair in seen:                 # already counted via (v, u)
 55:                 continue
 56:             seen.add(pair)
 57:             distances.append(d)
 58:     return distances
 59: def shortest_path_distance(
 60:         emp_adj: csr_array,
 61:         sur_adj: csr_array,
 62:         n_samples: Optional[int]=10_000,
 63:         rng:np.random.Generator = np.random.default_rng(1)
 64:     ) -> float:
 65:     """
 66:     Earth-mover (1-D Wasserstein) distance between the distributions
 67:     of all-pairs shortest-path lengths.
 68:     Parameters
 69:     ----------
 70:     emp_adj, sur_adj : scipy.sparse.csr_matrix
 71:         Adjacency of empirical and surrogate graphs (undirected).
 72:     n_samples : int, optional
 73:         Number of samples to use for the distributions.
 74:         If None, all pairs are used.
 75:     Returns
 76:     -------
 77:     float
 78:         Distance (lower = more similar).
 79:     """
 80:     emp_adj = restrict_to_lcc(emp_adj, directed=False)
 81:     sur_adj = restrict_to_lcc(sur_adj, directed=False)
 82:     emp_graph_size = emp_adj.shape[0] # type: ignore
 83:     sur_graph_size = emp_adj.shape[0] # type: ignore
 84:     if n_samples is None:
 85:         # Use all pairs if n_samples is None, generated using networkx (returns iterator)
 86:         x = all_unique_shortest_distances(
 87:             nx.from_scipy_sparse_matrix(emp_adj),
 88:             weight=None,
 89:             cutoff=None
 90:         )
 91:         y = all_unique_shortest_distances(
 92:             nx.from_scipy_sparse_matrix(sur_adj),
 93:             weight=None,
 94:             cutoff=None
 95:         )
 96:     else:
 97:         n_samples_emp = int(min(
 98:             n_samples,
 99:             emp_graph_size * (emp_graph_size - 1) // 2,
100:         ))
101:         n_samples_sur = int(min(
102:             n_samples,
103:             sur_graph_size * (sur_graph_size - 1) // 2,
104:         ))
105:         emp_pair_part_1 = rng.choice(emp_graph_size, size=n_samples_emp, replace=True)
106:         emp_pair_part_2 = rng.choice(emp_graph_size-1, size=n_samples_emp, replace=True)
107:         emp_pair_part_2[emp_pair_part_2 >= emp_pair_part_1] += 1
108:         emp_pairs = np.column_stack((emp_pair_part_1, emp_pair_part_2))
109:         sur_pair_part_1 = rng.choice(sur_graph_size, size=n_samples_sur, replace=True)
110:         sur_pair_part_2 = rng.choice(sur_graph_size-1, size=n_samples_sur, replace=True)
111:         sur_pair_part_2[sur_pair_part_2 >= sur_pair_part_1] += 1
112:         sur_pairs = np.column_stack((sur_pair_part_1, sur_pair_part_2))
113:         def sample_shortest_paths(adj, pairs):
114:             G = nx.from_scipy_sparse_matrix(adj)
115:             return np.array([nx.shortest_path_length(G, source=u, target=v) for u, v in pairs])
116:         x = sample_shortest_paths(emp_adj, emp_pairs)
117:         y = sample_shortest_paths(sur_adj, sur_pairs)
118:     return wasserstein_distance(x, y)

================
File: src/pipelines/evaluate_surrogates.py
================
 1: import argparse, yaml, csv
 2: from pathlib import Path
 3: import numpy as np
 4: import scipy.sparse as sp
 5: from metrics import REGISTRY
 6: from sbm.io import GraphLoader
 7: from sbm.utils.pipeline_utils import load_csr_npz
 8: def main(cfg):
 9:     cfg = yaml.safe_load(Path(cfg).read_text())
10:     for ds in cfg["datasets"]:
11:         results = []
12:         emp = GraphLoader.load(Path(ds["graph"])).adjacency
13:         surr_dir = Path("data/surrogates") / ds["name"]
14:         for surr_file in sorted(surr_dir.glob("surr_*.npz")):
15:             surr = load_csr_npz(surr_file)
16:             row = {"dataset": ds["name"], "surrogate": surr_file.stem}
17:             for m in cfg["metrics"]:
18:                 row[m] = REGISTRY[m](emp, surr)
19:             results.append(row)
20:             print("evaluated", surr_file)
21:         out = Path("results") / f"surrogate_metrics.csv"
22:         out.parent.mkdir(exist_ok=True)
23:         with out.open("w", newline="") as f:
24:             w = csv.DictWriter(f, fieldnames=results[0].keys())
25:             w.writeheader(); w.writerows(results)
26:         print("saved", out)
27: if __name__ == "__main__":
28:     p = argparse.ArgumentParser(); p.add_argument("cfg"); main(p.parse_args().cfg)

================
File: src/pipelines/run_all.py
================
 1: """ 
 2: Script to run fitting, generation, and evaluation pipelines in sequence.
 3: """
 4: import subprocess
 5: import sys
 6: def run(cmd):
 7:     print(">>", " ".join(cmd))
 8:     subprocess.check_call(cmd)
 9: CFG_FIT = "configs/sbm_fit_block_size_experiments.yml"
10: CFG_EVAL = "configs/surrogate_eval.yml"
11: if __name__ == "__main__":
12:     python = sys.executable
13:     run([
14:         python, "-m",
15:         "pipelines.fit_sbm",
16:         "--fit_config", CFG_FIT
17:     ])
18:     run([
19:         python, "-m",
20:         "pipelines.generate_and_evaluate_surrogates",
21:         "--fit_config", CFG_FIT,
22:         "--eval_config", CFG_EVAL,
23:     ])

================
File: src/sbm/utils/util.py
================
 1: import numpy as np
 2: from scipy.sparse.csgraph import connected_components
 3: from scipy.sparse import csr_array
 4: def set_random_seed(seed: int):
 5:     return np.random.default_rng(seed)
 6: def restrict_to_lcc(adj: csr_array, directed:bool) -> csr_array:
 7:     """ 
 8:     resricts adjacency matrix to the largest connected component (LCC).
 9:     """
10:     if directed:
11:         n_components, labels = connected_components(adj, directed=True)
12:     else:
13:         n_components, labels = connected_components(adj, directed=False)
14:     if n_components == 1:
15:         return adj
16:     largest_component = np.argmax(np.bincount(labels))
17:     mask = labels == largest_component
18:     adj_lcc = csr_array(adj[mask][:, mask]) # type: ignore
19:     return adj_lcc

================
File: src/sbm/block_change_proposers.py
================
  1: from typing import List, Optional, Tuple, DefaultDict, Literal
  2: from collections import defaultdict, Counter
  3: import numpy as np
  4: from sbm.block_data import BlockData
  5: from sbm.edge_delta import EdgeDelta, NumpyEdgeDelta
  6: ### Aliases 
  7: CombinationDelta= DefaultDict[Tuple[int, int], int] # changes in possible pairs between blocks
  8: ProposedValidChanges = List[Tuple[int, int]]  # list of proposed node-block pairs
  9: ChangeProposerName = Literal["uniform_swap", "edge_based_swap", "triadic_swap"]
 10: ChangeProposers = Literal["NodeSwapProposer", "EdgeBasedSwapProposer", "TriadicSwapProposer"]
 11: ### ChangeProposer classes for proposing block changes in the SBM
 12: # These classes handle the logic of proposing valid changes to the block assignments
 13: # and computing the resulting edge deltas for the block connectivity matrix.
 14: class ChangeProposer:
 15:     """ 
 16:     Class to propose block-assignment changes for the MCMC algorithm.
 17:     Handles min block size constraints. All functions return None
 18:     if a  and ensures valid moves.
 19:     Proposers shoudl always change block-id to block-adjacency idx before
 20:     computing deltas.
 21:     """
 22:     def __init__(self,
 23:                  block_data: BlockData,
 24:                  rng: np.random.Generator=np.random.default_rng(1),
 25:                  use_numpy: bool = False,
 26:                  ):
 27:         self.block_data = block_data
 28:         self.rng = rng
 29:         self.min_block_size = 1
 30:         self.use_numpy = use_numpy
 31:         # Direct CSR pointers for O(1) edge sampling
 32:         self._indptr = self.block_data.graph_data.adjacency.indptr
 33:         self._indices = self.block_data.graph_data.adjacency.indices
 34:     def propose_change(self,
 35:         changes: Optional[ProposedValidChanges] = None,
 36:         )-> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
 37:         raise NotImplementedError("This method should be overridden by subclasses.")
 38:     def _compute_delta_edge_counts(self, proposed_changes: ProposedValidChanges) -> EdgeDelta:
 39:         """
 40:         Compute the edge deltas for the proposed change.
 41:         :param change: Proposed change as a list of (node, target_block) tuples.
 42:         :return: EdgeDelta containing the changes in edge counts between blocks.
 43:         """
 44:         raise NotImplementedError("This method should be overridden by subclasses.")
 45:     # -----------------------------------------------------------------------------
 46:     def _compute_edge_counts_between_node_and_blocks(self,
 47:                                                node: int,
 48:                                                ) -> Counter[int]:
 49:         """
 50:         Compute the number of edges between a node and each affected block.
 51:         :param node: The node to move.
 52:         :param affected_blocks: The blocks affected by the move.
 53:         :return: A dictionary mapping block IDs to edge counts with the node.
 54:         k_i: Counter[int]: number of edges between node and each affected block.
 55:         returns a Counter object where keys are block IDs and values are edge counts.
 56:         """
 57:         if self.block_data.directed:
 58:             raise NotImplementedError("Directed graphs are not supported yet.")
 59:         else:
 60:             #neighbors = self.block_data.graph_data.adjacency[:, [node]].indices  # type: ignore
 61:             neighbors = self.block_data.graph_data.adjacency[[node], :].indices  # type: ignore
 62:             blocks_among_neighbors = [
 63:                 self.block_data.block_indices[
 64:                     self.block_data.blocks[neighbor]
 65:                 ] for neighbor in neighbors
 66:             ]
 67:             k_i = Counter(blocks_among_neighbors)
 68:             return k_i
 69: class NodeSwapProposer(ChangeProposer):
 70:     def propose_change(self,
 71:         changes: Optional[ProposedValidChanges] = None,
 72:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
 73:         """
 74:         Propose swapping two nodes between different blocks.
 75:         :return: Tuple of (node1, node2) or None if no valid swap.
 76:         """
 77:         if changes is not None:
 78:             if len(changes) != 2:
 79:                 raise ValueError("NodeSwapProposer requires exactly two nodes to swap.")
 80:             proposed_changes = changes
 81:         else:
 82:             # Select two different blocks
 83:             block1, block2 = self.rng.choice(
 84:                 self.block_data.block_connectivity.shape[0],
 85:                 #list(self.block_data.block_sizes.keys()),
 86:                 size=2,
 87:                 replace=False
 88:             )
 89:             # Select one node from each block
 90:             # Note: changing to list is inefficient for large blocks.
 91:             # However, having memberships being lists allow for fast 
 92:             # membership updates.
 93:             # Change if large blocks are common.
 94:             node1 = self.rng.choice(
 95:                 list(self.block_data.block_members[block1])
 96:             )
 97:             node2 = self.rng.choice(
 98:                 list(self.block_data.block_members[block2])
 99:             )
100:             proposed_changes :ProposedValidChanges = [(node1, block2), (node2, block1)]
101:         delta_e: EdgeDelta = self._compute_delta_edge_counts(
102:                 proposed_changes=proposed_changes,
103:                 use_numpy=self.use_numpy,
104:             )
105:         delta_n: CombinationDelta = defaultdict(int)
106:         return proposed_changes, delta_e, delta_n
107:     def _compute_delta_edge_counts(self,
108:             proposed_changes: ProposedValidChanges,
109:             use_numpy: bool = False,
110:         )-> EdgeDelta:
111:         """
112:         Compute the changes in edge counts between blocks due to swapping
113:         node i and node j.
114:         :param i: The index of the first node being swapped.
115:         :param j: The index of the second node being swapped.
116:         :param k_i: The edges between the moving node and its neighbor blocks.
117:         :param source_block: The block from which the node is moved.
118:         :param target_block: The block to which the node is moved.
119:         :return: A Counter mapping block pairs to changes in edge counts.
120:         """
121:         if self.block_data.directed:
122:             raise NotImplementedError("Directed graphs are not supported yet.")
123:         (i, old_block_j), (j, old_block_i) = proposed_changes
124:         if use_numpy:
125:             delta_e = NumpyEdgeDelta(
126:                 n_blocks=len(self.block_data.block_sizes)
127:             )
128:         else:
129:             delta_e = EdgeDelta(
130:                 n_blocks=len(self.block_data.block_sizes)
131:             )
132:         # compute the edge counts for the blocks of i and j
133:         # on block-adjacency idx level
134:         k_i = self._compute_edge_counts_between_node_and_blocks(i)
135:         k_j = self._compute_edge_counts_between_node_and_blocks(j)
136:         affected_blocks = set(k_i.keys()) | set(k_j.keys())
137:         # new implementation with combined increment function
138:         neighbor_blocks = affected_blocks - {old_block_i, old_block_j}
139:         # build increment lists for neighbor blocks
140:         counts = [
141:             -k_i[t] + k_j[t] for t in neighbor_blocks
142:         ] + [
143:             -k_j[t] + k_i[t] for t in neighbor_blocks
144:         ]
145:         blocks_i = [old_block_i] * len(neighbor_blocks) + [old_block_j] * len(neighbor_blocks)
146:         block_j = list(neighbor_blocks) + list(neighbor_blocks)
147:         delta_e.increment(
148:             counts = counts,
149:             blocks_i = blocks_i,
150:             blocks_j = block_j,
151:         ) 
152:         # Add the changes for the old blocks of i and j
153:         has_edge_ij = bool(self.block_data.graph_data.adjacency[i, j])
154:         delta_e.increment(
155:             counts=[
156:                 k_i[old_block_i] - k_i[old_block_j] + k_j[old_block_j] - k_j[old_block_i] + 2 * has_edge_ij,
157:                 k_j[old_block_i] - k_i[old_block_i] - has_edge_ij,
158:                 k_i[old_block_j] - k_j[old_block_j] - has_edge_ij
159:             ],
160:             blocks_i=[old_block_i, old_block_i, old_block_j],
161:             blocks_j=[old_block_j, old_block_i, old_block_j]
162:         )
163:         return delta_e
164: # -----------------------------------------------------------------------------
165: #  Edge‑based swap proposer
166: # -----------------------------------------------------------------------------
167: class EdgeBasedSwapProposer(NodeSwapProposer):
168:     """A Peixoto‑style *edge‑conditioned* two‑vertex swap.
169:     1. Pick a **cross‑block edge** ``(i,j)`` uniformly at random.
170:     2. Swap the block labels of its end‑points.
171:     The proposal is *symmetric* (uniform over edges), so the Metropolis–
172:     Hastings acceptance probability is simply ``min(1, exp(Δℓ/T))``.
173:     """
174:     def __init__(
175:         self,
176:         block_data,
177:         rng: np.random.Generator = np.random.default_rng(1),
178:         use_numpy: bool = True,
179:         max_trials: int = 128,
180:     ) -> None:
181:         super().__init__(block_data=block_data, rng=rng, use_numpy=use_numpy)
182:         self.max_trials = max_trials
183:         # Direct CSR pointers for O(1) edge sampling
184:         self._indptr = self.block_data.graph_data.adjacency.indptr
185:         self._indices = self.block_data.graph_data.adjacency.indices
186:     # ------------------------------------------------------------------
187:     def propose_change(
188:         self,
189:         changes: Optional[ProposedValidChanges] = None,
190:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
191:         if changes is not None:
192:             return super().propose_change(changes=changes)
193:         n = self.block_data.graph_data.num_nodes  # type: ignore[attr-defined]
194:         blocks = self.block_data.blocks
195:         for _ in range(self.max_trials):
196:             i = int(self.rng.integers(n))
197:             # get i's neighbor index-range (adj is csr format)
198:             istart, iend = self._indptr[i], self._indptr[i + 1]
199:             if iend == istart:
200:                 continue  # isolated vertex
201:             # pick a random neighbor j
202:             j = int(self.rng.choice(self._indices[istart:iend]))
203:             bi, bj = blocks[i], blocks[j]
204:             if bi == bj:
205:                 continue  # need a cross‑block edge
206:             proposed_changes: ProposedValidChanges = [(i, bj), (j, bi)]
207:             break
208:         else:  # all trials failed – fall back to uniform swap
209:             return super().propose_change(changes=None)
210:         delta_e = self._compute_delta_edge_counts(
211:             proposed_changes=proposed_changes,
212:             use_numpy=self.use_numpy,
213:         )
214:         delta_n: CombinationDelta = defaultdict(int)  # block sizes unchanged
215:         return proposed_changes, delta_e, delta_n
216: # -----------------------------------------------------------------------------
217: #  Triadic informed swap   (new implementation)
218: # -----------------------------------------------------------------------------
219: class TriadicSwapProposer(NodeSwapProposer):
220:     """A *three‑vertex* informed swap.
221:     Strategy
222:     --------
223:     1. Pick a random vertex ``i`` (block *A*).
224:     2. Choose a random neighbour ``j`` with ``block(j) = B \neq A``.
225:     3. Search in block *B* for a vertex ``l \ne j`` that has **at least one**
226:        neighbour in block *A*.
227:     4. Swap the block labels of ``i`` and ``l``.
228:     Swapping these two vertices reduces the expected number of *cross* edges by
229:     converting:
230:     * all edges from ``i`` into *B* to *internal*, and
231:     * all edges from `l``` into *A* to *internal*,
232:     while typically adding fewer new cross edges because ``i`` and ``j'`` were
233:     originally “boundary” vertices.
234:     The proposal distribution is still *symmetric* because every triad is
235:     selected with the same probability in either direction, so the usual MH
236:     acceptance rule applies.
237:     """
238:     def __init__(
239:         self,
240:         block_data,
241:         rng: np.random.Generator = np.random.default_rng(1),
242:         use_numpy: bool = False,
243:         max_trials: int = 128,
244:         candidate_trials: int = 64,
245:     ) -> None:
246:         super().__init__(block_data=block_data, rng=rng, use_numpy=use_numpy)
247:         self.max_trials = max_trials            # attempts to find (i,j)
248:         self.candidate_trials = candidate_trials  # attempts to find j′ per (i,j)
249:         self._indptr = self.block_data.graph_data.adjacency.indptr
250:         self._indices = self.block_data.graph_data.adjacency.indices
251:     # ------------------------------------------------------------------
252:     def propose_change(
253:         self,
254:         changes: Optional[ProposedValidChanges] = None,
255:     ) -> Tuple[ProposedValidChanges, EdgeDelta, CombinationDelta]:
256:         # Explicit‑changes path used in unit tests
257:         if changes is not None:
258:             return super().propose_change(changes=changes)
259:         n = self.block_data.graph_data.num_nodes  # type: ignore[attr-defined]
260:         blocks = self.block_data.blocks
261:         for _ in range(self.max_trials):
262:             # ---- step 1: pick i ------------------------------------------------
263:             i = int(self.rng.integers(n))
264:             # find i's neighbour index-range (adj is csr format)
265:             istart, iend = self._indptr[i], self._indptr[i + 1]
266:             if iend == istart:
267:                 continue  # isolated – try another
268:             # ---- step 2: pick neighbour j in a *different* block --------------
269:             neighs_i = self._indices[istart:iend]
270:             j = int(self.rng.choice(neighs_i))
271:             a, b = blocks[i], blocks[j]
272:             if a == b:
273:                 continue  # need a cross edge i‑j
274:             # ---- step 3: find j′ in block b that touches block a --------------
275:             block_b_members = self.block_data.block_members[b]
276:             # change to list and randomlize order
277:             block_b_members = list(block_b_members)
278:             self.rng.shuffle(block_b_members)
279:             for l in block_b_members[:self.candidate_trials]:
280:                 if l in (i, j):
281:                     continue
282:                 # find neighbors of l in block a
283:                 lstart, lend = self._indptr[l], self._indptr[l + 1]
284:                 l_neighbors = self._indices[lstart:lend]
285:                 l_neighbor_in_block_a = any(
286:                     blocks[neighbor] == a for neighbor in l_neighbors
287:                 )
288:                 if not l_neighbor_in_block_a:
289:                     continue  # l must touch block a
290:                 proposed_changes: ProposedValidChanges = [(i, b), (l, a)]
291:                 delta_e = self._compute_delta_edge_counts(
292:                     proposed_changes=proposed_changes,
293:                     use_numpy=self.use_numpy,
294:                 )
295:                 delta_n: CombinationDelta = defaultdict(int)
296:                 return proposed_changes, delta_e, delta_n
297:             # could not find j′ – back to outer loop
298:             continue
299:         # ---- fallback --------------------------------------------------------
300:         # If every attempt failed (e.g. almost perfect partition), fall back to
301:         # a plain uniform swap to keep the chain ergodic.
302:         return super().propose_change(changes=None)

================
File: src/sbm/model.py
================
  1: from typing import Dict, Optional
  2: import numpy as np
  3: from scipy.sparse import csr_array
  4: from sbm.block_data import BlockData
  5: from sbm.likelihood import (
  6:     LikelihoodCalculator,
  7:     LikelihoodType,
  8: )
  9: from sbm.block_change_proposers import (
 10:     NodeSwapProposer,
 11:     EdgeBasedSwapProposer,
 12:     ChangeProposerName,
 13: )
 14: from sbm.node_mover import NodeMover
 15: from sbm.mcmc import MCMCAlgorithm
 16: from sbm.io import SBMFit
 17: from sbm.utils.logger import CSVLogger
 18: class SBMModel:
 19:     def __init__(self,
 20:                 initial_blocks: BlockData,
 21:                 rng: np.random.Generator,
 22:                 likelihood_type: LikelihoodType = "bernoulli",
 23:                 log: bool = True,
 24:                 change_freq = { # probabilities of trying each move type
 25:                     "uniform_swap": 1.0,
 26:                 }
 27:         ):
 28:         self._best_block_assignment = None
 29:         self._best_block_conn = None
 30:         self.block_data = initial_blocks
 31:         self.rng = rng
 32:         self.likelihood_calculator = LikelihoodCalculator(
 33:             block_data=self.block_data,
 34:             likelihood_type=likelihood_type
 35:             )
 36:         self.move_executor = NodeMover(
 37:             block_data=self.block_data,
 38:             )
 39:         change_proposer = {
 40:             "uniform_swap": NodeSwapProposer(
 41:                         block_data=self.block_data,
 42:                         rng=self.rng,
 43:                         use_numpy=True,
 44:                     ),
 45:             "edge_based_swap": EdgeBasedSwapProposer(
 46:                         block_data=self.block_data,
 47:                         rng=self.rng,
 48:                         use_numpy=False,
 49:                     ),
 50:             "triadic_swap": EdgeBasedSwapProposer(
 51:                         block_data=self.block_data,
 52:                         rng=self.rng,
 53:                         use_numpy=True,
 54:                     ),
 55:         }
 56:         self.mcmc_algorithm = MCMCAlgorithm(
 57:             block_data = self.block_data,
 58:             likelihood_calculator = self.likelihood_calculator,
 59:             change_proposer = change_proposer, # type: ignore
 60:             change_freq = change_freq, # type: ignore
 61:             rng = self.rng,
 62:             log=log
 63:         )
 64:     def fit(self,
 65:         max_num_iterations: int,
 66:         min_block_size: int,
 67:         initial_temperature: float,
 68:         cooling_rate: float,
 69:         max_blocks: Optional[int] = None,
 70:         logger: Optional[CSVLogger] = None,
 71:         patience: Optional[int] = None,
 72:         return_ll: bool = False
 73:         ):
 74:         ll = self.mcmc_algorithm.fit(
 75:             max_num_iterations=max_num_iterations,
 76:             min_block_size=min_block_size,
 77:             initial_temperature=initial_temperature,
 78:             cooling_rate=cooling_rate,
 79:             max_blocks=max_blocks,
 80:             logger=logger,
 81:             patience=patience,
 82:         )
 83:         if return_ll:
 84:             return ll
 85:     def get_block_assignments(self, best:bool=True) -> Dict[int, int]:
 86:         if best:
 87:             return self.mcmc_algorithm._best_block_assignment
 88:         else:
 89:             return self.block_data.blocks
 90:     def to_sbmfit(self, metadata: Optional[Dict] = None, best:bool=True) -> SBMFit:
 91:         """ 
 92:         Convert the fitted SBM model to an SBMFit object for serialization. 
 93:         """
 94:         if metadata is None:
 95:             metadata = {}
 96:         if best:
 97:             blocks = self.mcmc_algorithm._best_block_assignment
 98:             block_sizes = np.unique(list(blocks.values()), return_counts=True)[1].tolist()
 99:             block_conn = self.mcmc_algorithm._best_block_conn
100:             ll = self.mcmc_algorithm.best_ll
101:         else:
102:             blocks = self.block_data.blocks
103:             block_sizes = list(self.block_data.block_sizes.values())
104:             block_conn = self.block_data.block_connectivity
105:             ll = self.mcmc_algorithm.current_ll
106:         return SBMFit(
107:             block_sizes=block_sizes,
108:             block_conn=csr_array(block_conn),
109:             directed_graph=self.block_data.graph_data.directed,
110:             neg_loglike=ll,
111:             metadata=metadata
112:         )

================
File: src/sbm/node_mover.py
================
 1: from typing import List, Tuple
 2: import scipy.sparse as sp
 3: import numpy as np
 4: from sbm.block_data import BlockData, _BlockDataUpdater
 5: from line_profiler import profile
 6: from sbm.block_change_proposers import (
 7:     ProposedValidChanges,
 8:     EdgeDelta,
 9: )
10: class NodeMover:
11:     """
12:     Class to move nodes between block assignment in the Stochastic Block Model (SBM).
13:     When performing a change, it updates the block sizes, connectivity matrix,
14:     block indices, and inverse block indices accordingly.
15:     All changes are performed in-place on the BlockData object by the _BlockDataUpdater.
16:     """
17:     def __init__(self, block_data: BlockData):
18:         self.block_data_updater = _BlockDataUpdater(block_data)
19:     def perform_change(self,
20:             proposed_changes: ProposedValidChanges,
21:             delta_e: EdgeDelta,
22:             ):
23:         """ 
24:         Change the block assignments of nodes according to the proposed change.
25:         Update:
26:         - block sizes
27:         - block connectivity matrix (edge counts between blocks)
28:         - block indices (node to block assignment)
29:         - inverse block indices (nodes in each block)
30:         Rely on increment_edge_count from BlockData to update edge counts.
31:         :param change: A list of tuples where each tuple contains a node and their new block.
32:         """
33:         (node_i, new_block_i), (node_j, new_block_j) = proposed_changes
34:         # update the block assignments, sizes, and memberships
35:         self.block_data_updater._move_node_to_block(node_i, new_block_i)
36:         self.block_data_updater._move_node_to_block(node_j, new_block_j)
37:         # update the edge counts between the blocks
38:         for (r, s), e_delta in delta_e.items():
39:             self.block_data_updater._increment_edge_count(r, s, e_delta)

================
File: src/tests/likelihood_test.py
================
  1: # tests/test_likelihood.py
  2: """
  3: End-to-end tests for the Bernoulli likelihood calculators.
  4:  * We create a tiny 4-node undirected graph with two blocks.
  5:  * We compare every Δℓ returned by the incremental code against the
  6:    ground-truth global likelihood difference.
  7: """
  8: from __future__ import annotations
  9: from collections import Counter
 10: from typing import Tuple, Dict
 11: import numpy as np
 12: #np.float_ = np.float64  # ensure float64 is used
 13: import pytest
 14: from scipy.sparse import csr_array
 15: from sbm.likelihood import (
 16:     compute_global_bernoulli_ll,
 17:     LikelihoodCalculator
 18: )
 19: from sbm.block_data import BlockData
 20: from sbm.graph_data import GraphData
 21: from sbm.block_change_proposers import NodeSwapProposer 
 22: ##############################################################################
 23: # Fixtures
 24: ##############################################################################
 25: @pytest.fixture(scope="module")
 26: def four_node_example() -> Tuple[BlockData, GraphData, Dict[int, int]]:
 27:     """
 28:     Graph:
 29:         0──1   Block 0: {0,1}      Edges: (0,1)
 30:         │  │   Block 1: {2,3}              (2,3)
 31:         2──3                              (0,2) (1,3)
 32:     The matrix is symmetrical (undirected, no loops).
 33:     """
 34:     adj = np.zeros((4, 4), dtype=int)
 35:     edges = [(0, 1), (2, 3), (0, 2), (1, 3)]
 36:     for u, v in edges:
 37:         adj[u, v] = 1
 38:         adj[v, u] = 1  # symmetric
 39:     adjacency = csr_array(adj)
 40:     blocks = {0: 0, 1: 0, 2: 1, 3: 1}  # Node to block mapping
 41:     graph_data: GraphData = GraphData(adjacency_matrix=adjacency, directed=False)
 42:     return BlockData(graph_data=graph_data, initial_blocks=blocks), graph_data, blocks
 43: ##############################################################################
 44: # Tests
 45: ##############################################################################
 46: def test_edge_counter(four_node_example):
 47:     """`_compute_edge_counts_between_node_and_blocks` returns correct counts."""
 48:     block_data, *_ = four_node_example
 49:     change_proposer = NodeSwapProposer(block_data)
 50:     counts = change_proposer._compute_edge_counts_between_node_and_blocks(node=0)
 51:     # Node 0 is linked to node-1 (block-0) and node-2 (block-1) → {0:1, 1:1}
 52:     assert counts == Counter({0: 1, 1: 1})
 53: def test_swap_same_block_zero_delta(four_node_example):
 54:     """
 55:     Swapping two nodes that are *already* in the same block must leave the
 56:     likelihood unchanged.
 57:     """
 58:     block_data, *_ = four_node_example
 59:     swap_proposer = NodeSwapProposer(block_data)
 60:     calc = LikelihoodCalculator(block_data)
 61:     # attempt to swap nodes 0 and 2
 62:     swap = [(0, block_data.blocks[1]), (1, block_data.blocks[0])]
 63:     swap, delta_e, delta_n = swap_proposer.propose_change(swap)
 64:     delta = calc.compute_delta_ll(delta_e=delta_e, delta_n=delta_n)
 65:     assert delta == pytest.approx(0.0, abs=1e-6)
 66: def test_delta_ll_matches_global_recompute(four_node_example):
 67:     """
 68:     delta ll from the incremental calculator must equal the brute-force recomputed
 69:     likelihood difference after the swap (0 ↔ 2).
 70:     """
 71:     block_data_old, graph_data, blocks_old = four_node_example
 72:     adjacency = graph_data.adjacency
 73:     swap_proposer = NodeSwapProposer(block_data_old)
 74:     calc = LikelihoodCalculator(block_data_old)
 75:     # ---------- perform swap 0 ↔ 2 -----------------------------------------
 76:     blocks_new = blocks_old.copy()
 77:     blocks_new[0], blocks_new[2] = blocks_new[2], blocks_new[0]
 78:     block_data_new = BlockData(
 79:         graph_data=GraphData(adjacency_matrix=adjacency, directed=False),
 80:         initial_blocks=blocks_new
 81:     )
 82:     ll_old = compute_global_bernoulli_ll(block_data_old)
 83:     ll_new = compute_global_bernoulli_ll(block_data_new)
 84:     expected_delta = ll_new - ll_old
 85:     swap = [(0, block_data_old.blocks[2]), (2, block_data_old.blocks[0])]
 86:     swap, delta_e, delta_n = swap_proposer.propose_change(swap)
 87:     delta_calc = calc.compute_delta_ll(delta_e=delta_e, delta_n=delta_n)
 88:     msg = (
 89:         f"Failed on swap (0 ↔ 2) with blocks {blocks_old} → {blocks_new}\n"
 90:         f"delta_e: {delta_e}\n"
 91:     )
 92:     assert delta_calc == pytest.approx(expected_delta, rel=1e-6, abs=1e-6), msg
 93: def test_delta_edge_counts_consistency(four_node_example):
 94:     """
 95:     The raw `delta_e` returned by `_compute_delta_edge_counts_swap` should turn
 96:     the old connectivity into the new one *exactly* on every affected (r,s).
 97:     """
 98:     block_data_old, graph_data, blocks_old = four_node_example
 99:     adjacency = graph_data.adjacency
100:     swap_proposer = NodeSwapProposer(block_data_old)
101:     calc = LikelihoodCalculator(block_data_old)
102:     i, j = 0, 2  # the same swap as above
103:     proposed_changes = [(i, block_data_old.blocks[j]), (j, block_data_old.blocks[i])]
104:     delta_e = swap_proposer._compute_delta_edge_counts(
105:         proposed_changes= proposed_changes
106:     )
107:     conn_expected = block_data_old.block_connectivity.copy()
108:     for (r, s), de in delta_e.items():
109:         conn_expected[r, s] += de
110:     # Ground-truth connectivity after the swap
111:     blocks_new = blocks_old.copy()
112:     blocks_new[i], blocks_new[j] = blocks_new[j], blocks_new[i]
113:     block_data_new = BlockData(
114:         graph_data=GraphData(adjacency_matrix=adjacency, directed=False),
115:         initial_blocks=blocks_new
116:     )
117:     for (r, s), de in delta_e.items():
118:         assert (
119:             conn_expected[r, s] == block_data_new.block_connectivity[r, s]
120:         ), f"Mismatch on block pair ({r},{s})"
121: ###################################################
122: ### Randomized tests
123: ###################################################
124: def _er_graph_csr(n: int, p: float, *, seed: int) -> csr_array:
125:     """Undirected G(n,p) without self-loops, returned as CSR matrix."""
126:     rng = np.random.default_rng(seed)
127:     upper = rng.random((n, n)) < p                           # boolean mask
128:     upper = np.triu(upper, k=1)                              # keep strict upper
129:     adj = upper | upper.T                                    # symmetrise
130:     return csr_array(adj.astype(np.int8))
131: def _random_equal_blocks(n: int, block_size: int, *, seed: int) -> dict[int, int]:
132:     """Random permutation of vertices into equal-size blocks."""
133:     rng = np.random.default_rng(seed)
134:     perm = rng.permutation(n)
135:     blocks: dict[int, int] = {}
136:     for b in range(n // block_size):
137:         for v in perm[b * block_size : (b + 1) * block_size]:
138:             blocks[v] = b
139:     return blocks
140: def _pick_two_different_blocks(rng: np.random.Generator, blocks: dict[int, int]):
141:     n = len(blocks)
142:     i = rng.choice(n, size=1)[0]
143:     j = rng.choice(n-1, size=1)[0]
144:     if j >= i:
145:         j += 1
146:     return i, j
147: def _single_swap_calc_vs_bruteforce(
148:     graph_data: GraphData,
149:     blocks: dict[int, int],
150:     rng: np.random.Generator,
151:     tol: float = 1e-6,
152:     experiment_index: int = 0
153: ):
154:     """One random swap and check incremental delta ll against brute force."""
155:     # choose vertices in different blocks
156:     i, j = _pick_two_different_blocks(rng, blocks)
157:     # incremental path -------------------------------------------------
158:     block_data = BlockData(graph_data=graph_data, initial_blocks=blocks)
159:     print(block_data.blocks)
160:     swap_proposer = NodeSwapProposer(block_data)
161:     calc = LikelihoodCalculator(block_data)
162:     swap_instr = [(i, blocks[j]), (j, blocks[i])]
163:     _, delta_e, delta_n = swap_proposer.propose_change(swap_instr)
164:     delta_ll = calc.compute_delta_ll(delta_e=delta_e, delta_n=delta_n)
165:     # brute-force path -------------------------------------------------
166:     ll_before = compute_global_bernoulli_ll(block_data)
167:     new_blocks = blocks.copy()
168:     new_blocks[i], new_blocks[j] = new_blocks[j], new_blocks[i]
169:     block_data_after = BlockData(graph_data=graph_data, initial_blocks=new_blocks)
170:     ll_after = compute_global_bernoulli_ll(block_data_after)
171:     delta_brute = ll_after - ll_before
172:     # compute the delta_e in the brute-force way
173:     # only storing non-zero deltas in upper triangular matrix
174:     delta_e_brute = block_data_after.block_connectivity - block_data.block_connectivity
175:     delta_e_brute = {
176:         (r, s): de for (r, s), de in zip(
177:             np.argwhere(delta_e_brute != 0),
178:             delta_e_brute[delta_e_brute != 0]
179:         )
180:         if r <= s
181:     }
182:     # comparison and print informatino in case of failure
183:     msg = (
184:         f"Failed on experiment {experiment_index}"
185:         f"\nGraph: {graph_data.adjacency.toarray()}"
186:         f"\nBlocks: {blocks}"
187:         f"\nswap:         {i} <-> {j} (blocks {blocks[i]} <-> {blocks[j]})"
188:         f"\ndelta_e:   {delta_e}"
189:         f"\ndelta_e_brute:   {delta_e_brute}"
190:         f"\ndelta_inc:    {delta_ll:.12g}"
191:         f"\ndelta_brute:  {delta_brute:.12g}"
192:     )
193:     assert delta_ll == pytest.approx(delta_brute, rel=tol, abs=tol), msg
194: def test_delta_ll_random_swaps_er():
195:     """100 random swaps on independent ER-20 graph must all match brute force delta ll."""
196:     for index in range(100):
197:         n, p, b = 20, 0.1, 2
198:         rng = np.random.default_rng(1)
199:         adj = _er_graph_csr(n, p, seed=42)
200:         graph = GraphData(adjacency_matrix=adj, directed=False)
201:         blocks = _random_equal_blocks(n, block_size=b, seed=2)
202:         _single_swap_calc_vs_bruteforce(graph_data=graph,
203:                                         blocks=blocks,
204:                                         rng=rng,
205:                                         experiment_index=index,
206:                                         tol=1e-6
207:                                         )

================
File: src/tests/test_change_proposer_and_mover.py
================
  1: # src/tests/test_change_proposers_and_mover.py
  2: """
  3: Unit-tests for
  4:   • sbm.block_change_proposers           (helper + NodeSwapProposer)
  5:   • sbm.node_mover                      (NodeMover)
  6: All graphs are 4 undirected vertices:
  7:     0──1   block 0 = {0,1}
  8:     │  │
  9:     2──3   block 1 = {2,3}
 10: Edges: (0,1) (2,3)  plus two cross edges (0,2) (1,3).
 11: """
 12: from __future__ import annotations
 13: from collections import defaultdict
 14: from typing import Dict, Tuple
 15: import numpy as np
 16: from numpy.typing import ArrayLike
 17: import pytest
 18: from scipy.sparse import csr_array
 19: from sbm.graph_data import GraphData
 20: from sbm.block_data import BlockData
 21: from sbm.block_change_proposers import (
 22:     NodeSwapProposer,
 23:     ProposedValidChanges,
 24:     EdgeBasedSwapProposer,
 25:     TriadicSwapProposer,
 26: )
 27: from sbm.edge_delta import EdgeDelta
 28: from sbm.node_mover import NodeMover
 29: ###############################################################################
 30: # helpers
 31: ###############################################################################
 32: def _toy_graph() -> Tuple[csr_array, Dict[int, int]]:
 33:     """Return 4×4 adjacency and initial {node: block} mapping."""
 34:     adj = np.zeros((4, 4), dtype=int)
 35:     edges = [(0, 1), (2, 3), (0, 2), (1, 3)]
 36:     for u, v in edges:
 37:         adj[u, v] = adj[v, u] = 1
 38:     blocks = {0: 0, 1: 0, 2: 1, 3: 1}
 39:     return csr_array(adj), blocks
 40: def _brute_block_connectivity(adj: csr_array, blocks: Dict[int, int]) -> Dict[Tuple[int, int], int]:
 41:     """Return upper-triangle edge counts between blocks."""
 42:     rows, cols = adj.nonzero() # type: ignore
 43:     bc = defaultdict(int)
 44:     for u, v in zip(rows, cols, strict=False):
 45:         if u >= v:  # count each undirected edge once
 46:             continue
 47:         a, b = blocks[u], blocks[v]
 48:         r, s = (a, b) if a <= b else (b, a)
 49:         bc[(r, s)] += 1
 50:     return bc
 51: ###############################################################################
 52: # tests for _increment_delta_e
 53: ###############################################################################
 54: def test_increment_delta_e_uses_sorted_key() -> None:
 55:     e_delta = EdgeDelta(n_blocks=4)
 56:     e_delta.increment(
 57:         counts=[1],
 58:         blocks_i=[3],
 59:         blocks_j=[1],
 60:     )          # block_i > block_j → key (1,3)
 61:     assert ((1, 3), 1) in e_delta.items() and ((3, 1), 1) not in e_delta.items(), \
 62:         f"Key mismatch: delta keys = {list(e_delta.items())}"
 63: def test_increment_delta_e_overwrites_existing() -> None:
 64:     e_delta = EdgeDelta(n_blocks=4)
 65:     e_delta.increment(
 66:         counts = [1],
 67:         blocks_i = [0],
 68:         blocks_j = [2],
 69:     )          # set to 1
 70:     e_delta.increment(
 71:         counts = [3],
 72:         blocks_i = [2],
 73:         blocks_j = [0]
 74:     )          # overwrite same pair
 75:     assert e_delta[(0, 2)] == 3, \
 76:         f"Value not overwritten, got {e_delta[(0, 2)]}, expected 3"
 77: ###############################################################################
 78: # tests for NodeSwapProposer
 79: ###############################################################################
 80: @pytest.fixture(scope="module")
 81: def proposer() -> NodeSwapProposer:
 82:     adj, blocks = _toy_graph()
 83:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
 84:     return NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
 85: def test_compute_delta_edge_counts_matches_brute(proposer: NodeSwapProposer) -> None:
 86:     # swap vertices 0 (block 0) and 2 (block 1)
 87:     changes: ProposedValidChanges = [(0, 1), (2, 0)]
 88:     delta = proposer._compute_delta_edge_counts(changes)          # type: ignore
 89:     before = _brute_block_connectivity(
 90:         proposer.block_data.graph_data.adjacency,
 91:         proposer.block_data.blocks
 92:     )
 93:     # build new blocks mapping
 94:     new_blocks = proposer.block_data.blocks.copy()
 95:     new_blocks[0], new_blocks[2] = new_blocks[2], new_blocks[0]
 96:     after = _brute_block_connectivity(proposer.block_data.graph_data.adjacency,
 97:                                       new_blocks)
 98:     brute_delta = {k: after.get(k, 0) - before.get(k, 0) for k in set(after) | set(before)}
 99:     delta_dict = dict(delta.items())
100:     assert delta_dict == brute_delta, \
101:         f"\nexpected {brute_delta}\ngot      {delta_dict}"
102: def test_propose_change_returns_expected_structure(proposer: NodeSwapProposer) -> None:
103:     changes = [(0, 1), (2, 0)]
104:     new_changes, delta_e, delta_n = proposer.propose_change(changes=changes)
105:     assert new_changes == changes, "proposer changed explicit instruction"
106:     assert all(isinstance(k, tuple) and len(k) == 2 for k in delta_e.items()), "delta_e keys malformed"
107:     # check that all kays of delta_e are accesible in delta_n (not necessarily non-zero)
108:     for (i, j), _ in delta_e.items():
109:         try:
110:             _ = delta_n[(i, j)]
111:         except KeyError:
112:             pytest.fail(f"delta_n missing key ({i}, {j}) from delta_e: {delta_e.items()}")
113: ###############################################################################
114: # tests for NodeMover
115: ###############################################################################
116: def test_node_mover_updates_blocks_and_sizes() -> None:
117:     adj, blocks = _toy_graph()
118:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
119:     mover = NodeMover(bd)
120:     changes = [(0, 1), (2, 0)]
121:     # reuse proposer to get correct delta_e
122:     prop = NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
123:     delta_e = prop._compute_delta_edge_counts(changes)            # type: ignore
124:     mover.perform_change(changes, delta_e)
125:     assert bd.blocks[0] == 1 and bd.blocks[2] == 0, \
126:         f"blocks not swapped: {bd.blocks}"
127:     assert bd.block_sizes[0] == 2 and bd.block_sizes[1] == 2, \
128:         f"block_sizes wrong: {bd.block_sizes}"
129: def test_node_mover_updates_connectivity() -> None:
130:     adj, blocks = _toy_graph()
131:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
132:     mover = NodeMover(bd)
133:     before = bd.block_connectivity.copy()
134:     changes = [(0, 1), (2, 0)]
135:     prop = NodeSwapProposer(block_data=bd, rng=np.random.default_rng(0))
136:     delta_e = prop._compute_delta_edge_counts(changes)            # type: ignore
137:     mover.perform_change(changes, delta_e)
138:     # brute recompute
139:     after_brute = _brute_block_connectivity(bd.graph_data.adjacency, bd.blocks)
140:     # connectivity matrix stores both triangles → pick upper
141:     after_matrix = {(r, s): int(bd.block_connectivity[r, s]) #type: ignore
142:                     for r, s in after_brute}
143:     msg = (f"\nexpected connectivity {after_brute}"
144:            f"\nobserved  connectivity {after_matrix}"
145:            f"\ndelta_e applied        {delta_e}")
146:     assert after_matrix == after_brute, msg
147: # ---------------------------------------------------------------------------
148: # helpers – minimal block‑edge accounting for validation
149: # ---------------------------------------------------------------------------
150: def _block_edge_matrix(adj: csr_array, blocks: np.ndarray, n_blocks: int) -> np.ndarray:
151:     """Return an n_blocks×n_blocks symmetric matrix with edge counts."""
152:     mat = np.zeros((n_blocks, n_blocks), dtype=int)
153:     rows, cols = adj.nonzero()
154:     for u, v in zip(rows, cols):
155:         if u >= v:  # undirected ⇒ count each unordered pair once
156:             continue
157:         bu, bv = blocks[u], blocks[v]
158:         mat[bu, bv] += 1
159:         if bu != bv:
160:             mat[bv, bu] += 1
161:     return mat
162: def _apply_changes(blocks: np.ndarray, changes):
163:     new_blocks = blocks.copy()
164:     for node, tgt in changes:
165:         new_blocks[node] = tgt
166:     return new_blocks
167: def _assert_delta_matches(delta_e, before, after):
168:     """Check that EdgeDelta equals after–before for every block pair."""
169:     n_blocks = before.shape[0]
170:     for r in range(n_blocks):
171:         for s in range(n_blocks):
172:             assert delta_e[r, s] == after[r, s] - before[r, s]
173: # ---------------------------------------------------------------------------
174: # fixtures
175: # ---------------------------------------------------------------------------
176: @pytest.fixture(scope="module")
177: def toy_block_data():
178:     """Simple 6‑node, 2‑block undirected graph with both intra‑ and cross‑edges."""
179:     edges = [
180:         (0, 1), (1, 2), (0, 2),  # block 0 internal triangle
181:         (3, 4), (4, 5), (3, 5),  # block 1 internal triangle
182:         (0, 3), (1, 4), (2, 5),  # three cross edges
183:     ]
184:     n = 6
185:     rows, cols = [], []
186:     for u, v in edges:
187:         rows += [u, v]
188:         cols += [v, u]
189:     data = np.ones(len(rows), dtype=int)
190:     adj = csr_array((data, (rows, cols)), shape=(n, n))
191:     blocks = {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1}  # type: ignore[assignment]
192:     bd = BlockData(initial_blocks=blocks, graph_data=GraphData(adj, directed=False))
193:     return bd
194: # ---------------------------------------------------------------------------
195: # tests – EdgeBasedSwapProposer
196: # ---------------------------------------------------------------------------
197: def test_edge_based_swap_valid_move(toy_block_data):
198:     rng = np.random.default_rng(42)
199:     prop = EdgeBasedSwapProposer(toy_block_data, rng=rng)
200:     changes, delta_e, _ = prop.propose_change()
201:     # exactly two tuples returned
202:     assert len(changes) == 2
203:     (i, tgt_i), (j, tgt_j) = changes
204:     blocks = toy_block_data.blocks
205:     # originally different blocks and connected by an edge
206:     assert blocks[i] != blocks[j]
207:     assert toy_block_data.graph_data.adjacency[i, j] == 1  # type: ignore[index]
208:     # swap  semantics: targets are the partner's old blocks
209:     assert tgt_i == blocks[j]
210:     assert tgt_j == blocks[i]
211:     # edge‑delta correctness --------------------------------------------------
212:     before = _block_edge_matrix(toy_block_data.graph_data.adjacency, blocks,  # type: ignore[attr-defined]
213:                                 n_blocks=2)
214:     after_blocks = _apply_changes(blocks, changes)
215:     after = _block_edge_matrix(toy_block_data.graph_data.adjacency, after_blocks, 2)
216:     _assert_delta_matches(delta_e, before, after)
217: # ---------------------------------------------------------------------------
218: # tests – TriadicSwapProposer
219: # ---------------------------------------------------------------------------
220: def test_triadic_swap_valid_move(toy_block_data):
221:     rng = np.random.default_rng(7)
222:     prop = TriadicSwapProposer(toy_block_data, rng=rng, candidate_trials=20)
223:     changes, delta_e, _ = prop.propose_change()
224:     # two tuples returned
225:     assert len(changes) == 2
226:     (i, tgt_i), (l, tgt_l) = changes
227:     blocks = toy_block_data.blocks
228:     # i moves to l's block and vice‑versa
229:     assert tgt_i == blocks[l]
230:     assert tgt_l == blocks[i]
231:     # block sizes preserved ---------------------------------------------------
232:     block_sizes = toy_block_data.block_sizes
233:     after_blocks = _apply_changes(blocks, changes)
234:     new_block_sizes = {
235:         b: sum(1 for v in after_blocks.values() if v == b)
236:         for b in set(after_blocks.values())
237:     }
238:     for block, size in new_block_sizes.items():
239:         assert size == block_sizes[block], \
240:             f"Block {block} size changed: expected {block_sizes[block]}, got {size}"
241:     # delta‑edge correctness --------------------------------------------------
242:     before = _block_edge_matrix(toy_block_data.graph_data.adjacency, blocks, 2)  # type: ignore[attr-defined]
243:     after = _block_edge_matrix(toy_block_data.graph_data.adjacency, after_blocks, 2)
244:     _assert_delta_matches(delta_e, before, after)

================
File: src/tests/test_metrics.py
================
 1: import numpy as np, scipy.sparse as sp
 2: from scipy.sparse import csr_array
 3: from metrics import (
 4:     shortest_path_distance,
 5:     degree_distance,
 6:     clustering_distance
 7: )
 8: ### Helper functions to create graphs
 9: def _line_graph(n=6) -> csr_array:
10:     rows = np.arange(n-1); cols = rows + 1
11:     A = sp.coo_matrix((np.ones(n-1), (rows, cols)), shape=(n, n))
12:     A = A + A.T
13:     A = csr_array(A, dtype=np.int8)
14:     return A
15: def _er_graph(n: int=10, p: float=0.1, *, seed: int=1) -> csr_array:
16:     """Undirected G(n,p) without self-loops, returned as CSR matrix."""
17:     rng = np.random.default_rng(seed)
18:     upper = rng.random((n, n)) < p                           # boolean mask
19:     upper = np.triu(upper, k=1)                              # keep strict upper
20:     adj = upper | upper.T                                    # symmetrise
21:     return csr_array(adj.astype(np.int8))
22: #### test functions
23: def test_shortest_path_identical_line():
24:     A = _line_graph()
25:     print(A.toarray())
26:     assert shortest_path_distance(A, A, n_samples=None) == 0.0
27: def test_degree_identical_line():
28:     A = _line_graph()
29:     assert degree_distance(A, A) == 0.0
30: def test_clustering_identical_line():
31:     A = _line_graph()
32:     assert clustering_distance(A, A) == 0.0
33: def test_shortest_path_different_line():
34:     A = _line_graph(n=20)
35:     B = _line_graph(n=200)
36:     assert shortest_path_distance(A, B, n_samples=100) != 0.0
37: def test_degree_different_line():
38:     A = _line_graph(n=20)
39:     A = _line_graph(n=200)
40:     assert degree_distance(A, A) == 0.0
41: def test_clustering_identical_er():
42:     A = _er_graph(n=100)
43:     assert clustering_distance(A, A) == 0.0
44: def test_shortest_path_identical_er():
45:     A = _er_graph(p=0.9)
46:     assert shortest_path_distance(A, A, n_samples=None) == 0.0
47: def test_shortest_path_different_er():
48:     A = _er_graph(n=20, p=0.9)
49:     B = _er_graph(n=200, p=0.1)
50:     assert shortest_path_distance(A, B, n_samples=100) != 0.0
51: def test_degree_different_er():
52:     A = _er_graph()
53:     assert degree_distance(A, A) == 0.0
54: def test_clustering_different_er():
55:     A = _er_graph()
56:     assert clustering_distance(A, A) == 0.0

================
File: .gitignore
================
 1: # --------------------------------------------------------------------
 2: #  Python byte-code / build artefacts
 3: # --------------------------------------------------------------------
 4: __pycache__/
 5: *.py[cod]
 6: *.pyo
 7: *.so
 8: *.dylib
 9: *.egg-info/
10: build/
11: dist/
12: 
13: # --------------------------------------------------------------------
14: #  Virtual-envs
15: # --------------------------------------------------------------------
16: .venv/
17: .env/
18: .mamba/
19: *.conda_env/
20: 
21: # --------------------------------------------------------------------
22: #  Data & model artefacts  (generated by pipeline)
23: # --------------------------------------------------------------------
24: data/
25: models/
26: logs/
27: reports/
28: figures/
29: results/
30: 
31: # --------------------------------------------------------------------
32: #  Large numpy / scipy files anywhere but src/tests
33: # --------------------------------------------------------------------
34: *.npz
35: *.npy
36: *.pkl
37: *.h5
38: *.parquet
39: 
40: # --------------------------------------------------------------------
41: #  Jupyter checkpoints
42: # --------------------------------------------------------------------
43: .ipynb_checkpoints/
44: 
45: # --------------------------------------------------------------------
46: #  IDE / OS metadata
47: # --------------------------------------------------------------------
48: .idea/
49: .vscode/
50: *.swp
51: .DS_Store
52: Thumbs.db
53: 
54: # --------------------------------------------------------------------
55: #  Misc
56: # --------------------------------------------------------------------
57: *.bak
58: *.tmp
59: repomix-output.txt
60: *.lprof

================
File: configs/surrogate_eval.yml
================
1: # ---------------------------------------------------------------
2: n_surrogates: 20 # graphs to sample per dataset
3: overwrite: true # set true to ignore cached results
4: # which similarity metrics to compute
5: metrics:
6:   - shortest_path
7:   - degree
8:   - clustering

================
File: src/pipelines/fit_sbm.py
================
 1: # src/pipelines/fit_sbm.py
 2: import yaml
 3: import argparse
 4: from pathlib import Path
 5: from itertools import product
 6: from line_profiler import profile
 7: from time import time
 8: import numpy as np
 9: from tqdm import tqdm
10: from sbm.io import GraphLoader, SBMWriter
11: from sbm.block_assigner import AssignerConstructor
12: from sbm.model import SBMModel
13: from sbm.utils.logger import CSVLogger
14: from sbm.utils.pipeline_utils import (
15:     sbmfit_folderpath,
16:     FitConfig,
17: )
18: @profile
19: def main(fit_config: str): # type: ignore
20:     fit_config: FitConfig = yaml.safe_load(Path(fit_config).read_text())
21:     logging_config = fit_config["logging"][0] # type: ignore
22:     data_config = fit_config["datasets"] # type: ignore
23:     seed = fit_config['seed']
24:     rng = np.random.default_rng(seed)
25:     config_pairs = product(
26:         fit_config['sbm'], # type: ignore
27:         fit_config['datasets'], # type: ignore
28:     )
29:     iterator = tqdm(
30:         config_pairs,
31:         desc="Fitting SBM models",
32:         total=len(fit_config['sbm']) * len(fit_config['datasets'])
33:     )
34:     for sbm_config, ds in iterator:
35:         # prepare SBM model
36:         g = GraphLoader.load(
37:             Path(ds["path"]),
38:             force_undirected=bool(sbm_config["force_undirected"]), # type: ignore
39:             )
40:         assigner_const = AssignerConstructor(rng=rng)
41:         assigner = assigner_const.create_assigner(
42:             graph_data=g,
43:             min_block_size=int(sbm_config["min_block_size"]), # type: ignore
44:             init_method=sbm_config["init_method"], # type: ignore
45:             )
46:         block_data = assigner.compute_assignment()
47:         # check block sizes
48:         model = SBMModel(
49:             initial_blocks=block_data,
50:             rng=rng)
51:         # fit SBM model
52:         name = ds["name"] + "_".join(
53:             f"{k}_{v}" for k, v in sbm_config.items() # type: ignore
54:         )
55:         log_path = Path(logging_config['logging_folder']) / f"{name}.csv"
56:         tic = time()
57:         with CSVLogger(log_path, log_every=logging_config['log_every']) as logger:
58:             model.fit(
59:                 max_num_iterations=sbm_config["max_n_iter"], # type: ignore
60:                 min_block_size=sbm_config["min_block_size"], # type: ignore
61:                 initial_temperature=sbm_config["temperature"], # type: ignore
62:                 cooling_rate=sbm_config["cooling_rate"], # type: ignore
63:                 logger=logger,
64:                 patience=sbm_config.get("patience", None), # type: ignore
65:             )
66:         # save the fitted model
67:         fit = model.to_sbmfit()
68:         toc = time()
69:         print(f"Fitting {ds['name']} took {toc - tic:.2f} seconds")
70:         tic = time()
71:         fit_configs = sbm_config.copy() # type: ignore
72:         out_dir = sbmfit_folderpath(
73:             base_dir=Path("results/sbm_fits"),
74:             sbm_config=fit_configs,
75:             data_spec=ds, 
76:         )
77:         print(f'Out directory: {out_dir}')
78:         out_dir.mkdir(parents=True, exist_ok=True)
79:         SBMWriter.save(out_dir, fit)
80:         toc = time()
81:         print(f"Saving {ds['name']} took {toc - tic:.2f} seconds, nll = {fit.neg_loglike:.2f}")
82: if __name__ == "__main__":
83:     p = argparse.ArgumentParser()
84:     p.add_argument("--fit_config", type=str, help="Path to the configuration file.")
85:     args = p.parse_args()
86:     main(fit_config=args.fit_config)

================
File: src/sbm/block_assigner.py
================
  1: """ 
  2:     Functions and classes for computing initial block assignment 
  3:     used in the Stochastic Block Model (SBM). These are later updated
  4:     using the MCMC algorithm.
  5: """
  6: from __future__ import annotations
  7: from typing import List, Dict, Optional, Tuple, Iterable, TypeAlias, Set
  8: from collections import defaultdict, Counter
  9: from time import time
 10: import metis
 11: import scipy.sparse as sp
 12: from scipy.sparse import csr_array
 13: import numpy as np
 14: from k_means_constrained import KMeansConstrained
 15: from nodevectors import ProNE
 16: from sbm.block_data import BlockData
 17: from sbm.graph_data import GraphData
 18: from sbm.utils.pipeline_utils import InitMethodName
 19: from ortools.sat.python import cp_model  # type: ignore
 20: # ---------------------------------------------------------------------------
 21: #  helper ---------------------------------------------------------------
 22: # ---------------------------------------------------------------------------
 23: def _block_sizes(blocks: Dict[int, int]) -> Dict[int, int]:
 24:     sizes = defaultdict(int)
 25:     for b in blocks.values():
 26:         sizes[b] += 1
 27:     return sizes
 28: def _boundary_vertices(block: int, members: Set[int], blocks: Dict[int, int],
 29:                        indptr: np.ndarray, indices: np.ndarray) -> List[int]:
 30:     """Return vertices in *block* that touch at least one different block."""
 31:     out = []
 32:     for v in members:
 33:         row = slice(indptr[v], indptr[v + 1])
 34:         if any(blocks[u] != block for u in indices[row]):
 35:             out.append(v)
 36:     return out
 37: def _movable_vertex(src: int, dst_set: Set[int], *, rng: np.random.Generator,
 38:                     blocks: Dict[int, int], members: Dict[int, Set[int]],
 39:                     indptr: np.ndarray, indices: np.ndarray) -> Tuple[int, int] | None:
 40:     """Pick (vertex, dst) with vertex in *src* boundary and dst in dst_set."""
 41:     boundary = _boundary_vertices(src, members[src], blocks, indptr, indices)
 42:     rng.shuffle(boundary)
 43:     for v in boundary:
 44:         row = slice(indptr[v], indptr[v + 1])
 45:         neigh_blks = {blocks[u] for u in indices[row] if blocks[u] in dst_set}
 46:         if neigh_blks:
 47:             return v, rng.choice(list(neigh_blks))
 48:     return None
 49: def _move(v: int, src: int, dst: int, *, blocks: Dict[int, int],
 50:           members: Dict[int, Set[int]], sizes: Counter
 51:     ):
 52:     """Execute the move and update bookkeeping structures."""
 53:     blocks[v] = dst
 54:     members[src].remove(v)
 55:     members[dst].add(v)
 56:     sizes[src] -= 1
 57:     sizes[dst] += 1
 58:     if sizes[src] == 0:
 59:         # remove empty block
 60:         del members[src]
 61:         del sizes[src]
 62:         del blocks[v]
 63: def move_node_to_under(
 64:         under: Set[int], # blocks of size < k
 65:         over1: Set[int], # blocks of size k+1
 66:         over2: Set[int], # blocks of size > k+1
 67:         rng: np.random.Generator,
 68:         sizes: Counter[int],
 69:         k: int,
 70:         members: Dict[int, Set[int]],
 71:         blocks: Dict[int, int],
 72:         indptr: np.ndarray,
 73:         indices: np.ndarray
 74:     ) -> None:
 75:     """ 
 76:     Move a node from an oversize block to an undersize block.
 77:     """
 78:     if len(under) == 0:
 79:         # no undersize blocks available, skip
 80:         return
 81:     donors = list(over2 | over1) or list(b for b, s in sizes.items() if s > k)
 82:     rng.shuffle(donors)
 83:     moved = False
 84:     if len(under) > 0:
 85:         for b_src in donors:
 86:             mv = _movable_vertex(b_src, under, rng=rng, blocks=blocks,
 87:                                     members=members, indptr=indptr, indices=indices)
 88:             if mv is not None:
 89:                 v, b_dst = mv
 90:                 _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
 91:                 moved = True
 92:                 return
 93:     # If we reach here no boundary move could be found. Relax: pick random.
 94:     if len(donors) == 0:
 95:         # no oversize blocks available, pick random from all
 96:         donors = list(blocks.keys())
 97:     b_src = rng.choice(donors)
 98:     if len(members[b_src]) == 0:
 99:         # no members in the source block, skip
100:         return
101:     v = rng.choice(list(members[b_src]))
102:     b_dst = rng.choice(tuple(under))
103:     _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
104:     return
105: def move_node_from_over(
106:     under: Set[int], # blocks of size < k
107:     over1: Set[int], # blocks of size k+1
108:     over2: Set[int], # blocks of size > k+1
109:     rng: np.random.Generator,
110:     sizes: Counter[int],
111:     k: int,
112:     members: Dict[int, Set[int]],
113:     blocks: Dict[int, int],
114:     indptr: np.ndarray,
115:     indices: np.ndarray,
116:     r_target: int,
117: ) -> None:
118:     """ 
119:         Nodes are moved from block with size > k to block with size either
120:         < k or <=k if there are fewer than r_target blocks with size k+1.
121:     """
122:     if len(over2) == 0:
123:         # no oversize blocks available, skip
124:         return
125:     b_src = rng.choice(tuple(over2))
126:     dests = under.copy()
127:     if len(over1) > r_target:
128:         dests |= {b for b, s in sizes.items() if s == k}
129:     if not dests:
130:         # no eligible destination respecting k‑lower‑bound → skip
131:         return
132:     mv = _movable_vertex(b_src, dests, rng=rng, blocks=blocks,
133:                             members=members, indptr=indptr, indices=indices)
134:     if mv is None:
135:         v = rng.choice(_boundary_vertices(b_src, members[b_src], blocks, indptr, indices))
136:         b_dst = rng.choice(tuple(dests))
137:     else:
138:         v, b_dst = mv
139:     _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
140:     return
141: def balance_k_plus_1_blocks(
142:     over1: Set[int], # blocks of size k+1
143:     over2: Set[int], # blocks of size >k+1
144:     rng: np.random.Generator,
145:     sizes: Counter[int],
146:     k: int,
147:     members: Dict[int, Set[int]],
148:     blocks: Dict[int, int],
149:     indptr: np.ndarray,
150:     indices: np.ndarray,
151:     r_target: int,
152: ) -> None:
153:     """ 
154:     Balance the number of blocks with size k+1.
155:     If there are too many blocks with size k+1, shrink one of them
156:     by moving a vertex to a block with size k or smaller.
157:     If there are too few blocks with size k+1, enlarge one of the blocks
158:     with size k by moving a vertex from a block with size larger than k+1
159:     or smaller than k+1
160:     """
161:     if len(over1) == r_target:
162:         # already balanced, nothing to do
163:         return
164:     elif len(over1) > r_target: # need fewer k+1 blocks
165:         # shrink a k+1 block
166:         b_src = rng.choice(tuple(over1))
167:         dests = {b for b, s in sizes.items() if s <= k}
168:     else:  # need more k+1 blocks
169:         # enlarge a k block
170:         #dests = set()
171:         b_src = rng.choice(tuple(over2))
172:         dests = {b for b, s in sizes.items() if s == k}
173:     if len(dests) == 0:
174:         # no eligible destination respecting k‑upper‑bound → skip
175:         return
176:     # shrink case
177:     mv = None
178:     for b_dst in dests:
179:         mv = _movable_vertex(b_src, {b_dst}, rng=rng, blocks=blocks,
180:                                 members=members, indptr=indptr, indices=indices)
181:         if mv is not None:
182:             v, _ = mv
183:             _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
184:             return
185:     return
186: def categorize(
187:     sizes: Dict[int, int],
188:     k: int,
189: ) -> Tuple[Set[int], Set[int], Set[int]]:
190:     """Return (oversize>k+1, oversize==k+1, undersize<k)."""
191:     over2 = {b for b, s in sizes.items() if s > k + 1}
192:     over1 = {b for b, s in sizes.items() if s == k + 1}
193:     under = {b for b, s in sizes.items() if s < k}
194:     return over2, over1, under
195: # ---------------------------------------------------------------------------
196: # Improved greedy balancer (split into helpers)
197: # ---------------------------------------------------------------------------
198: def _rebalance_to_min_size(
199:     blocks: Dict[int, int],
200:     adjacency: csr_array,
201:     k: int,
202:     rng: np.random.Generator | None = None,
203:     max_iter: int | None = None,
204: ) -> Dict[int, int]:
205:     """Greedy boundary‑only balancing.
206:     Guarantees **no block ends smaller than *k***; tries to respect the stricter
207:     goal (sizes ∈ {k,k+1} & exactly *r* oversized) but will *sacrifice* that goal
208:     rather than leave an undersized block.
209:     """
210:     if rng is None:
211:         rng = np.random.default_rng(1)
212:     n = adjacency.shape[0]
213:     indptr, indices = adjacency.indptr, adjacency.indices
214:     sizes: Counter[int] = Counter(blocks.values())
215:     members: Dict[int, Set[int]] = defaultdict(set)
216:     for v, b in blocks.items():
217:         members[b].add(v)
218:     B = len(sizes)
219:     r_target = n - k * B  # blocks that *should* have k+1
220:     iter_limit = max_iter or 5 * n
221:     while iter_limit:
222:         iter_limit -= 1
223:         over2, over1, under = categorize(sizes=sizes, k=k)
224:         if len(under)==0 and len(over2)==0 and len(over1)==r_target:
225:             break  # fully balanced by strict rules
226:         # 1) fix undersized first ------------------------------------------------
227:         if len(under) > 0:
228:             move_node_to_under(
229:                 under=under,
230:                 over1=over1,
231:                 over2=over2,
232:                 rng=rng,
233:                 sizes=sizes,
234:                 k=k,
235:                 members=members,
236:                 blocks=blocks,
237:                 indptr=indptr,
238:                 indices=indices
239:             )
240:             continue
241:         # 2) shrink blocks > k+1 --------------------------------------------------
242:         if len(over2) > 0 :
243:             move_node_from_over(
244:                 under=under,
245:                 over1=over1,
246:                 over2=over2,
247:                 rng=rng,
248:                 sizes=sizes,
249:                 k=k,
250:                 members=members,
251:                 blocks=blocks,
252:                 indptr=indptr,
253:                 indices=indices,
254:                 r_target=r_target
255:             )
256:             continue
257:         # 3) adjust number of k+1 blocks -----------------------------------------
258:         if len(over1) != r_target:
259:             balance_k_plus_1_blocks(
260:                 over1=over1,
261:                 over2=over2,
262:                 rng=rng,
263:                 sizes=sizes,
264:                 k=k,
265:                 members=members,
266:                 blocks=blocks,
267:                 indptr=indptr,
268:                 indices=indices,
269:                 r_target=r_target
270:             )
271:             continue
272:     # ---------------- final safety pass: remove any undersized ---------------
273:     over_blocks = [b for b, s in sizes.items() if s > k]
274:     under_blocks = [b for b, s in sizes.items() if s < k]
275:     for b_dst in under_blocks:
276:         while sizes[b_dst] < k and len(over_blocks) > 0:
277:             b_src = over_blocks[-1]  # take from the end for efficiency
278:             if sizes[b_src] == k: # have we taken all we can?
279:                 over_blocks.pop() # discount this block from further consideration
280:                 continue
281:             # move arbitrary boundary or any vertex as last resort
282:             mv = _movable_vertex(b_src, {b_dst}, rng=rng, blocks=blocks,
283:                                   members=members, indptr=indptr, indices=indices)
284:             if mv is None:
285:                 v = rng.choice(tuple(members[b_src]))
286:             else:
287:                 v, _ = mv
288:             _move(v, b_src, b_dst, blocks=blocks, members=members, sizes=sizes)
289:         # if there are no over_blocks left, spread nodes from under_block randomly among other blocks
290:         if len(over_blocks) == 0:
291:             # assign all nodes in under_block to a random block
292:             for v in members[b_dst]:
293:                 new_block = rng.choice(tuple(blocks.values()))
294:                 blocks[v] = new_block
295:                 members[new_block].add(v)
296:             del sizes[b_dst]
297:     # final check
298:     _, _, under = categorize(sizes=sizes, k=k)
299:     assert len(under) == 0, \
300:         f"Rebalance failed: {len(under)} blocks are still undersized (<{k})."
301:     return blocks
302: ### Base class for BlockAssigner
303: class BlockAssigner:
304:     """
305:     Base class for assigning nodes to blocks in the Stochastic Block Model (SBM).
306:     This class is intended to be subclassed for specific block assignment strategies.
307:     """
308:     def __init__(self,
309:                  graph_data: GraphData,
310:                  rng: np.random.Generator,
311:                  num_blocks: Optional[int] = None,
312:                  min_block_size: Optional[int] = None,
313:                  max_block_size: Optional[int] = None,
314:                  ):
315:         self.graph_data = graph_data
316:         # check if there exist a valid assignment
317:         # given num_blocks, min_block_size, max_block_size
318:         if num_blocks is not None and min_block_size is not None:
319:             if num_blocks * min_block_size > graph_data.num_nodes:
320:                 raise ValueError("Invalid parameters: num_blocks * min_block_size exceeds total number of nodes.")
321:         if max_block_size is not None and min_block_size is not None:
322:             if max_block_size < min_block_size:
323:                 raise ValueError("Invalid parameters: max_block_size cannot be less than min_block_size.")
324:         self.num_blocks = num_blocks
325:         self.min_block_size = min_block_size
326:         self.max_block_size = max_block_size
327:         self.rng = rng
328:     def reindex_blocks(self, blocks: Dict[int, int]) -> Dict[int, int]:
329:         """ 
330:         Reindex block IDs to be consecutive integers starting from 0.
331:         """
332:         unique_blocks = sorted(set(blocks.values()))
333:         block_mapping = {old_id: new_id for new_id, old_id in enumerate(unique_blocks)}
334:         return {node: block_mapping[block_id] for node, block_id in blocks.items()}
335:     def _compute_assignment(self) -> Dict[int, int]:
336:         raise NotImplementedError(
337:             "compute_assignment must be implemented by subclasses of BlockAssigner."
338:         )
339:     def compute_assignment(self) -> BlockData:
340:         raise NotImplementedError(
341:             "compute_assignment must be implemented by subclasses of BlockAssigner."
342:         )
343: class UniformSmallBlockAssigner(BlockAssigner):
344:     """ 
345:     Assigns nodes to blocks of size min_block_size uniformly at random. 
346:     Ignore num_blocks and max_block_size.
347:     """
348:     def _compute_assignment(self) -> Dict[int, int]:
349:         """
350:         Assign nodes to blocks uniformly at random, ensuring each block has at least min_block_size nodes.
351:         """
352:         if self.min_block_size is None:
353:             raise ValueError("min_block_size must be specified for UniformSmallBlockAssigner.")
354:         if self.min_block_size <= 0:
355:             raise ValueError("min_block_size must be a positive integer.")
356:         if self.max_block_size is not None:
357:             Warning("max_block_size is ignored in UniformSmallBlockAssigner.")
358:         if self.num_blocks is not None:
359:             Warning("num_blocks is ignored in UniformSmallBlockAssigner.")
360:         num_nodes = self.graph_data.num_nodes
361:         # create list of nodes in random order
362:         node_list = self.rng.permutation(np.arange(num_nodes))
363:         # assign nodes to blocks
364:         block_assignments = {
365:             node: node // self.min_block_size for node in node_list
366:         }
367:         return block_assignments
368:     # -----------------------------------------------------------------
369:     def compute_assignment(self) -> BlockData:
370:         """
371:         Compute a block assignment based on the proposed assignment.
372:         Currently, this method only performs a min_size balancing step.
373:         """
374:         if self.min_block_size is None:
375:             raise ValueError("min_block_size must be specified for UniformSmallBlockAssigner.")
376:         assignment = self._compute_assignment()
377:         assignment= _rebalance_to_min_size(
378:             blocks=assignment,
379:             adjacency=self.graph_data.adjacency,
380:             k=self.min_block_size,
381:             rng=self.rng,
382:             max_iter=None,  # data-driven max_iter (10*num_nodes)
383:         )
384:         reindexed_assignment = self.reindex_blocks(assignment)
385:         return BlockData(
386:             initial_blocks=reindexed_assignment,
387:             graph_data=self.graph_data
388:         )
389: class MetisBlockAssigner(BlockAssigner):
390:     """
391:     Use Metis to obtain a *balanced* `num_blocks`-way partition of the
392:     (undirected) graph.
393:     Parameters
394:     ----------
395:     graph_data : GraphData
396:         Graph wrapper holding the (sparse) adjacency matrix.
397:     num_blocks : int
398:         Desired number of blocks (≈ N // k where k is target block size).
399:     seed : int, optional
400:         Random seed forwarded to METIS.  If None, METIS uses its own seed.
401:     """
402:     def __init__(
403:         self,
404:         graph_data: GraphData,
405:         rng: np.random.Generator,
406:         num_blocks: Optional[int] = None,
407:         min_block_size: Optional[int] = None,
408:         max_block_size: Optional[int] = None,
409:     ) -> None:
410:         super().__init__(
411:             graph_data=graph_data,
412:             rng=rng,
413:             num_blocks=num_blocks,
414:             min_block_size=min_block_size,
415:             max_block_size=max_block_size,
416:             )
417:         if graph_data.directed:
418:             raise NotImplementedError(
419:                 "MetisBlockAssigner currently supports undirected graphs only."
420:             )
421:         if num_blocks is None and min_block_size is None:
422:             raise ValueError("Either num_blocks or min_block_size must be specified for MetisBlockAssigner.")
423:         if num_blocks is None:
424:             num_blocks = max(
425:                 1, graph_data.num_nodes // min_block_size
426:             )
427:         self.num_blocks = int(num_blocks)
428:         self.seed = rng.integers(2**32)
429:     # -----------------------------------------------------------------
430:     # Utilities
431:     # -----------------------------------------------------------------
432:     @staticmethod
433:     def _to_adj_lists(adj: sp.csr_array) -> list[list[int]]:
434:         """
435:         Convert a CSR adjacency matrix to the adjacency-list format Metis
436:         expects (no self-loops, undirected symmetry).
437:         """
438:         n = adj.shape[0] # type: ignore
439:         rows, cols = adj.nonzero() # type: ignore
440:         neigh = [[] for _ in range(n)]
441:         for u, v in zip(rows, cols):
442:             if u == v:
443:                 continue  # ignore self-loops
444:             neigh[u].append(v)
445:         return neigh
446:     # -----------------------------------------------------------------
447:     # Public API
448:     # -----------------------------------------------------------------
449:     def _compute_metis_assignment(self) -> Dict[int, int]:
450:         """
451:         Run METIS and return a BlockData with the resulting assignment.
452:         May results in blocks of size < min_block_size or > max_block_size.
453:         """
454:         n = self.graph_data.num_nodes
455:         adj_lists = self._to_adj_lists(self.graph_data.adjacency)
456:         # PyMetis returns (edgecuts, membership-array)
457:         _, parts = metis.part_graph(
458:             graph=adj_lists,
459:             nparts = self.num_blocks,
460:             ufactor = 30, # aggresively balance block
461:             tpwgts = [1/self.num_blocks]*self.num_blocks, # equal weights for each block
462:             ubvec = [1+0.05], # 5% imbalance allowed
463:             recursive=True
464:         )
465:         # PyMetis guarantees |parts| == n
466:         blocks: Dict[int, int] = {node: part for node, part in enumerate(parts)}
467:         # Wrap in BlockData so downstream code can use it directly
468:         return blocks
469:     # -----------------------------------------------------------------
470:     def compute_assignment(self) -> BlockData:
471:         """
472:         Compute a balanced block assignment based on the proposed assignment.
473:         Currently, this method only performs a min_size balancing step.
474:         """
475:         if self.min_block_size is None:
476:             raise ValueError("min_block_size must be specified for MetisBlockAssigner.")
477:         assignment = self._compute_metis_assignment()
478:         assignment = _rebalance_to_min_size(
479:             blocks=assignment,
480:             adjacency=self.graph_data.adjacency,
481:             k=self.min_block_size,
482:             rng=self.rng,
483:             max_iter=None,  # data-driven max_iter (10*num_nodes)
484:         )
485:         assignment = self.reindex_blocks(assignment)
486:         return BlockData(
487:             initial_blocks=assignment,
488:             graph_data=self.graph_data
489:         )
490: class RefinedMetisBlockAssigner(MetisBlockAssigner):
491:     """PyMETIS seed ➜ improved greedy rebalance ➜ optional CP‑SAT polish."""
492:     def __init__(
493:         self,
494:         graph_data: GraphData,
495:         rng: np.random.Generator,
496:         num_blocks: int | None = None,
497:         min_block_size: int | None = None,
498:         max_block_size: int | None = None,
499:         cpsat_time_limit: int | None = 5,
500:     ) -> None:
501:         super().__init__(
502:             graph_data=graph_data,
503:             rng=rng,
504:             num_blocks=num_blocks,
505:             min_block_size=min_block_size,
506:             max_block_size=max_block_size,
507:         )
508:         self._rng = rng
509:         self._cpsat_limit = cpsat_time_limit
510:     # -----------------------------------------------------------------
511:     def compute_assignment(self) -> BlockData:  # noqa: D401 – keep signature
512:         # unbalanced
513:         if self.min_block_size is None:
514:             raise ValueError("min_block_size must be specified for RefinedMetisBlockAssigner.")
515:         blocks = super()._compute_metis_assignment()
516:         blocks = _rebalance_to_min_size(
517:             blocks,
518:             self.graph_data.adjacency,
519:             self.min_block_size,
520:             rng=self._rng,
521:         )
522:         # polish with CP‑SAT
523:         blocks = self._cpsat_polish(blocks)
524:         return BlockData(initial_blocks=self.reindex_blocks(blocks),
525:                          graph_data=self.graph_data)
526:     # -----------------------------------------------------------------
527:     def _compute_metis_assignment(self) -> Dict[int, int]:  # noqa: D401  – keep name
528:         return super()._compute_metis_assignment()
529:     # -----------------------------------------------------------------
530:     def _block_members(self, blk: int, blocks: Dict[int, int]) -> List[int]:
531:         return [v for v, b in blocks.items() if b == blk]
532:     # -----------------------------------------------------------------
533:     def _cpsat_polish(self, blocks: Dict[int, int]) -> Dict[int, int]:
534:         """ 
535:         Polish the block assignment to decrease the edge cut while ensuring
536:         block sizes are within min_block_size and min_block_size + 1.
537:         """
538:         if self.min_block_size is None:
539:             return blocks
540:         k = self.min_block_size
541:         sizes = _block_sizes(blocks)
542:         wrong = {b for b, s in sizes.items() if not (k <= s <= k + 1)}
543:         if not wrong:
544:             return blocks  # already good
545:         # collect *boundary* nodes of wrong blocks + their neighbours
546:         boundary: Set[int] = set()
547:         adj = self.graph_data.adjacency
548:         indptr, indices = adj.indptr, adj.indices
549:         for b in wrong:
550:             for v in self._block_members(b, blocks):
551:                 row = slice(indptr[v], indptr[v + 1])
552:                 if any(blocks[u] != b for u in indices[row]):
553:                     boundary.add(v)
554:                     boundary.update(indices[row])
555:         sub_nodes = sorted(boundary)
556:         idx_of: Dict[int, int] = {v: i for i, v in enumerate(sub_nodes)}
557:         sub_adj = adj[sub_nodes][:, sub_nodes]  # type: ignore[index]
558:         # blocks involved
559:         blks_sub = {blocks[v] for v in sub_nodes}
560:         # ------- build CP‑SAT model ----------------------------------
561:         model = cp_model.CpModel()
562:         x = {}
563:         for v in sub_nodes:
564:             for b in blks_sub:
565:                 x[v, b] = model.NewBoolVar(f"x_{v}_{b}")
566:             # each vertex exactly one block (in sub‑problem)
567:             model.Add(sum(x[v, b] for b in blks_sub) == 1)
568:         # block‑size constraints & t_b variables
569:         t = {}
570:         r_target = (len(sub_nodes) + sum(sizes[b] for b in blks_sub) - k * len(blks_sub))  # local oversize quota
571:         for b in blks_sub:
572:             t[b] = model.NewBoolVar(f"t_{b}")
573:             size_expr = sum(x[v, b] for v in sub_nodes) + (sizes[b] - sum(blocks[v] == b for v in sub_nodes))
574:             model.Add(size_expr == k + t[b])
575:         model.Add(sum(t[b] for b in blks_sub) == r_target)
576:         # edge‑cut objective (linearised y/z eliminated – constant perimeter suffices in subgraph)
577:         rows, cols = sub_adj.nonzero()
578:         z = {}
579:         for v, u in zip(rows, cols):
580:             if v >= u:
581:                 continue  # undirected upper triangle
582:             i, j = sub_nodes[v], sub_nodes[u]
583:             z[(i, j)] = model.NewBoolVar(f"z_{i}_{j}")
584:             # z = 1 if endpoints differ
585:             for b in blks_sub:
586:                 model.AddBoolAnd([x[i, b], x[j, b]]).OnlyEnforceIf(z[(i, j)].Not())
587:             # if all same‑block conjunctions false → z=1
588:         model.Minimize(sum(z.values()))
589:         # solve
590:         solver = cp_model.CpSolver()
591:         if self._cpsat_limit:
592:             solver.parameters.max_time_in_seconds = float(self._cpsat_limit)
593:         status = solver.Solve(model)
594:         if status in (cp_model.OPTIMAL, cp_model.FEASIBLE):
595:             for v in sub_nodes:
596:                 for b in blks_sub:
597:                     if solver.BooleanValue(x[v, b]):
598:                         blocks[v] = b
599:                         break
600:         return blocks
601: class EmbedAndConstrKMeansAssigner(BlockAssigner):
602:     """
603:     Assign nodes to blocks using a two-step process:
604:     1. use embed nodes into a low-dimensional space,
605:     2. use constrained KMeans to assign nodes to blocks of prespecified sizes.
606:     """ 
607:     def __init__(
608:         self,
609:         graph_data: GraphData,
610:         rng: np.random.Generator,
611:         num_blocks: Optional[int] = None,
612:         min_block_size: Optional[int] = None,
613:         max_block_size: Optional[int] = None,
614:     ) -> None:
615:         super().__init__(
616:             graph_data=graph_data,
617:             rng=rng,
618:             num_blocks=num_blocks,
619:             min_block_size=min_block_size,
620:             max_block_size=max_block_size,
621:         )
622:         if min_block_size is None:
623:             raise ValueError("num_blocks and min_block_size must be specified for ProneAndConstrKMeansAssigner.")
624:         if num_blocks is not None:
625:             Warning("num_blocks is ignored in ProneAndConstrKMeansAssigner. Only min_block_size is used.")
626:         if max_block_size is not None:
627:             Warning("max_block_size is ignored in ProneAndConstrKMeansAssigner. Only min_block_size is used.")
628:     def embed_nodes(self, adjacency:sp.csr_array, n_dimensions:int=128)->np.ndarray:
629:         """ 
630:         Method to perform node embedding. Subclasses should implement this method
631:         """
632:         raise NotImplementedError("This method should be overwritten by subclasses to provide specific embedding logic.")
633:     def _compute_assignment(self) -> Dict[int, int]:
634:         """
635:         Compute block assignments using constrained KMeans after embedding with Prone.
636:         """
637:         if self.graph_data.num_nodes < self.min_block_size:
638:             raise ValueError("Number of nodes in the graph is less than min_block_size.")
639:         if self.min_block_size is None:
640:             raise ValueError("min_block_size must be specified for ProneAndConstrKMeansAssigner.")
641:         # Step 1: Embed nodes using Prone
642:         embeddings = self.embed_nodes(
643:             adjacency=self.graph_data.adjacency,
644:             n_dimensions=128  # default embedding dimension
645:         )
646:         # compute how many blocks we need to only have blocks of
647:         #   size min_block_size and min_block_size+1
648:         number_of_clusters = self.graph_data.num_nodes // self.min_block_size
649:         # Step 2: Use constrained KMeans to assign nodes to blocks
650:         kmeans = KMeansConstrained(
651:                     n_clusters=number_of_clusters,
652:                     size_min=self.min_block_size,
653:                     size_max=self.min_block_size+1, # 
654:                     init='k-means++',
655:                     n_init=1,
656:                     max_iter=10,
657:                     tol=1e-3,
658:                     verbose=False,
659:                     random_state=self.rng.choice(2**32), 
660:                     copy_x=False, # perform centering
661:                     # use all available CPU cores
662:                     n_jobs=-1
663:                 )
664:         tic = time()
665:         labels = kmeans.fit_predict(embeddings)
666:         toc = time()
667:         print(f"KMeans with constraints took {toc - tic:.2f} seconds for {self.graph_data.num_nodes} nodes.")
668:         # Create a mapping from node index to block ID
669:         blocks = {node: label for node, label in enumerate(labels)} # type: ignore
670:         return blocks
671:     def compute_assignment(self) -> BlockData:
672:         """
673:         Compute a block assignment based on the proposed assignment.
674:         Currently, this method only performs a min_size balancing step.
675:         """
676:         balanced_assignment = self._compute_assignment() # balanced from k-means w. size constraints
677:         reindexed_assignment = self.reindex_blocks(balanced_assignment)
678:         return BlockData(
679:             initial_blocks=reindexed_assignment,
680:             graph_data=self.graph_data
681:         )
682: class ProNEAndConstrKMeansAssigner(EmbedAndConstrKMeansAssigner):
683:     """
684:     Assign nodes to blocks using ProNE embedding followed by constrained KMeans.
685:     """
686:     def embed_nodes(self, adjacency: sp.csr_array, n_dimensions: int = 128) -> np.ndarray:
687:         """
688:         Embed nodes using ProNE.
689:         """
690:         if n_dimensions <= 0:
691:             raise ValueError("n_dimensions must be a positive integer.")
692:         # Create a ProNE instance and fit it to the adjacency matrix
693:         model = ProNE(
694:                     n_components=n_dimensions,
695:                     step=10,
696:                     mu=0.2,
697:                     theta=0.5, 
698:                     exponent=0.75,
699:                     verbose=False
700:                 )
701:         tic = time()
702:         embeddings = model.fit_transform(
703:             sp.csr_matrix(adjacency) # nodevectors expect a CSR matrix, and not array
704:             )
705:         toc = time()
706:         print(f"ProNE embedding took {toc - tic:.2f} seconds for {adjacency.shape[0]} nodes.") # type: ignore
707:         return embeddings
708: class AssignerConstructor:
709:     """ 
710:     Factory class to construct block assigners based on configuration parameters. 
711:     """
712:     def __init__(self, rng: np.random.Generator):
713:         self.rng = rng
714:     def create_assigner(self,
715:                         graph_data: GraphData,
716:                         init_method: InitMethodName = "metis", 
717:                         min_block_size: Optional[int] = None,
718:                         max_block_size: Optional[int] = None,
719:                         num_blocks: Optional[int] = None,
720:                     ) -> BlockAssigner:
721:         if init_method == "uniform":
722:             return UniformSmallBlockAssigner(
723:                 graph_data=graph_data,
724:                 rng=self.rng,
725:                 min_block_size=min_block_size,
726:                 max_block_size=max_block_size,
727:                 num_blocks=num_blocks,
728:             )
729:         elif init_method == "prone_and_kmeans":
730:             return ProNEAndConstrKMeansAssigner(
731:                 graph_data=graph_data,
732:                 rng=self.rng,
733:                 min_block_size=min_block_size,
734:                 max_block_size=max_block_size,
735:                 num_blocks=num_blocks,
736:             )
737:         elif init_method == "metis":
738:             return MetisBlockAssigner(
739:                 graph_data=graph_data,
740:                 rng=self.rng,
741:                 num_blocks=num_blocks,
742:                 min_block_size=min_block_size,
743:                 max_block_size=max_block_size,
744:             )
745:         elif init_method == "metis_refine":
746:             return RefinedMetisBlockAssigner(
747:                 graph_data=graph_data,
748:                 rng=self.rng,
749:                 min_block_size=min_block_size,
750:                 max_block_size=max_block_size,
751:                 num_blocks=num_blocks,
752:                 cpsat_time_limit=10
753:             )
754:         else:
755:             raise ValueError(f"Unknown initialization method: {init_method}. "
756:                 "Available methods: 'metis', 'uniform', 'prone_and_kmeans', 'metis_refine'."
757:                 )

================
File: src/sbm/graph_data.py
================
 1: from scipy.sparse import csr_array
 2: import networkx as nx
 3: class GraphData:
 4:     def __init__(self, adjacency_matrix: csr_array, directed=False):
 5:         if not isinstance(adjacency_matrix, csr_array):
 6:             raise ValueError("Adjacency matrix must be a scipy.sparse.csr_array")
 7:         self.adjacency = adjacency_matrix.astype(int)
 8:         self.directed: bool= directed
 9:         self.num_nodes = self.adjacency.shape[0] # type: ignore
10:         if directed:
11:             self.total_edges = int(self.adjacency.sum())
12:         else:
13:             self.total_edges = int(self.adjacency.sum() / 2)  # For undirected graphs
14:         def __len__(self):
15:             return self.num_nodes
16: def gd_from_networkx(G: nx.Graph) -> GraphData:
17:     """
18:     Create a GraphData instance from a NetworkX graph.
19:     """
20:     if not hasattr(G, 'adjacency'):
21:         raise ValueError("The provided graph must have an adjacency matrix.")
22:     # for new version of networkx
23:     #adj = nx.to_scipy_sparse_matrix(G)
24:     # for old version of networkx
25:     adj = nx.to_scipy_sparse_matrix(G)
26:     adj = csr_array(adj)
27:     return GraphData(adj, directed=G.is_directed())

================
File: src/sbm/io.py
================
  1: from typing import Dict, Callable, Iterable, Tuple, Optional
  2: from pathlib import Path
  3: from dataclasses import dataclass
  4: import json
  5: import gzip
  6: import numpy as np
  7: from scipy.sparse import csr_array, csr_array, load_npz, coo_matrix
  8: from scipy.io import mmread
  9: import networkx as nx                                # light dep
 10: import numpy as np
 11: from scipy.sparse import load_npz, save_npz
 12: from scipy.sparse import csr_array
 13: from sbm.graph_data import GraphData
 14: # src/sbm/io.py
 15: @dataclass
 16: class SBMFit:
 17:     block_sizes: list[int]
 18:     block_conn: csr_array
 19:     directed_graph: bool # if undirected, only upper triangle is stored
 20:     neg_loglike: float
 21:     metadata: dict
 22: class SBMWriter:
 23:     @staticmethod
 24:     def save(path: Path, fit: SBMFit) -> None:
 25:         """ save SBM fit to file """
 26:         path.mkdir(parents=True, exist_ok=True)
 27:         clean_sizes  = [int(s) for s in fit.block_sizes]
 28:         (path / "block_sizes.json").write_text(json.dumps(clean_sizes))
 29:         # save sparce block connectivity matrix using scipy
 30:         with open(path / "block_connectivity.npz", 'wb') as file:
 31:             save_npz(file, fit.block_conn, compressed=True)
 32:         (path / "directed_graph.txt").write_text(str(fit.directed_graph))
 33:         (path / "neg_loglike.txt").write_text(str(fit.neg_loglike))
 34:         with open(path / "metadata.json", 'w') as f:
 35:             json.dump(fit.metadata, f)
 36:     @staticmethod
 37:     def load(path: Path, silence:bool=False) -> SBMFit:
 38:         if not silence:
 39:             print(f"Loading SBM fit from {path}")
 40:         with open(path / "block_sizes.json", 'r') as sizes_file:
 41:             block_sizes = json.load(sizes_file)
 42:         block_sizes = [int(size) for size in block_sizes]
 43:         with open(path / "block_connectivity.npz", 'rb') as conn_file:
 44:             block_conn = load_npz(conn_file)
 45:         directed_graph = path / "directed_graph.txt"
 46:         directed_graph = (path / "directed_graph.txt").read_text().strip().lower() == 'true'
 47:         neg_loglike = float((path / "neg_loglike.txt").read_text().strip())
 48:         with open(path / "metadata.json", 'r') as f:
 49:             metadata = json.load(f)
 50:         return SBMFit(
 51:             #blocks=blocks,
 52:             block_sizes=block_sizes,
 53:             block_conn=csr_array(block_conn),
 54:             directed_graph=directed_graph,
 55:             neg_loglike=neg_loglike,
 56:             metadata=metadata
 57:         )
 58: # ---------------------------------------------------------------------
 59: #  GraphLoader
 60: # ---------------------------------------------------------------------
 61: class GraphLoader:
 62:     """
 63:     Factory that maps a file *extension* to a loader function and returns
 64:     a `GraphData` object (CSR adjacency + directed flag).
 65:     Register new loaders with the `@GraphLoader.register('.ext')`
 66:     decorator.
 67:     """
 68:     # maps extension (lower-case, incl. leading dot) -> callable
 69:     registry: Dict[str, Callable[[Path], Tuple[csr_array, bool]]] = {}
 70:     # ----------------------- decorator -------------------------------
 71:     @classmethod
 72:     def register(cls, *exts: str):
 73:         """
 74:         Use as::
 75:             @GraphLoader.register('.gml', '.graphml')
 76:             def _load_graphml(path): ...
 77:         """
 78:         def decorator(fn: Callable[[Path], Tuple[csr_array, bool]]):
 79:             for ext in exts:
 80:                 cls.registry[ext.lower()] = fn
 81:             return fn
 82:         return decorator
 83:     # ----------------------- public API ------------------------------
 84:     @staticmethod
 85:     def load(
 86:         path: Path,
 87:         *,
 88:         directed: Optional[bool] = None,
 89:         force_undirected: Optional[bool] = None
 90:     ) -> GraphData:
 91:         """Load graph at *path* and return GraphData."""
 92:         ext = path.suffix.lower()
 93:         if ext not in GraphLoader.registry:
 94:             raise ValueError(
 95:                 f"GraphLoader: no loader registered for extension '{ext}'."
 96:             )
 97:         adj, is_directed = GraphLoader.registry[ext](path)
 98:         # allow caller to override detection
 99:         if directed is not None:
100:             is_directed = bool(directed)
101:         # if caller wants undirected, symmetrise the adjacency matrix
102:         if force_undirected:
103:             if is_directed:
104:                 adj = adj.maximum(adj.T)
105:             is_directed = False
106:         adj = csr_array(adj, dtype=np.int8)  # ensure type is int8
107:         return GraphData(adjacency_matrix=adj, directed=is_directed)
108:     # ---------------- default loaders -------------------------------
109: # 1. compressed / plain .npz containing a CSR adjacency ----------------
110: @GraphLoader.register(".npz")
111: def _load_npz(path: Path) -> Tuple[csr_array, bool]:
112:     adj = load_npz(path)
113:     directed = _is_directed(adj)
114:     return adj.tocsr(), directed
115: # 2. Matrix Market -----------------------------------------------------
116: @GraphLoader.register(".mtx")
117: def _load_mtx(path: Path) -> Tuple[csr_array, bool]:
118:     adj = mmread(str(path))
119:     adj = csr_array(adj, dtype=np.int8)
120:     directed = _is_directed(adj)
121:     return adj, directed
122: # 3. Plain edge list (.edges, .edgelist, .txt, optional .gz) -----------
123: @GraphLoader.register(".edges", ".edgelist", ".txt", ".gz")
124: def _load_edgelist(path: Path) -> Tuple[csr_array, bool]:
125:     opener = gzip.open if path.suffix == ".gz" else open
126:     rows, cols = [], []
127:     if not path.exists():
128:         raise FileNotFoundError(f"GraphLoader: file {path} does not exist.")
129:     with opener(path, "rt") as f:
130:         for line in f:
131:             if not line.strip() or line.startswith("#"):
132:                 continue
133:             u, v = map(int, line.split()[:2])
134:             rows.append(u)
135:             cols.append(v)
136:     n = max(rows + cols) + 1
137:     data = np.ones(len(rows), dtype=np.int8)
138:     adj = coo_matrix((data, (rows, cols)), shape=(n, n)).tocsr()
139:     directed = _is_directed(adj)
140:     if not directed:            # symmetrise if undirected
141:         adj = adj.maximum(adj.T)
142:     adj = csr_array(adj, dtype=np.int8)  # ensure type is int8
143:     return adj, directed
144: # 4. GML / GraphML via NetworkX ---------------------------------------
145: @GraphLoader.register(".gml", ".graphml")
146: def _load_graphml(path: Path) -> Tuple[csr_array, bool]:
147:     G = nx.read_gml(path) if path.suffix == ".gml" else nx.read_graphml(path)
148:     directed = G.is_directed()
149:     # new version of networkx
150:     #adj = nx.to_scipy_sparse_array(G, format="csr", dtype=np.int8)
151:     # old version of networkx
152:     adj = nx.to_scipy_sparse_matrix(G, format="csr", dtype=np.int8)
153:     if not directed:
154:         adj = adj.maximum(adj.T)
155:     return adj, directed
156: # ---------------- helper ----------------------------------------------
157: def _is_directed(adj:  csr_array, tol: int = 0) -> bool:
158:     """
159:     Quick symmetric test for an unweighted adjacency.
160:     `tol` is an integer threshold: if more than `tol` entries differ,
161:     we declare the graph directed.
162:     """
163:     diff = adj - adj.T
164:     return diff.count_nonzero() > tol

================
File: src/sbm/mcmc.py
================
  1: from typing import Optional, Tuple, Dict, Optional, List
  2: import numpy as np
  3: #from line_profiler import profile
  4: from numba import jit
  5: #from src.sbm.graph_data import GraphData
  6: from sbm.block_data import BlockData
  7: from sbm.likelihood import LikelihoodCalculator
  8: from sbm.block_change_proposers import ChangeProposer
  9: from sbm.node_mover import NodeMover
 10: from sbm.utils.logger import CSVLogger
 11: from sbm.block_change_proposers import ChangeProposer, ChangeProposerName
 12: #### Aliases
 13: ChangeProposerDict = Dict[ChangeProposerName, ChangeProposer] 
 14: ChangeFreqDict = Dict[ChangeProposerName, float]
 15: class MCMCAlgorithm:
 16:     def __init__(self,
 17:                  block_data: BlockData,
 18:                  likelihood_calculator: LikelihoodCalculator,
 19:                  change_proposer: ChangeProposerDict,
 20:                  rng: np.random.Generator,
 21:                  log: bool = True,
 22:                  change_freq: Optional[ChangeFreqDict] = None,
 23:                  ):
 24:         self.block_data = block_data
 25:         self.likelihood_calculator = likelihood_calculator
 26:         self.change_proposers = change_proposer
 27:         self.change_freq = change_freq if change_freq is not None else { "uniform_swap": 1.0 }
 28:         self.node_mover = NodeMover(block_data=block_data)
 29:         self.rng = rng
 30:         self.current_ll = self.likelihood_calculator.ll
 31:         self.log = log # True if logging is enabled, False otherwise.
 32:         # store the best block assignment and likelihood
 33:         self._best_block_assignment = block_data.blocks.copy()
 34:         self._best_block_conn = block_data.block_connectivity.copy()
 35:         self.best_ll = self.likelihood_calculator.ll
 36:     def fit(self,
 37:             max_num_iterations: int,
 38:             initial_temperature: float = 1,
 39:             cooling_rate: float = 0.99,
 40:             min_block_size: Optional[int] = None,
 41:             max_blocks: Optional[int] = None,
 42:             logger: Optional[CSVLogger] = None,
 43:             patience: Optional[int] = 10_000
 44:         ) -> List[float]:
 45:         """
 46:         Run the adaptive MCMC algorithm to fit the SBM to the network data.
 47:         :param max_num_iterations: max number of MCMC iterations to run.
 48:         :param min_block_size: Minimum allowed size for any block.
 49:         :param initial_temperature: Starting temperature for simulated annealing.
 50:         :param cooling_rate: Rate at which temperature decreases.
 51:         :param target_acceptance_rate: Desired acceptance rate for adaptive adjustments (default 25%).
 52:         :param max_blocks: Optional maximum number of blocks allowed.
 53:         """
 54:         temperature = initial_temperature
 55:         current_ll = self.likelihood_calculator.ll
 56:         acceptance_rate = 0 # acceptance rate of moves between logging
 57:         ll_list = [current_ll]
 58:         if logger:
 59:             logger.log(0, current_ll, acceptance_rate, temperature)
 60:         n_steps_declined = 0
 61:         for iteration in range(1, max_num_iterations + 1):
 62:             move_type = self._select_move_type()
 63:             delta_ll, move_accepted = self._attempt_move(
 64:                 move_type=move_type,
 65:                 min_block_size=min_block_size,
 66:                 temperature=temperature,
 67:                 max_blocks=max_blocks
 68:                 )
 69:             # update likelihood and best assignment so far
 70:             if move_accepted :
 71:                 self.current_ll += delta_ll
 72:                 n_steps_declined = 0
 73:                 if logger:
 74:                     acceptance_rate += 1
 75:                 if self.current_ll < self.best_ll:
 76:                     self.best_ll = current_ll
 77:                     self._best_block_assignment = self.block_data.blocks.copy()
 78:                     self._best_block_conn = self.block_data.block_connectivity.copy()
 79:             else:
 80:                 n_steps_declined += 1
 81:             ll_list.append(self.current_ll)
 82:             temperature = self._update_temperature(temperature, cooling_rate)
 83:             if logger and iteration % logger.log_every == 0:
 84:                 acceptance_rate = acceptance_rate / logger.log_every
 85:                 logger.log(iteration, self.current_ll, acceptance_rate, temperature)
 86:                 acceptance_rate = 0
 87:             if patience is not None and n_steps_declined >= patience:
 88:                 print(f"Stopping early after {iteration} iterations due to patience limit.")
 89:                 break
 90:         return ll_list 
 91:     def _select_move_type(self) -> ChangeProposerName:
 92:         """
 93:         Select a move type based on the current proposal probabilities.
 94:         :return: The selected move type.
 95:         """
 96:         if len(self.change_freq) == 1:
 97:             # Only one move type available, return it directly
 98:             move_type = self.change_freq.popitem()[0]  # type: ignore
 99:         else:
100:             # Select a move type based on the defined probabilities
101:             move_type = self.rng.choice(
102:                 tuple(self.change_freq.keys()),
103:                 p=tuple(self.change_freq.values())
104:             )
105:         return move_type # type: ignore
106:     def _attempt_move(self,
107:                       move_type: ChangeProposerName,
108:                       temperature: float,
109:                       max_blocks: Optional[int] = None,
110:                       min_block_size: Optional[int] = None,
111:         ) -> Tuple[float, bool]:
112:         """
113:         Attempt a move of the specified type.
114:         :param move_type: The type of move to attempt ('swap').
115:         :param min_block_size: Minimum allowed size for any block.
116:         :param temperature: Current temperature for simulated annealing.
117:         :param max_blocks: Optional maximum number of blocks allowed.
118:         :return: Tuple of (delta_ll, move_accepted)
119:         """
120:         delta_ll, move_accepted = 0.0, False
121:         proposed_change, proposed_delta_e, proposed_delta_n = \
122:             self.change_proposers[move_type].propose_change()
123:         # Compute change in log-likelihood and accept/reject move
124:         delta_ll = self.likelihood_calculator.compute_delta_ll(
125:             delta_e=proposed_delta_e,
126:             delta_n=proposed_delta_n
127:             )
128:         move_accepted = self._accept_move(delta_ll, temperature)
129:         if move_accepted:
130:             self.node_mover.perform_change(proposed_change, proposed_delta_e)
131:         return delta_ll, move_accepted
132:     def _accept_move(self, delta_ll: float, temperature: float, eps:float=1e-6) -> bool:
133:         """
134:         Determine whether to accept a proposed move based on likelihood change and temperature.
135:         :param delta_ll: Change in log-likelihood resulting from the proposed move.
136:         :param temperature: Current temperature for simulated annealing.
137:         :return: True if move is accepted, False otherwise.
138:         """
139:         if delta_ll < 0:
140:             return True
141:         temperature = max(temperature, eps)  # Avoid division by zero
142:         z = min(delta_ll / temperature, 700) # clip to avoid overflow in exp
143:         return self.rng.uniform() > np.exp(z)
144:     def _update_temperature(self, current_temperature: float, cooling_rate: float) -> float:
145:         """
146:         Update the temperature according to the cooling schedule.
147:         :param current_temperature: The current temperature.
148:         :param cooling_rate: The cooling rate.
149:         :return: The updated temperature.
150:         """
151:         return current_temperature * cooling_rate

================
File: setup.cfg
================
 1: [metadata]
 2: name = anon-sbm
 3: version = 0.1.0
 4: author = Lasse Mohr
 5: author_email = lmmi@dtu.dk
 6: description = Package for SBM with minimum group-size constraints
 7: long_description = file: README.md
 8: long_description_content_type = text/markdown
 9: classifiers =
10:     Programming Language :: Python :: 3
11:     License :: OSI Approved :: MIT License
12:     Operating System :: OS Independent
13: 
14: [options]
15: package_dir =
16:     =src
17: packages = find:
18: python_requires = >=3.12.0
19: install_requires =
20:     numpy
21:     scipy
22:     networkx
23:     metis
24:     k-means-constrained
25:     nodevectors
26:     tqdm
27:     scikit-learn
28:     pytest
29:     line_profiler
30: 
31: [options.packages.find]
32: where = src

================
File: src/sbm/block_data.py
================
  1: from typing import Dict, Set, Optional
  2: from dataclasses import dataclass
  3: import numpy as np
  4: import scipy.sparse as sp
  5: from sbm.graph_data import GraphData
  6: from sbm.sampling import sample_sbm_graph
  7: BlockConn = sp.dok_array
  8: BlockMembership = Dict[int, Set[int]]  # Block ID to set of node indices
  9: class _BlockDataUpdater:
 10:     """
 11:     Helper class to update edge counts and possible pairs in the block data.
 12:     This class is used to hide bookkeeping of handling directed vs undirected graphs.
 13:     Parameters
 14:     ----------
 15:     bd : BlockData
 16:     """
 17:     def __init__(self, block_data: "BlockData"):
 18:         self.block_data = block_data # B × B integer matrix
 19:     # block memberships
 20:     def _move_node_to_block(self, node: int, block_id: int, update_sizes=True) -> None:
 21:         # update block assignment
 22:         old_block = self.block_data.blocks[node] # type: ignore
 23:         if update_sizes: 
 24:             # update block sizes
 25:             self.block_data.block_sizes[block_id] += 1
 26:             self.block_data.block_sizes[old_block] -= 1
 27:         self.block_data.blocks[node] = block_id # type: ignore
 28:         # update block membersets
 29:         if block_id not in self.block_data.block_members:
 30:             self.block_data.block_members[block_id] = set()
 31:         self.block_data.block_members[block_id].add(node)
 32:         self.block_data.block_members[old_block].remove(node)
 33:     # ----- edge counts --------------------------------------------------
 34:     def _increment_edge_count(self, idx_a: int, idx_b: int, e_delta: int) -> None:
 35:         """ 
 36:         Increment the edge count between two blocks.
 37:         If the graph is undirected, increment both directions.
 38:         e_delta can be negative to decrement the edge count.
 39:         idx_a and idx_b are indices in the block_connectivity matrix.
 40:         """
 41:         self.block_data.block_connectivity[idx_a, idx_b] += e_delta
 42:         if not self.block_data.directed and idx_a != idx_b:
 43:             self.block_data.block_connectivity[idx_b, idx_a] += e_delta
 44: class BlockData:
 45:     """ 
 46:     Class to store block data for the SBM.
 47:     There are two ways to initialize this class:
 48:     Attributes:
 49:         graph_data: The graph data object.
 50:         blocks: A dictionary mapping node indices to block indices.
 51:         block_members: A dictionary mapping block indices to lists of node indices.
 52:         block_sizes: A dictionary mapping block indices to the number of nodes in each block.
 53:         directed: A boolean indicating whether the graph is directed or not.
 54:         block_indices: A dictionary mapping block IDs to indices used in matrices.
 55:         inverse_block_indices: A dictionary mapping indices used in matrices to block IDs.
 56:         block_connectivity: A sparse matrix representing the block connectivity matrix.
 57:     """
 58:     def __init__(self,
 59:                  initial_blocks: Dict[int, int],
 60:                  graph_data: GraphData,
 61:         ):
 62:         self.blocks: Dict[int, int] = initial_blocks # Node to block mapping
 63:         self.block_updater = _BlockDataUpdater(self)
 64:         self.graph_data = graph_data
 65:         self.directed = graph_data.directed
 66:         self.block_members = self._initialize_block_members()
 67:         self.block_sizes = {block: len(nodes) for block, nodes in self.block_members.items()}
 68:         self._update_block_indices()
 69:         self.block_connectivity: BlockConn = self._compute_block_connectivity()
 70:         # Recompute block connectivity based on the new graph data
 71:         self.block_connectivity = self._compute_block_connectivity()
 72:     def increment_edge_count(self, block_a: int, block_b: int, e_delta: int) -> None:
 73:         """ 
 74:         Increment the edge count between two blocks.
 75:         If the graph is undirected, increment both directions.
 76:         e_delta can be negative to decrement the edge count.
 77:         """
 78:         idx_a = self.block_indices[block_a]
 79:         idx_b = self.block_indices[block_b]
 80:         self.block_updater._increment_edge_count(idx_a, idx_b, e_delta)
 81:     def get_possible_pairs(self, block_a: int, block_b:int ) -> int:
 82:         """ 
 83:         Compute the possible number of edges between two blocks.
 84:         """
 85:         if block_a == block_b:
 86:             # If the same block, return the number of pairs within the block
 87:             return self.block_sizes[block_a] * (self.block_sizes[block_a] - 1) // 2
 88:         # If different blocks, return the product of their sizes
 89:         return self.block_sizes[block_a] * self.block_sizes[block_b]
 90:     def _initialize_block_members(self) -> BlockMembership:
 91:         """
 92:         Initialize block members from the blocks mapping.
 93:         :return: A dictionary mapping block indices to lists of node indices.
 94:         """
 95:         if self.blocks is None:
 96:             raise ValueError("Blocks mapping is not provided to initialize block members.")
 97:         block_members: BlockMembership = {}
 98:         for node, block in self.blocks.items():
 99:             if block not in block_members:
100:                 block_members[block] = set()
101:             # Add node to the corresponding block
102:             block_members[block].add(node)
103:         return block_members
104:     def _update_block_indices(self):
105:         """
106:         Update mappings between block IDs and indices used in matrices.
107:         """
108:         # Sort block IDs to ensure consistent ordering
109:         sorted_block_ids = sorted(self.block_members.keys())
110:         self.block_indices = {
111:             block_id: idx for idx, block_id in enumerate(sorted_block_ids)
112:             }
113:         self.inverse_block_indices = {
114:             idx: block_id for block_id, idx in self.block_indices.items()
115:             }
116:     def _compute_block_connectivity(self) -> BlockConn:
117:         """
118:         Compute the block connectivity matrix.
119:         This matrix is a sparse matrix where the entry at (i, j) is number of edges 
120:         between block i and block j. If the graph is undirected, the matrix is symmetric.
121:         """
122:         if self.graph_data is None:
123:             raise ValueError("Graph data is not set. Cannot compute block connectivity.")
124:         if self.block_members is None:
125:             raise ValueError("Block members are not initialized. Cannot compute block connectivity.")
126:         num_blocks = len(self.block_members)
127:         self._update_block_indices()
128:         block_connectivity_dok = sp.dok_array((num_blocks, num_blocks), dtype=np.int64)
129:         if self.directed:
130:             raise ValueError("Block connectivity computation is not implemented for directed graphs.")
131:         else:
132:             for i_block_id, nodes_i in self.block_members.items():
133:                 idx_i = self.block_indices[i_block_id]
134:                 nodes_i = list(nodes_i)
135:                 sub_adj_i = self.graph_data.adjacency[nodes_i]  # type: ignore
136:                 for j_block_id, nodes_j in self.block_members.items():
137:                     idx_j = self.block_indices[j_block_id]
138:                     nodes_j = list(nodes_j)
139:                     # Sum of weights between block i and block j
140:                     weight = sub_adj_i[:, nodes_j].sum() # type: ignore
141:                     # If the blocks are the same, we only count pairs
142:                     if i_block_id == j_block_id:
143:                         weight = weight // 2
144:                     block_connectivity_dok[idx_i, idx_j] = weight
145:             return block_connectivity_dok
146:     def _remove_block_index(self, block_id: int):
147:         """
148:         Remove a block from block_indices and inverse_block_indices.
149:         Do not use directly, call remove_block instead.
150:         :param block_id: The block ID to remove.
151:         """
152:         idx = self.block_indices.pop(block_id)
153:         self.inverse_block_indices.pop(idx)
154:         # Adjust indices of remaining blocks
155:         for b_id, index in self.block_indices.items():
156:             if index > idx:
157:                 self.block_indices[b_id] -= 1
158:                 self.inverse_block_indices[self.block_indices[b_id]] = b_id
159:     def _remove_block_from_connectivity(self, block_id: int):
160:         """
161:         Remove the block's row and column from the block connectivity matrix.
162:         Do not use directly, call remove_block instead.
163:         :param block_id: The block ID to remove.
164:         """
165:         idx = self.block_indices[block_id]
166:         # Remove the row and column corresponding to idx
167:         slicable_array = self.block_connectivity.tocsr()
168:         non_slice_idx = np.arange(self.block_connectivity.shape[1]) != idx # type: ignore
169:         self.block_connectivity = slicable_array[:, non_slice_idx][non_slice_idx, :].todok()
170:     def remove_block(self, block_id: int):
171:         """
172:         Remove a block from the block data.
173:         Do not use directly, call remove_block instead.
174:         :param block_id: The block ID to remove.
175:         """
176:         del self.block_sizes[block_id]
177:         del self.block_members[block_id]
178:         self._remove_block_from_connectivity(block_id)
179:         self._remove_block_index(block_id)
180:     def _add_block_index(self, block_id: int):
181:         """
182:         Add a new block index for a new block.
183:         Do not use directly, call add_block instead.
184:         :param block_id: The block ID to add.
185:         """
186:         new_idx = len(self.block_indices)
187:         self.block_indices[block_id] = new_idx
188:         self.inverse_block_indices[new_idx] = block_id
189:     def _add_block_to_connectivity(self):
190:         """
191:         Add a new block to the block connectivity matrix.
192:         Do not use directly, call add_block instead.
193:         :param block_id: The block ID to add.
194:         """
195:         num_blocks = len(self.block_indices)
196:         connectivity_lil = sp.lil_matrix(self.block_connectivity)
197:         connectivity_lil.resize((num_blocks, num_blocks))
198:         self.block_connectivity = connectivity_lil.todok()
199:     def add_block(self, block_id: int, nodes=[]):
200:         """
201:         Add a new block to the block data.
202:         :param block_id: The block ID to add.
203:         """
204:         if self.blocks is None:
205:             raise ValueError("Blocks mapping is not initialized. Cannot add a block.")
206:         self.block_sizes[block_id] = len(nodes)
207:         self.block_members[block_id] = nodes
208:         for node in nodes:
209:             self.blocks[node] = block_id
210:         self._add_block_index(block_id)
211:         self._add_block_to_connectivity()

================
File: src/sbm/likelihood.py
================
  1: from typing import (
  2:     Dict,
  3:     Tuple,
  4:     Literal,
  5: )
  6: from numba import jit
  7: from scipy.sparse import coo_array
  8: import numpy as np
  9: from sbm.block_data import BlockData
 10: from sbm.block_change_proposers import (
 11:     EdgeDelta,
 12:     CombinationDelta,
 13: )
 14: #### aliases ######
 15: LikelihoodType = Literal['bernoulli']
 16: # Bernoulli functions
 17: @jit(nopython=True, cache=True, fastmath=True)
 18: def _bernoulli_ll_block_pair(e: int, n: int, eps:float= 1e-6) -> float:
 19:     """
 20:     Profile log-likelihood for one block pair (constants dropped).
 21:     e: number of edges between block pair.
 22:     n: number of possible pairs between block pair.
 23:     """
 24:     if e == 0: # 0 · log 0 := 0   (limit)
 25:         return 0.0
 26:     elif n <= 0:
 27:         raise ValueError("Number of possible pairs (n) must be greater than 0.")
 28:     # clip to avoid overflow in lo
 29:     pos = max(e/n, eps)
 30:     neg = max(1 - e/n, eps)
 31:     return e * np.log(pos) - (n-e) * np.log(neg)
 32: @jit(fastmath=True, cache=True)
 33: def _delta_ll_bernoulli_block_pair(
 34:         e_old: int, e_new: int,
 35:         n_old: int, n_new: int,
 36:         eps: float = 1e-6
 37:         ) -> float:
 38:     """Δℓ for a single block pair.
 39:     e_new: new number of edges between block pair.
 40:     e_old: old number of edges between block pair.
 41:     n_new: new number of possible pairs between block pair.
 42:     n_old: old number of possible pairs between block pair.
 43:     """
 44:     new_ll = _bernoulli_ll_block_pair(e=e_new, n=n_new, eps=eps)
 45:     old_ll = _bernoulli_ll_block_pair(e=e_old, n=n_old, eps=eps)
 46:     return new_ll - old_ll
 47: def compute_delta_ll_from_change_bernoulli(
 48:         delta_e: EdgeDelta,
 49:         delta_n: CombinationDelta,
 50:         block_data: BlockData) -> float:
 51:     """
 52:     Incremental change in Bernoulli log-likelihood after a node-swap or move.
 53:     Only the pairs present in `delta_e` or `delta_n` need to be visited.
 54:     delta_e: changes in edge counts between affected blocks.
 55:     delta_n: changes in possible pairs between affected blocks.
 56:     block_data: BlockData object containing edge counts and possible pairs.
 57:     :return: Tuple of (change in log-likelihood, edge counts changes of move delta).
 58:     """
 59:     upper_triangle_only = not block_data.directed
 60:     delta_ll = 0.0
 61:     for (r, s), delta in delta_e.items():
 62:         if upper_triangle_only and s < r:
 63:             continue
 64:         e_old = int(block_data.block_connectivity[r, s]) # type: ignore
 65:         n_old = block_data.get_possible_pairs(r, s)
 66:         e_new = e_old + delta
 67:         n_new = n_old + delta_n[r, s]
 68:         delta_ll += _delta_ll_bernoulli_block_pair(
 69:             e_old=e_old,
 70:             e_new=e_new,
 71:             n_old=n_old,
 72:             n_new=n_new
 73:         )
 74:     return delta_ll
 75: # ────────────────────────────────────────────────────────────────────
 76: ### Helpter function to vectorise the LL global computation
 77: # ────────────────────────────────────────────────────────────────────
 78: @jit(nopython=True, cache=True, fastmath=True)   # remove decorator if you dislike Numba
 79: def _ll_vec(edges: np.ndarray, pairs: np.ndarray, eps: float = 1e-6) -> np.ndarray:
 80:     """
 81:     edges  : e_rs   (int ≥ 0)
 82:     pairs  : n_rs   (int ≥ 1)
 83:     returns: ℓ_rs   (float)
 84:     """
 85:     p = edges / pairs
 86:     p = np.where(p < eps, eps, p)
 87:     p = np.where(p > 1.0 - eps, 1.0 - eps, p)
 88:     return edges * np.log(p) - (pairs - edges) * np.log1p(-p)
 89: def compute_global_bernoulli_ll_fast(block_data:BlockData) -> float:
 90:     """
 91:     Same semantics as the original `compute_global_bernoulli_ll`, but
 92:     **O(nnz)** instead of O(B²).
 93:     The trick: only block pairs with at least one edge (e_rs > 0) can
 94:     change the profiled Bernoulli LL once the constants are dropped.
 95:     """
 96:     conn: coo_array = coo_array(block_data.block_connectivity)
 97:     rows, cols, e = conn.row, conn.col, conn.data.astype(np.int64)
 98:     # Undirected graphs: keep only upper-triangle to avoid double count
 99:     if not block_data.directed:
100:         keep = rows <= cols
101:         rows, cols, e = rows[keep], cols[keep], e[keep]
102:     # Block sizes in matrix-index order
103:     sizes = np.fromiter(
104:         (block_data.block_sizes[block_data.inverse_block_indices[i]]
105:          for i in range(len(block_data.block_sizes))),
106:         dtype=np.int64,
107:         count=len(block_data.block_sizes)
108:     )
109:     # Possible pair counts n_rs (vectorised)
110:     n = np.where(
111:         rows == cols,
112:         sizes[rows] * (sizes[rows] - 1) // 2,   # diagonal blocks
113:         sizes[rows] * sizes[cols]               # off-diagonal
114:     )
115:     # Safety: skip singleton blocks (n = 0) to avoid /0 in n==1 corner
116:     valid = n > 0
117:     if not valid.all():
118:         rows, cols, e, n = rows[valid], cols[valid], e[valid], n[valid]
119:     # Vectorised LL and reduction
120:     return float(_ll_vec(e, n).sum())
121: def compute_global_bernoulli_ll(
122:         block_data: BlockData,
123: ) -> float:
124:     """
125:     Compute the global log-likelihood of the SBM using Bernoulli likelihood.
126:     :param block_data: The BlockData object containing block connectivity and sizes.
127:     :param upper_triangle_only: If True, only compute for upper triangle of the connectivity matrix.
128:     :return: The global log-likelihood.
129:     """
130:     upper_triangle_only = not block_data.directed
131:     ll = 0.0
132:     for r in range(len(block_data.block_sizes)):
133:         # if block has less than 2 nodes, skip it: no possible pairs
134:         size_r = block_data.block_sizes[ block_data.inverse_block_indices[r] ]
135:         if size_r <= 1:
136:             continue 
137:         for s in range(r if upper_triangle_only else 0, len(block_data.block_sizes)):
138:             e = block_data.block_connectivity[r, s]
139:             #n = block_data.get_possible_pairs(r, s)
140:             if r == s:
141:                 # If the same block, return the number of pairs within the block
142:                 n = block_data.block_sizes[r] * (block_data.block_sizes[r] - 1) // 2
143:             # If different blocks, return the product of their sizes
144:             else:
145:                 n = block_data.block_sizes[r] * block_data.block_sizes[s]
146:             if e < 0 or n < 0:
147:                 raise ValueError(f"Invalid edge count {e} or possible pairs {n} for block pair ({r}, {s}).")
148:             if e > n:
149:                 raise ValueError(f"Edge count {e} cannot be greater than possible pairs {n} for block pair ({r}, {s}).")
150:             ll += _bernoulli_ll_block_pair(e, n) # type: ignore
151:     return ll
152: #### LikelihoodCalculator class ######
153: class LikelihoodCalculator:
154:     def __init__(self,
155:                  block_data: BlockData,
156:                  likelihood_type: LikelihoodType = 'bernoulli',
157:                  ):
158:         self.block_data = block_data
159:         self.likelihood_type: LikelihoodType = 'bernoulli'
160:         self.ll = self.compute_likelihood()
161:     def compute_likelihood(self) -> float:
162:         """
163:         Compute the likelihood of the network given the current partition.
164:         :return: The log-likelihood of the SBM.
165:         """
166:         if self.likelihood_type.lower() == 'bernoulli':
167:             return compute_global_bernoulli_ll_fast(block_data=self.block_data)
168:         else:
169:             raise NotImplementedError("Only Bernoulli likelihood is implemented.")
170:     def _compute_delta_ll_from_changes(self,
171:                                        delta_e: EdgeDelta,
172:                                        delta_n: CombinationDelta,
173:     ) ->float:
174:         """
175:         efficeintly compute the change in log-likelihood from changes in edge counts and possible pairs.
176:         :param delta_e: Changes in edge counts between blocks.
177:         :param delta_n: Changes in possible pairs between blocks.
178:         :param total_edges: Total number of edges in the graph.
179:         :return: The change in log-likelihood.
180:         """
181:         if self.likelihood_type.lower() == 'bernoulli':
182:             return compute_delta_ll_from_change_bernoulli(
183:                 delta_e=delta_e,
184:                 delta_n=delta_n,
185:                 block_data=self.block_data
186:             )
187:         else:
188:             raise NotImplementedError("Only Bernoulli likelihood is implemented.")
189:     def compute_delta_ll(self,
190:                         delta_e: EdgeDelta,
191:                         delta_n: CombinationDelta,
192:         ) -> float:
193:         """
194:         Compute the change in log-likelihood for a proposed swap of two nodes.
195:         :param proposed_moves: A list of tuples (node_i, node_j) representing the nodes to swap.
196:         :return: The change in log-likelihood.
197:         """
198:         return self._compute_delta_ll_from_changes(
199:             delta_e=delta_e,
200:             delta_n=delta_n
201:             )




================================================================
End of Codebase
================================================================
